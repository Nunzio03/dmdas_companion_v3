
dmdas_companion_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007cb8  08007cb8  00017cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d4  080080d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080080d4  080080d4  000180d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080dc  080080dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080080e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200001dc  080082c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  080082c0  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d33  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284b  00000000  00000000  00033f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000377d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179b1  00000000  00000000  00038758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d84  00000000  00000000  00050109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b1c  00000000  00000000  00063e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f59a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005620  00000000  00000000  000f59fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c9c 	.word	0x08007c9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007c9c 	.word	0x08007c9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b59      	ldr	r3, [pc, #356]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a58      	ldr	r2, [pc, #352]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b56      	ldr	r3, [pc, #344]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b52      	ldr	r3, [pc, #328]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a51      	ldr	r2, [pc, #324]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <MX_GPIO_Init+0x19c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	; (800112c <MX_GPIO_Init+0x19c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a4a      	ldr	r2, [pc, #296]	; (800112c <MX_GPIO_Init+0x19c>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b48      	ldr	r3, [pc, #288]	; (800112c <MX_GPIO_Init+0x19c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|HCSR_TRIG_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7108 	mov.w	r1, #544	; 0x220
 800101c:	4844      	ldr	r0, [pc, #272]	; (8001130 <MX_GPIO_Init+0x1a0>)
 800101e:	f001 fcb1 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIRECTION_GPIO_Port, MOTOR_DIRECTION_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4842      	ldr	r0, [pc, #264]	; (8001134 <MX_GPIO_Init+0x1a4>)
 800102a:	f001 fcab 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	4841      	ldr	r0, [pc, #260]	; (8001138 <MX_GPIO_Init+0x1a8>)
 8001034:	f001 fca6 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	483c      	ldr	r0, [pc, #240]	; (8001130 <MX_GPIO_Init+0x1a0>)
 8001040:	f001 fca0 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4837      	ldr	r0, [pc, #220]	; (8001138 <MX_GPIO_Init+0x1a8>)
 800105c:	f001 faf6 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|HCSR_TRIG_Pin|MOTOR_ENABLE_Pin;
 8001060:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	482d      	ldr	r0, [pc, #180]	; (8001130 <MX_GPIO_Init+0x1a0>)
 800107a:	f001 fae7 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_DIRECTION_Pin;
 800107e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4827      	ldr	r0, [pc, #156]	; (8001134 <MX_GPIO_Init+0x1a4>)
 8001098:	f001 fad8 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_GPIO_Init+0x1a8>)
 80010b4:	f001 faca 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_DIRECTION_Pin;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLC_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <MX_GPIO_Init+0x1a0>)
 80010ce:	f001 fabd 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_EN_MOT_Pin;
 80010d2:	2308      	movs	r3, #8
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLC_EN_MOT_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4813      	ldr	r0, [pc, #76]	; (8001134 <MX_GPIO_Init+0x1a4>)
 80010e6:	f001 fab1 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = END_STOPmin_Pin|END_STOPmax_Pin;
 80010ea:	2330      	movs	r3, #48	; 0x30
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_GPIO_Init+0x1a4>)
 8001100:	f001 faa4 	bl	800264c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	200a      	movs	r0, #10
 800110a:	f001 f9d6 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800110e:	200a      	movs	r0, #10
 8001110:	f001 f9ef 	bl	80024f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2017      	movs	r0, #23
 800111a:	f001 f9ce 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800111e:	2017      	movs	r0, #23
 8001120:	f001 f9e7 	bl	80024f2 <HAL_NVIC_EnableIRQ>

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800

0800113c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_I2C1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C1_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_I2C1_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_I2C1_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_I2C1_Init+0x50>)
 800117a:	f001 fc4f 	bl	8002a1c <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 fcf2 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000250 	.word	0x20000250
 8001190:	40005400 	.word	0x40005400
 8001194:	000186a0 	.word	0x000186a0

08001198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <HAL_I2C_MspInit+0x84>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12c      	bne.n	8001214 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e8:	2304      	movs	r3, #4
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <HAL_I2C_MspInit+0x8c>)
 80011f4:	f001 fa2a 	bl	800264c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_I2C_MspInit+0x88>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_I2C_MspInit+0x88>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400

08001228 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t time){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <delay_us+0x30>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3)<time);
 800123a:	bf00      	nop
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <delay_us+0x30>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3f9      	bcc.n	800123c <delay_us+0x14>
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200002ec 	.word	0x200002ec

0800125c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	/* HC_SR04 INTERRUPT*/
	if(htim->Instance == TIM3){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a97      	ldr	r2, [pc, #604]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d16a      	bne.n	8001344 <HAL_TIM_IC_CaptureCallback+0xe8>
		uint16_t val = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4896      	ldr	r0, [pc, #600]	; (80014cc <HAL_TIM_IC_CaptureCallback+0x270>)
 8001272:	f002 fc99 	bl	8003ba8 <HAL_TIM_ReadCapturedValue>
 8001276:	4603      	mov	r3, r0
 8001278:	81fb      	strh	r3, [r7, #14]
		if(!rised_hc){
 800127a:	4b95      	ldr	r3, [pc, #596]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_TIM_IC_CaptureCallback+0x54>
			dist_time1 = val;
 8001282:	4a94      	ldr	r2, [pc, #592]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	8013      	strh	r3, [r2, #0]
			rised_hc = 1;
 8001288:	4b91      	ldr	r3, [pc, #580]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020a 	bic.w	r2, r2, #10
 800129c:	621a      	str	r2, [r3, #32]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0202 	orr.w	r2, r2, #2
 80012ac:	621a      	str	r2, [r3, #32]
 80012ae:	e049      	b.n	8001344 <HAL_TIM_IC_CaptureCallback+0xe8>
		}else{ //falling
			if(val >= dist_time1){
 80012b0:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	89fa      	ldrh	r2, [r7, #14]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d318      	bcc.n	80012ec <HAL_TIM_IC_CaptureCallback+0x90>
				distance = (uint32_t)((val - dist_time1)*100/58.0); // decimi di millimetro
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	4a85      	ldr	r2, [pc, #532]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012be:	8812      	ldrh	r2, [r2, #0]
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	2264      	movs	r2, #100	; 0x64
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f933 	bl	8000534 <__aeabi_i2d>
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80012d4:	f7ff fac2 	bl	800085c <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc6a 	bl	8000bb8 <__aeabi_d2uiz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a7d      	ldr	r2, [pc, #500]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x280>)
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e01a      	b.n	8001322 <HAL_TIM_IC_CaptureCallback+0xc6>
			}else{
				distance = (uint32_t)(((0xffff-dist_time1)+val)*100/58.0);
 80012ec:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80012f4:	33ff      	adds	r3, #255	; 0xff
 80012f6:	89fa      	ldrh	r2, [r7, #14]
 80012f8:	4413      	add	r3, r2
 80012fa:	2264      	movs	r2, #100	; 0x64
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f917 	bl	8000534 <__aeabi_i2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800130c:	f7ff faa6 	bl	800085c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc4e 	bl	8000bb8 <__aeabi_d2uiz>
 800131c:	4603      	mov	r3, r0
 800131e:	4a6f      	ldr	r2, [pc, #444]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x280>)
 8001320:	6013      	str	r3, [r2, #0]
			}
			rised_hc = 0;
 8001322:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a1a      	ldr	r2, [r3, #32]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 020a 	bic.w	r2, r2, #10
 8001336:	621a      	str	r2, [r3, #32]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6a12      	ldr	r2, [r2, #32]
 8001342:	621a      	str	r2, [r3, #32]
		}

	}
	/*CUSTOM PROTOCOL INTERRUPT*/
	if(htim->Instance == TIM4){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a65      	ldr	r2, [pc, #404]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0x284>)
 800134a:	4293      	cmp	r3, r2
 800134c:	f040 80b7 	bne.w	80014be <HAL_TIM_IC_CaptureCallback+0x262>

		uint16_t val = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001350:	2100      	movs	r1, #0
 8001352:	4864      	ldr	r0, [pc, #400]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001354:	f002 fc28 	bl	8003ba8 <HAL_TIM_ReadCapturedValue>
 8001358:	4603      	mov	r3, r0
 800135a:	81bb      	strh	r3, [r7, #12]
		if(first_wave_rec==0){
 800135c:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d145      	bne.n	80013f0 <HAL_TIM_IC_CaptureCallback+0x194>

			if(!rised_plc){
 8001364:	4b61      	ldr	r3, [pc, #388]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d116      	bne.n	800139a <HAL_TIM_IC_CaptureCallback+0x13e>

				dur_time1 = val;
 800136c:	4a60      	ldr	r2, [pc, #384]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	8013      	strh	r3, [r2, #0]
				rised_plc = 1;
 8001372:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 020a 	bic.w	r2, r2, #10
 8001386:	621a      	str	r2, [r3, #32]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a1a      	ldr	r2, [r3, #32]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0202 	orr.w	r2, r2, #2
 8001396:	621a      	str	r2, [r3, #32]
		}


	}

}
 8001398:	e091      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
					if(val>=dur_time1){
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	89ba      	ldrh	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d307      	bcc.n	80013b4 <HAL_TIM_IC_CaptureCallback+0x158>
						dur1= val-dur_time1;
 80013a4:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	89ba      	ldrh	r2, [r7, #12]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	e008      	b.n	80013c6 <HAL_TIM_IC_CaptureCallback+0x16a>
						dur1= (0xffff-dur_time1)+val;
 80013b4:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	89ba      	ldrh	r2, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3b01      	subs	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013c4:	801a      	strh	r2, [r3, #0]
					rised_plc=0;
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a1a      	ldr	r2, [r3, #32]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 020a 	bic.w	r2, r2, #10
 80013da:	621a      	str	r2, [r3, #32]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a12      	ldr	r2, [r2, #32]
 80013e6:	621a      	str	r2, [r3, #32]
					first_wave_rec=1;
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	e066      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
				if(!rised_plc){
 80013f0:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d116      	bne.n	8001426 <HAL_TIM_IC_CaptureCallback+0x1ca>
					dur_time1 = val;
 80013f8:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	8013      	strh	r3, [r2, #0]
					rised_plc = 1;
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020a 	bic.w	r2, r2, #10
 8001412:	621a      	str	r2, [r3, #32]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a1a      	ldr	r2, [r3, #32]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0202 	orr.w	r2, r2, #2
 8001422:	621a      	str	r2, [r3, #32]
}
 8001424:	e04b      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
						if(val>=dur_time1){
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	89ba      	ldrh	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d307      	bcc.n	8001440 <HAL_TIM_IC_CaptureCallback+0x1e4>
							dur2= val-dur_time1;
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	89ba      	ldrh	r2, [r7, #12]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	e008      	b.n	8001452 <HAL_TIM_IC_CaptureCallback+0x1f6>
							dur2= (0xffff-dur_time1)+val;
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	89ba      	ldrh	r2, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001450:	801a      	strh	r2, [r3, #0]
						rised_plc=0;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 020a 	bic.w	r2, r2, #10
 8001466:	621a      	str	r2, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a12      	ldr	r2, [r2, #32]
 8001472:	621a      	str	r2, [r3, #32]
						first_wave_rec=0;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
						dur1 = (dur1/15)-15;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b0f      	subs	r3, #15
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 800148e:	801a      	strh	r2, [r3, #0]
						dur2 = (dur2/15)-15;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b0f      	subs	r3, #15
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014a4:	801a      	strh	r2, [r3, #0]
						magic_number = (dur1<<5)|dur2;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80014bc:	801a      	strh	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40000400 	.word	0x40000400
 80014cc:	200002ec 	.word	0x200002ec
 80014d0:	200001f8 	.word	0x200001f8
 80014d4:	200001fa 	.word	0x200001fa
 80014d8:	404d0000 	.word	0x404d0000
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	40000800 	.word	0x40000800
 80014e4:	200002a4 	.word	0x200002a4
 80014e8:	20000201 	.word	0x20000201
 80014ec:	20000200 	.word	0x20000200
 80014f0:	20000206 	.word	0x20000206
 80014f4:	20000202 	.word	0x20000202
 80014f8:	20000204 	.word	0x20000204
 80014fc:	88888889 	.word	0x88888889
 8001500:	20000208 	.word	0x20000208

08001504 <HCSR04_trigger>:

void HCSR04_trigger(){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HCSR_TRIG_GPIO_Port, HCSR_TRIG_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <HCSR04_trigger+0x28>)
 8001510:	f001 fa38 	bl	8002984 <HAL_GPIO_WritePin>
	delay_us(10);
 8001514:	200a      	movs	r0, #10
 8001516:	f7ff fe87 	bl	8001228 <delay_us>
	HAL_GPIO_WritePin(HCSR_TRIG_GPIO_Port, HCSR_TRIG_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <HCSR04_trigger+0x28>)
 8001522:	f001 fa2f 	bl	8002984 <HAL_GPIO_WritePin>

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020000 	.word	0x40020000

08001530 <move_stepper>:


void move_stepper(uint32_t steps){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_DIRECTION_GPIO_Port, MOTOR_DIRECTION_Pin,direction );
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <move_stepper+0x98>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001542:	4822      	ldr	r0, [pc, #136]	; (80015cc <move_stepper+0x9c>)
 8001544:	f001 fa1e 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4820      	ldr	r0, [pc, #128]	; (80015d0 <move_stepper+0xa0>)
 8001550:	f001 fa18 	bl	8002984 <HAL_GPIO_WritePin>
	 for (int i = 0; i <steps ; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e028      	b.n	80015ac <move_stepper+0x7c>
	  {
		 if(((direction == 1) && HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin))||
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <move_stepper+0x98>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d106      	bne.n	8001570 <move_stepper+0x40>
 8001562:	2110      	movs	r1, #16
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <move_stepper+0x9c>)
 8001566:	f001 f9f5 	bl	8002954 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d121      	bne.n	80015b4 <move_stepper+0x84>
				 ((direction == 0)&& HAL_GPIO_ReadPin(END_STOPmax_GPIO_Port, END_STOPmax_Pin))){
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <move_stepper+0x98>)
 8001572:	781b      	ldrb	r3, [r3, #0]
		 if(((direction == 1) && HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin))||
 8001574:	2b00      	cmp	r3, #0
 8001576:	d106      	bne.n	8001586 <move_stepper+0x56>
				 ((direction == 0)&& HAL_GPIO_ReadPin(END_STOPmax_GPIO_Port, END_STOPmax_Pin))){
 8001578:	2120      	movs	r1, #32
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <move_stepper+0x9c>)
 800157c:	f001 f9ea 	bl	8002954 <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <move_stepper+0x84>

			 break;
		 }

		 HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <move_stepper+0xa4>)
 800158c:	f001 f9fa 	bl	8002984 <HAL_GPIO_WritePin>
		 delay_us(30);
 8001590:	201e      	movs	r0, #30
 8001592:	f7ff fe49 	bl	8001228 <delay_us>
		 HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <move_stepper+0xa4>)
 800159c:	f001 f9f2 	bl	8002984 <HAL_GPIO_WritePin>
		 delay_us(30);
 80015a0:	201e      	movs	r0, #30
 80015a2:	f7ff fe41 	bl	8001228 <delay_us>
	 for (int i = 0; i <steps ; i++)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8d2      	bhi.n	800155a <move_stepper+0x2a>

	  }
	 HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <move_stepper+0xa0>)
 80015bc:	f001 f9e2 	bl	8002984 <HAL_GPIO_WritePin>

}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000210 	.word	0x20000210
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020800 	.word	0x40020800

080015d8 <move_stepper_dec_mm>:

void move_stepper_dec_mm(uint32_t dec_mm){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	moving = 1;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <move_stepper_dec_mm+0x80>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
	if(direction){
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <move_stepper_dec_mm+0x84>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <move_stepper_dec_mm+0x2e>
		open_loop_motor_position -= dec_mm;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <move_stepper_dec_mm+0x88>)
 80015f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <move_stepper_dec_mm+0x88>)
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	e00a      	b.n	800161c <move_stepper_dec_mm+0x44>
	}else{

		open_loop_motor_position += dec_mm;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <move_stepper_dec_mm+0x88>)
 800160c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4413      	add	r3, r2
 8001614:	b29b      	uxth	r3, r3
 8001616:	b21a      	sxth	r2, r3
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <move_stepper_dec_mm+0x88>)
 800161a:	801a      	strh	r2, [r3, #0]

	}
	move_stepper((uint32_t)(dec_mm/DMILLIM_USTEP_CONSTANT));
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe ff79 	bl	8000514 <__aeabi_ui2d>
 8001622:	a30b      	add	r3, pc, #44	; (adr r3, 8001650 <move_stepper_dec_mm+0x78>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f918 	bl	800085c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fac0 	bl	8000bb8 <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff78 	bl	8001530 <move_stepper>
	moving = 0;
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <move_stepper_dec_mm+0x80>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	4c327ffc 	.word	0x4c327ffc
 8001654:	3f89a8c1 	.word	0x3f89a8c1
 8001658:	2000020a 	.word	0x2000020a
 800165c:	20000210 	.word	0x20000210
 8001660:	2000020c 	.word	0x2000020c

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001668:	f000 fdb6 	bl	80021d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166c:	f000 f884 	bl	8001778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001670:	f7ff fc8e 	bl	8000f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001674:	f000 fd0c 	bl	8002090 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001678:	f000 fbd4 	bl	8001e24 <MX_TIM3_Init>
  MX_TIM4_Init();
 800167c:	f000 fc26 	bl	8001ecc <MX_TIM4_Init>
  MX_I2C1_Init();
 8001680:	f7ff fd5c 	bl	800113c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001684:	2100      	movs	r1, #0
 8001686:	482f      	ldr	r0, [pc, #188]	; (8001744 <main+0xe0>)
 8001688:	f001 ffd0 	bl	800362c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	482e      	ldr	r0, [pc, #184]	; (8001748 <main+0xe4>)
 8001690:	f001 ffcc 	bl	800362c <HAL_TIM_IC_Start_IT>


  HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 8001694:	2201      	movs	r2, #1
 8001696:	492d      	ldr	r1, [pc, #180]	; (800174c <main+0xe8>)
 8001698:	482d      	ldr	r0, [pc, #180]	; (8001750 <main+0xec>)
 800169a:	f002 fdbf 	bl	800421c <HAL_UART_Receive_IT>
  si5351_setupPLLInt(SI5351_PLL_A, 32);
  si5351_setupMultisynth(0, SI5351_PLL_A, 4, 1000-4, 1);
  si5351_setupRdiv(0, SI5351_R_DIV_8);
  si5351_enableOutputs(0xFF);*/

  if(!HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin)){
 800169e:	2110      	movs	r1, #16
 80016a0:	482c      	ldr	r0, [pc, #176]	; (8001754 <main+0xf0>)
 80016a2:	f001 f957 	bl	8002954 <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <main+0x4e>
  		back_movement = 1;
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <main+0xf4>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	f000 fe02 	bl	80022bc <HAL_Delay>
	  HCSR04_trigger();
 80016b8:	f7ff ff24 	bl	8001504 <HCSR04_trigger>
	  move_mot = !HAL_GPIO_ReadPin(PLC_EN_MOT_GPIO_Port, PLC_EN_MOT_Pin);
 80016bc:	2108      	movs	r1, #8
 80016be:	4825      	ldr	r0, [pc, #148]	; (8001754 <main+0xf0>)
 80016c0:	f001 f948 	bl	8002954 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf0c      	ite	eq
 80016ca:	2301      	moveq	r3, #1
 80016cc:	2300      	movne	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <main+0xf8>)
 80016d4:	701a      	strb	r2, [r3, #0]
	  direction = HAL_GPIO_ReadPin(PLC_DIRECTION_GPIO_Port, PLC_DIRECTION_Pin);
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	4821      	ldr	r0, [pc, #132]	; (8001760 <main+0xfc>)
 80016dc:	f001 f93a 	bl	8002954 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <main+0x100>)
 80016e6:	701a      	strb	r2, [r3, #0]
	  if(move_mot&&(!motor_moved)){
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <main+0xf8>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <main+0xa4>
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <main+0x104>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <main+0xa4>

		  move_stepper_dec_mm(magic_number);
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <main+0x108>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff6b 	bl	80015d8 <move_stepper_dec_mm>
		  motor_moved = 1;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <main+0x104>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
	  }

	  if(startup_movement){
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <main+0x10c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <main+0xba>
		  direction =0;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <main+0x100>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
		  move_stepper(600);
 8001716:	f44f 7016 	mov.w	r0, #600	; 0x258
 800171a:	f7ff ff09 	bl	8001530 <move_stepper>
	  }

	  if(back_movement){
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <main+0xf4>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0c5      	beq.n	80016b2 <main+0x4e>
		  direction = 1;
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <main+0x100>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
		  move_stepper(600);
 800172c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001730:	f7ff fefe 	bl	8001530 <move_stepper>
		  tare_counter += 600;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <main+0x110>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <main+0x110>)
 800173e:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8001740:	e7b7      	b.n	80016b2 <main+0x4e>
 8001742:	bf00      	nop
 8001744:	200002ec 	.word	0x200002ec
 8001748:	200002a4 	.word	0x200002a4
 800174c:	20000219 	.word	0x20000219
 8001750:	20000334 	.word	0x20000334
 8001754:	40020400 	.word	0x40020400
 8001758:	20000218 	.word	0x20000218
 800175c:	2000020e 	.word	0x2000020e
 8001760:	40020000 	.word	0x40020000
 8001764:	20000210 	.word	0x20000210
 8001768:	2000020f 	.word	0x2000020f
 800176c:	20000208 	.word	0x20000208
 8001770:	20000211 	.word	0x20000211
 8001774:	20000214 	.word	0x20000214

08001778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b094      	sub	sp, #80	; 0x50
 800177c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	2230      	movs	r2, #48	; 0x30
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fbec 	bl	8004f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <SystemClock_Config+0xcc>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	4a27      	ldr	r2, [pc, #156]	; (8001844 <SystemClock_Config+0xcc>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6413      	str	r3, [r2, #64]	; 0x40
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <SystemClock_Config+0xcc>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <SystemClock_Config+0xd0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017c4:	4a20      	ldr	r2, [pc, #128]	; (8001848 <SystemClock_Config+0xd0>)
 80017c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <SystemClock_Config+0xd0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017dc:	2301      	movs	r3, #1
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e0:	2310      	movs	r3, #16
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e4:	2302      	movs	r3, #2
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ec:	2308      	movs	r3, #8
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 80017f0:	233c      	movs	r3, #60	; 0x3c
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017f8:	2307      	movs	r3, #7
 80017fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fa4f 	bl	8002ca4 <HAL_RCC_OscConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800180c:	f000 f9ae 	bl	8001b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001810:	230f      	movs	r3, #15
 8001812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001814:	2302      	movs	r3, #2
 8001816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f001 fcb1 	bl	8003194 <HAL_RCC_ClockConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001838:	f000 f998 	bl	8001b6c <Error_Handler>
  }
}
 800183c:	bf00      	nop
 800183e:	3750      	adds	r7, #80	; 0x50
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	40007000 	.word	0x40007000
 800184c:	00000000 	.word	0x00000000

08001850 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	switch(cmd_char){
 8001858:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <HAL_UART_RxCpltCallback+0x230>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3b61      	subs	r3, #97	; 0x61
 8001860:	2b13      	cmp	r3, #19
 8001862:	f200 80f8 	bhi.w	8001a56 <HAL_UART_RxCpltCallback+0x206>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <HAL_UART_RxCpltCallback+0x1c>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	080018bd 	.word	0x080018bd
 8001870:	0800193d 	.word	0x0800193d
 8001874:	08001981 	.word	0x08001981
 8001878:	080019b1 	.word	0x080019b1
 800187c:	08001a57 	.word	0x08001a57
 8001880:	08001a57 	.word	0x08001a57
 8001884:	080019ef 	.word	0x080019ef
 8001888:	08001a57 	.word	0x08001a57
 800188c:	08001a57 	.word	0x08001a57
 8001890:	08001a57 	.word	0x08001a57
 8001894:	08001a57 	.word	0x08001a57
 8001898:	08001a57 	.word	0x08001a57
 800189c:	08001a57 	.word	0x08001a57
 80018a0:	08001a57 	.word	0x08001a57
 80018a4:	08001a57 	.word	0x08001a57
 80018a8:	08001a57 	.word	0x08001a57
 80018ac:	08001a57 	.word	0x08001a57
 80018b0:	08001a57 	.word	0x08001a57
 80018b4:	08001a57 	.word	0x08001a57
 80018b8:	080019e7 	.word	0x080019e7
	case 'a':
		distance_avg=0;
 80018bc:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <HAL_UART_RxCpltCallback+0x234>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
		for(int k=0; k<10;k++){
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e00b      	b.n	80018e0 <HAL_UART_RxCpltCallback+0x90>
			distance_avg += distance;
 80018c8:	4b6e      	ldr	r3, [pc, #440]	; (8001a84 <HAL_UART_RxCpltCallback+0x234>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b6e      	ldr	r3, [pc, #440]	; (8001a88 <HAL_UART_RxCpltCallback+0x238>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <HAL_UART_RxCpltCallback+0x234>)
 80018d8:	601a      	str	r2, [r3, #0]
		for(int k=0; k<10;k++){
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3301      	adds	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	ddf0      	ble.n	80018c8 <HAL_UART_RxCpltCallback+0x78>
		}
		buffer[32] = "";
 80018e6:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b69      	ldr	r3, [pc, #420]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",(float)(distance_avg/100.0)); //media + conversione in millimetri
 80018f0:	4b64      	ldr	r3, [pc, #400]	; (8001a84 <HAL_UART_RxCpltCallback+0x234>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe1d 	bl	8000534 <__aeabi_i2d>
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <HAL_UART_RxCpltCallback+0x244>)
 8001900:	f7fe ffac 	bl	800085c <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f974 	bl	8000bf8 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe20 	bl	8000558 <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	495e      	ldr	r1, [pc, #376]	; (8001a98 <HAL_UART_RxCpltCallback+0x248>)
 800191e:	485c      	ldr	r0, [pc, #368]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001920:	f003 ff92 	bl	8005848 <siprintf>
 8001924:	4603      	mov	r3, r0
 8001926:	4a5d      	ldr	r2, [pc, #372]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 8001928:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800192a:	4b5c      	ldr	r3, [pc, #368]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4957      	ldr	r1, [pc, #348]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001934:	485a      	ldr	r0, [pc, #360]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 8001936:	f002 fc2c 	bl	8004192 <HAL_UART_Transmit_IT>
		//HAL_TIM_Base_Stop_IT(&htim11);
		break;
 800193a:	e091      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 'b':
		buffer[32] = "";
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001942:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",open_loop_motor_position/10.0);
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_UART_RxCpltCallback+0x254>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fdf1 	bl	8000534 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b54      	ldr	r3, [pc, #336]	; (8001aa8 <HAL_UART_RxCpltCallback+0x258>)
 8001958:	f7fe ff80 	bl	800085c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	494d      	ldr	r1, [pc, #308]	; (8001a98 <HAL_UART_RxCpltCallback+0x248>)
 8001962:	484b      	ldr	r0, [pc, #300]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001964:	f003 ff70 	bl	8005848 <siprintf>
 8001968:	4603      	mov	r3, r0
 800196a:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 800196c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800196e:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	4946      	ldr	r1, [pc, #280]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001978:	4849      	ldr	r0, [pc, #292]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 800197a:	f002 fc0a 	bl	8004192 <HAL_UART_Transmit_IT>
		break;
 800197e:	e06f      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 'c':
		buffer[32] = "";
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001986:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%d\n",moving);
 800198a:	4b48      	ldr	r3, [pc, #288]	; (8001aac <HAL_UART_RxCpltCallback+0x25c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4947      	ldr	r1, [pc, #284]	; (8001ab0 <HAL_UART_RxCpltCallback+0x260>)
 8001992:	483f      	ldr	r0, [pc, #252]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001994:	f003 ff58 	bl	8005848 <siprintf>
 8001998:	4603      	mov	r3, r0
 800199a:	4a40      	ldr	r2, [pc, #256]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 800199c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800199e:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	493a      	ldr	r1, [pc, #232]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019a8:	483d      	ldr	r0, [pc, #244]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 80019aa:	f002 fbf2 	bl	8004192 <HAL_UART_Transmit_IT>
		break;
 80019ae:	e057      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 'd':
		buffer[32] = "";
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%d\n",magic_number);
 80019ba:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_UART_RxCpltCallback+0x264>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	493b      	ldr	r1, [pc, #236]	; (8001ab0 <HAL_UART_RxCpltCallback+0x260>)
 80019c2:	4833      	ldr	r0, [pc, #204]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019c4:	f003 ff40 	bl	8005848 <siprintf>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 80019cc:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	492e      	ldr	r1, [pc, #184]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019d8:	4831      	ldr	r0, [pc, #196]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 80019da:	f002 fbda 	bl	8004192 <HAL_UART_Transmit_IT>
		motor_moved = 0;
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_UART_RxCpltCallback+0x268>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
		break;
 80019e4:	e03c      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 't':
		startup_movement = 1;
 80019e6:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_UART_RxCpltCallback+0x26c>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
		break;
 80019ec:	e038      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 'g':
		buffer[32] = "";
 80019ee:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019f4:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",(float)(tare_counter*DMILLIM_USTEP_CONSTANT/10));
 80019f8:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_UART_RxCpltCallback+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd89 	bl	8000514 <__aeabi_ui2d>
 8001a02:	a31d      	add	r3, pc, #116	; (adr r3, 8001a78 <HAL_UART_RxCpltCallback+0x228>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdfe 	bl	8000608 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_UART_RxCpltCallback+0x258>)
 8001a1a:	f7fe ff1f 	bl	800085c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f8e7 	bl	8000bf8 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd93 	bl	8000558 <__aeabi_f2d>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4918      	ldr	r1, [pc, #96]	; (8001a98 <HAL_UART_RxCpltCallback+0x248>)
 8001a38:	4815      	ldr	r0, [pc, #84]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001a3a:	f003 ff05 	bl	8005848 <siprintf>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 8001a42:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4910      	ldr	r1, [pc, #64]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001a4e:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 8001a50:	f002 fb9f 	bl	8004192 <HAL_UART_Transmit_IT>
		break;
 8001a54:	e004      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	default:

		HAL_UART_Transmit_IT(&huart2, "unknown char\n",13);
 8001a56:	220d      	movs	r2, #13
 8001a58:	491a      	ldr	r1, [pc, #104]	; (8001ac4 <HAL_UART_RxCpltCallback+0x274>)
 8001a5a:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 8001a5c:	f002 fb99 	bl	8004192 <HAL_UART_Transmit_IT>


	}

	HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 8001a60:	2201      	movs	r2, #1
 8001a62:	4907      	ldr	r1, [pc, #28]	; (8001a80 <HAL_UART_RxCpltCallback+0x230>)
 8001a64:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 8001a66:	f002 fbd9 	bl	800421c <HAL_UART_Receive_IT>
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	f3af 8000 	nop.w
 8001a78:	4c327ffc 	.word	0x4c327ffc
 8001a7c:	3f89a8c1 	.word	0x3f89a8c1
 8001a80:	20000219 	.word	0x20000219
 8001a84:	2000021c 	.word	0x2000021c
 8001a88:	200001fc 	.word	0x200001fc
 8001a8c:	08007cb8 	.word	0x08007cb8
 8001a90:	20000220 	.word	0x20000220
 8001a94:	40590000 	.word	0x40590000
 8001a98:	08007cbc 	.word	0x08007cbc
 8001a9c:	20000240 	.word	0x20000240
 8001aa0:	20000334 	.word	0x20000334
 8001aa4:	2000020c 	.word	0x2000020c
 8001aa8:	40240000 	.word	0x40240000
 8001aac:	2000020a 	.word	0x2000020a
 8001ab0:	08007cc0 	.word	0x08007cc0
 8001ab4:	20000208 	.word	0x20000208
 8001ab8:	2000020f 	.word	0x2000020f
 8001abc:	20000211 	.word	0x20000211
 8001ac0:	20000214 	.word	0x20000214
 8001ac4:	08007cc4 	.word	0x08007cc4

08001ac8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11){
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d103      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001ada:	2120      	movs	r1, #32
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001ade:	f000 ff6a 	bl	80029b6 <HAL_GPIO_TogglePin>
	}

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40014800 	.word	0x40014800
 8001af0:	40020000 	.word	0x40020000

08001af4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == END_STOPmax_Pin){ // quando tocco l'endstop finale
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d115      	bne.n	8001b30 <HAL_GPIO_EXTI_Callback+0x3c>
		startup_movement = 0;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, "9\n",2);
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4911      	ldr	r1, [pc, #68]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b0e:	4812      	ldr	r0, [pc, #72]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b10:	f002 fb3f 	bl	8004192 <HAL_UART_Transmit_IT>
		if(!HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin)){
 8001b14:	2110      	movs	r1, #16
 8001b16:	4811      	ldr	r0, [pc, #68]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x68>)
 8001b18:	f000 ff1c 	bl	8002954 <HAL_GPIO_ReadPin>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_GPIO_EXTI_Callback+0x34>
		  		back_movement = 1;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
		  	}
		tare_counter = 0;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_GPIO_EXTI_Callback+0x70>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

	}else if(GPIO_Pin==END_STOPmin_Pin){ // quando tocco l'endstop minimo
		back_movement = 0;
		HAL_UART_Transmit_IT(&huart2, "0\n",2);
	}
}
 8001b2e:	e00a      	b.n	8001b46 <HAL_GPIO_EXTI_Callback+0x52>
	}else if(GPIO_Pin==END_STOPmin_Pin){ // quando tocco l'endstop minimo
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d107      	bne.n	8001b46 <HAL_GPIO_EXTI_Callback+0x52>
		back_movement = 0;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, "0\n",2);
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	490a      	ldr	r1, [pc, #40]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x74>)
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b42:	f002 fb26 	bl	8004192 <HAL_UART_Transmit_IT>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000211 	.word	0x20000211
 8001b54:	08007cd4 	.word	0x08007cd4
 8001b58:	20000334 	.word	0x20000334
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	20000218 	.word	0x20000218
 8001b64:	20000214 	.word	0x20000214
 8001b68:	08007cd8 	.word	0x08007cd8

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <Error_Handler+0x8>
	...

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001bb6:	2005      	movs	r0, #5
 8001bb8:	f000 fc74 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c14:	f000 fb32 	bl	800227c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c20:	2010      	movs	r0, #16
 8001c22:	f000 fee3 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c2e:	2020      	movs	r0, #32
 8001c30:	f000 fedc 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM3_IRQHandler+0x10>)
 8001c3e:	f001 fe0f 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002ec 	.word	0x200002ec

08001c4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <TIM4_IRQHandler+0x10>)
 8001c52:	f001 fe05 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002a4 	.word	0x200002a4

08001c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <USART2_IRQHandler+0x10>)
 8001c66:	f002 fb09 	bl	800427c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000334 	.word	0x20000334

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
	return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c8e:	f003 f93f 	bl	8004f10 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
	return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cb6:	e7fe      	b.n	8001cb6 <_exit+0x12>

08001cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00a      	b.n	8001ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cca:	f3af 8000 	nop.w
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	b2ca      	uxtb	r2, r1
 8001cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf0      	blt.n	8001cca <_read+0x12>
	}

return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e009      	b.n	8001d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf1      	blt.n	8001d04 <_write+0x12>
	}
	return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_close>:

int _close(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
	return -1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d52:	605a      	str	r2, [r3, #4]
	return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_isatty>:

int _isatty(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
	return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f003 f8a4 	bl	8004f10 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20018000 	.word	0x20018000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	20000244 	.word	0x20000244
 8001dfc:	20000390 	.word	0x20000390

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e40:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001e42:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001e44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8001e46:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001e48:	223b      	movs	r2, #59	; 0x3b
 8001e4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001e66:	4817      	ldr	r0, [pc, #92]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001e68:	f001 fb90 	bl	800358c <HAL_TIM_IC_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e72:	f7ff fe7b 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	480f      	ldr	r0, [pc, #60]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001e86:	f002 f8b5 	bl	8003ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e90:	f7ff fe6c 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e94:	2300      	movs	r3, #0
 8001e96:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <MX_TIM3_Init+0xa0>)
 8001eac:	f001 fde0 	bl	8003a70 <HAL_TIM_IC_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001eb6:	f7ff fe59 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200002ec 	.word	0x200002ec
 8001ec8:	40000400 	.word	0x40000400

08001ecc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001edc:	463b      	mov	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ee8:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001eea:	4a21      	ldr	r2, [pc, #132]	; (8001f70 <MX_TIM4_Init+0xa4>)
 8001eec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59999;
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001ef0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001ef4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001f10:	4816      	ldr	r0, [pc, #88]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001f12:	f001 fb3b 	bl	800358c <HAL_TIM_IC_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001f1c:	f7ff fe26 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480f      	ldr	r0, [pc, #60]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001f30:	f002 f860 	bl	8003ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001f3a:	f7ff fe17 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f42:	2301      	movs	r3, #1
 8001f44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_TIM4_Init+0xa0>)
 8001f56:	f001 fd8b 	bl	8003a70 <HAL_TIM_IC_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f60:	f7ff fe04 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200002a4 	.word	0x200002a4
 8001f70:	40000800 	.word	0x40000800

08001f74 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	; 0x30
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a3a      	ldr	r2, [pc, #232]	; (800207c <HAL_TIM_IC_MspInit+0x108>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d134      	bne.n	8002000 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a38      	ldr	r2, [pc, #224]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a31      	ldr	r2, [pc, #196]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HCSR_ECHO_Pin;
 8001fce:	2340      	movs	r3, #64	; 0x40
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HCSR_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4826      	ldr	r0, [pc, #152]	; (8002084 <HAL_TIM_IC_MspInit+0x110>)
 8001fea:	f000 fb2f 	bl	800264c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	201d      	movs	r0, #29
 8001ff4:	f000 fa61 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ff8:	201d      	movs	r0, #29
 8001ffa:	f000 fa7a 	bl	80024f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ffe:	e038      	b.n	8002072 <HAL_TIM_IC_MspInit+0xfe>
  else if(tim_icHandle->Instance==TIM4)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a20      	ldr	r2, [pc, #128]	; (8002088 <HAL_TIM_IC_MspInit+0x114>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d133      	bne.n	8002072 <HAL_TIM_IC_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_TIM_IC_MspInit+0x10c>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PLC_PulsePort_Pin;
 8002042:	2340      	movs	r3, #64	; 0x40
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002052:	2302      	movs	r3, #2
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PLC_PulsePort_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	4619      	mov	r1, r3
 800205c:	480b      	ldr	r0, [pc, #44]	; (800208c <HAL_TIM_IC_MspInit+0x118>)
 800205e:	f000 faf5 	bl	800264c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	201e      	movs	r0, #30
 8002068:	f000 fa27 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800206c:	201e      	movs	r0, #30
 800206e:	f000 fa40 	bl	80024f2 <HAL_NVIC_EnableIRQ>
}
 8002072:	bf00      	nop
 8002074:	3730      	adds	r7, #48	; 0x30
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40000400 	.word	0x40000400
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000
 8002088:	40000800 	.word	0x40000800
 800208c:	40020400 	.word	0x40020400

08002090 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <MX_USART2_UART_Init+0x50>)
 8002098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 800209c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 80020b6:	220c      	movs	r2, #12
 80020b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_USART2_UART_Init+0x4c>)
 80020c8:	f002 f816 	bl	80040f8 <HAL_UART_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020d2:	f7ff fd4b 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000334 	.word	0x20000334
 80020e0:	40004400 	.word	0x40004400

080020e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_UART_MspInit+0x94>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d133      	bne.n	800216e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_UART_MspInit+0x98>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_UART_MspInit+0x98>)
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_UART_MspInit+0x98>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_UART_MspInit+0x98>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_UART_MspInit+0x98>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_UART_MspInit+0x98>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800213e:	230c      	movs	r3, #12
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214e:	2307      	movs	r3, #7
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <HAL_UART_MspInit+0x9c>)
 800215a:	f000 fa77 	bl	800264c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 800215e:	2201      	movs	r2, #1
 8002160:	2101      	movs	r1, #1
 8002162:	2026      	movs	r0, #38	; 0x26
 8002164:	f000 f9a9 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002168:	2026      	movs	r0, #38	; 0x26
 800216a:	f000 f9c2 	bl	80024f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	; 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40004400 	.word	0x40004400
 800217c:	40023800 	.word	0x40023800
 8002180:	40020000 	.word	0x40020000

08002184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800218a:	490e      	ldr	r1, [pc, #56]	; (80021c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a0:	4c0b      	ldr	r4, [pc, #44]	; (80021d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ae:	f7ff fe27 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021b2:	f002 feb3 	bl	8004f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b6:	f7ff fa55 	bl	8001664 <main>
  bx  lr    
 80021ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021c8:	080080e4 	.word	0x080080e4
  ldr r2, =_sbss
 80021cc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021d0:	2000038c 	.word	0x2000038c

080021d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC_IRQHandler>
	...

080021d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <HAL_Init+0x40>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <HAL_Init+0x40>)
 80021ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a07      	ldr	r2, [pc, #28]	; (8002218 <HAL_Init+0x40>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002200:	2003      	movs	r0, #3
 8002202:	f000 f94f 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002206:	2000      	movs	r0, #0
 8002208:	f000 f808 	bl	800221c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800220c:	f7ff fcb4 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00

0800221c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x54>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_InitTick+0x58>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002232:	fbb3 f3f1 	udiv	r3, r3, r1
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f967 	bl	800250e <HAL_SYSTICK_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e00e      	b.n	8002268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d80a      	bhi.n	8002266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f000 f92f 	bl	80024ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800225c:	4a06      	ldr	r2, [pc, #24]	; (8002278 <HAL_InitTick+0x5c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000000 	.word	0x20000000
 8002274:	20000008 	.word	0x20000008
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000378 	.word	0x20000378

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000378 	.word	0x20000378

080022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff ffee 	bl	80022a4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d005      	beq.n	80022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_Delay+0x44>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022e2:	bf00      	nop
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d8f7      	bhi.n	80022e4 <HAL_Delay+0x28>
  {
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000008 	.word	0x20000008

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800232c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4907      	ldr	r1, [pc, #28]	; (80023a0 <__NVIC_EnableIRQ+0x38>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	; (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	; (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002470:	d301      	bcc.n	8002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <SysTick_Config+0x40>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247e:	210f      	movs	r1, #15
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7ff ff8e 	bl	80023a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <SysTick_Config+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <SysTick_Config+0x40>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff29 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024cc:	f7ff ff3e 	bl	800234c <__NVIC_GetPriorityGrouping>
 80024d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff8e 	bl	80023f8 <NVIC_EncodePriority>
 80024dc:	4602      	mov	r2, r0
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff5d 	bl	80023a4 <__NVIC_SetPriority>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff31 	bl	8002368 <__NVIC_EnableIRQ>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffa2 	bl	8002460 <SysTick_Config>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff feb6 	bl	80022a4 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d008      	beq.n	8002558 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e052      	b.n	80025fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0216 	bic.w	r2, r2, #22
 8002566:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002576:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d103      	bne.n	8002588 <HAL_DMA_Abort+0x62>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0208 	bic.w	r2, r2, #8
 8002596:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a8:	e013      	b.n	80025d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025aa:	f7ff fe7b 	bl	80022a4 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d90c      	bls.n	80025d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2203      	movs	r2, #3
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e015      	b.n	80025fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e4      	bne.n	80025aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	223f      	movs	r2, #63	; 0x3f
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d004      	beq.n	8002624 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e00c      	b.n	800263e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2205      	movs	r2, #5
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e159      	b.n	800291c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8148 	bne.w	8002916 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d005      	beq.n	800269e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269a:	2b02      	cmp	r3, #2
 800269c:	d130      	bne.n	8002700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d4:	2201      	movs	r2, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 0201 	and.w	r2, r3, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d017      	beq.n	800273c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d123      	bne.n	8002790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a2 	beq.w	8002916 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b57      	ldr	r3, [pc, #348]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b54      	ldr	r3, [pc, #336]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ee:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_GPIO_Init+0x2ec>)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a49      	ldr	r2, [pc, #292]	; (800293c <HAL_GPIO_Init+0x2f0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d019      	beq.n	800284e <HAL_GPIO_Init+0x202>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a48      	ldr	r2, [pc, #288]	; (8002940 <HAL_GPIO_Init+0x2f4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0x1fe>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a47      	ldr	r2, [pc, #284]	; (8002944 <HAL_GPIO_Init+0x2f8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_Init+0x1fa>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a46      	ldr	r2, [pc, #280]	; (8002948 <HAL_GPIO_Init+0x2fc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x1f6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a45      	ldr	r2, [pc, #276]	; (800294c <HAL_GPIO_Init+0x300>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_Init+0x1f2>
 800283a:	2304      	movs	r3, #4
 800283c:	e008      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800283e:	2307      	movs	r3, #7
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x204>
 8002842:	2303      	movs	r3, #3
 8002844:	e004      	b.n	8002850 <HAL_GPIO_Init+0x204>
 8002846:	2302      	movs	r3, #2
 8002848:	e002      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800284e:	2300      	movs	r3, #0
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f002 0203 	and.w	r2, r2, #3
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	4093      	lsls	r3, r2
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002860:	4935      	ldr	r1, [pc, #212]	; (8002938 <HAL_GPIO_Init+0x2ec>)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002892:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_GPIO_Init+0x304>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028bc:	4a24      	ldr	r2, [pc, #144]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002910:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b0f      	cmp	r3, #15
 8002920:	f67f aea2 	bls.w	8002668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40013800 	.word	0x40013800
 800293c:	40020000 	.word	0x40020000
 8002940:	40020400 	.word	0x40020400
 8002944:	40020800 	.word	0x40020800
 8002948:	40020c00 	.word	0x40020c00
 800294c:	40021000 	.word	0x40021000
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	e001      	b.n	8002976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a0:	e003      	b.n	80029aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	041a      	lsls	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029c8:	887a      	ldrh	r2, [r7, #2]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4013      	ands	r3, r2
 80029ce:	041a      	lsls	r2, r3, #16
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	400b      	ands	r3, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f872 	bl	8001af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e12b      	b.n	8002c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fba8 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a80:	f000 fd5c 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8002a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a81      	ldr	r2, [pc, #516]	; (8002c90 <HAL_I2C_Init+0x274>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d807      	bhi.n	8002aa0 <HAL_I2C_Init+0x84>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a80      	ldr	r2, [pc, #512]	; (8002c94 <HAL_I2C_Init+0x278>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	bf94      	ite	ls
 8002a98:	2301      	movls	r3, #1
 8002a9a:	2300      	movhi	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e006      	b.n	8002aae <HAL_I2C_Init+0x92>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a7d      	ldr	r2, [pc, #500]	; (8002c98 <HAL_I2C_Init+0x27c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	bf94      	ite	ls
 8002aa8:	2301      	movls	r3, #1
 8002aaa:	2300      	movhi	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0e7      	b.n	8002c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4a78      	ldr	r2, [pc, #480]	; (8002c9c <HAL_I2C_Init+0x280>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a6a      	ldr	r2, [pc, #424]	; (8002c90 <HAL_I2C_Init+0x274>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d802      	bhi.n	8002af0 <HAL_I2C_Init+0xd4>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	e009      	b.n	8002b04 <HAL_I2C_Init+0xe8>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4a69      	ldr	r2, [pc, #420]	; (8002ca0 <HAL_I2C_Init+0x284>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	3301      	adds	r3, #1
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	495c      	ldr	r1, [pc, #368]	; (8002c90 <HAL_I2C_Init+0x274>)
 8002b20:	428b      	cmp	r3, r1
 8002b22:	d819      	bhi.n	8002b58 <HAL_I2C_Init+0x13c>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e59      	subs	r1, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b32:	1c59      	adds	r1, r3, #1
 8002b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b38:	400b      	ands	r3, r1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_I2C_Init+0x138>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e59      	subs	r1, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	e051      	b.n	8002bf8 <HAL_I2C_Init+0x1dc>
 8002b54:	2304      	movs	r3, #4
 8002b56:	e04f      	b.n	8002bf8 <HAL_I2C_Init+0x1dc>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d111      	bne.n	8002b84 <HAL_I2C_Init+0x168>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1e58      	subs	r0, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e012      	b.n	8002baa <HAL_I2C_Init+0x18e>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e58      	subs	r0, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	0099      	lsls	r1, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Init+0x196>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e022      	b.n	8002bf8 <HAL_I2C_Init+0x1dc>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_I2C_Init+0x1bc>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1e58      	subs	r0, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	440b      	add	r3, r1
 8002bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	e00f      	b.n	8002bf8 <HAL_I2C_Init+0x1dc>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e58      	subs	r0, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	0099      	lsls	r1, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	6809      	ldr	r1, [r1, #0]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6911      	ldr	r1, [r2, #16]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	4311      	orrs	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	000186a0 	.word	0x000186a0
 8002c94:	001e847f 	.word	0x001e847f
 8002c98:	003d08ff 	.word	0x003d08ff
 8002c9c:	431bde83 	.word	0x431bde83
 8002ca0:	10624dd3 	.word	0x10624dd3

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e264      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d075      	beq.n	8002dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc2:	4ba3      	ldr	r3, [pc, #652]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4ba0      	ldr	r3, [pc, #640]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d112      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b9d      	ldr	r3, [pc, #628]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b99      	ldr	r3, [pc, #612]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05b      	beq.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d157      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e23f      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b91      	ldr	r3, [pc, #580]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a90      	ldr	r2, [pc, #576]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b8b      	ldr	r3, [pc, #556]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a8a      	ldr	r2, [pc, #552]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a87      	ldr	r2, [pc, #540]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	4b84      	ldr	r3, [pc, #528]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a83      	ldr	r2, [pc, #524]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a80      	ldr	r2, [pc, #512]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7ff faa2 	bl	80022a4 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7ff fa9e 	bl	80022a4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e204      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xc0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff fa8e 	bl	80022a4 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7ff fa8a 	bl	80022a4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1f0      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0xe8>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1c4      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4952      	ldr	r1, [pc, #328]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b4f      	ldr	r3, [pc, #316]	; (8002f54 <HAL_RCC_OscConfig+0x2b0>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7ff fa43 	bl	80022a4 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e22:	f7ff fa3f 	bl	80022a4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1a5      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4940      	ldr	r1, [pc, #256]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_OscConfig+0x2b0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7ff fa22 	bl	80022a4 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7ff fa1e 	bl	80022a4 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e184      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d030      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7ff fa02 	bl	80022a4 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7ff f9fe 	bl	80022a4 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e164      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x200>
 8002ec2:	e015      	b.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7ff f9eb 	bl	80022a4 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7ff f9e7 	bl	80022a4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e14d      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a0 	beq.w	800303e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7ff f9ad 	bl	80022a4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e011      	b.n	8002f72 <HAL_RCC_OscConfig+0x2ce>
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470000 	.word	0x42470000
 8002f58:	42470e80 	.word	0x42470e80
 8002f5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7ff f9a0 	bl	80022a4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e106      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b85      	ldr	r3, [pc, #532]	; (8003188 <HAL_RCC_OscConfig+0x4e4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
 8002f86:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	e01c      	b.n	8002fce <HAL_RCC_OscConfig+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x312>
 8002f9c:	4b7b      	ldr	r3, [pc, #492]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a7a      	ldr	r2, [pc, #488]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa8:	4b78      	ldr	r3, [pc, #480]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a77      	ldr	r2, [pc, #476]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	e00b      	b.n	8002fce <HAL_RCC_OscConfig+0x32a>
 8002fb6:	4b75      	ldr	r3, [pc, #468]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a74      	ldr	r2, [pc, #464]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	4b72      	ldr	r3, [pc, #456]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a71      	ldr	r2, [pc, #452]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d015      	beq.n	8003002 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7ff f965 	bl	80022a4 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7ff f961 	bl	80022a4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0c5      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ee      	beq.n	8002fde <HAL_RCC_OscConfig+0x33a>
 8003000:	e014      	b.n	800302c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7ff f94f 	bl	80022a4 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7ff f94b 	bl	80022a4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0af      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	4b5a      	ldr	r3, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ee      	bne.n	800300a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a55      	ldr	r2, [pc, #340]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 809b 	beq.w	800317e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003048:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d05c      	beq.n	800310e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d141      	bne.n	80030e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305c:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7ff f91f 	bl	80022a4 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7ff f91b 	bl	80022a4 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e081      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307c:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	019b      	lsls	r3, r3, #6
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	4937      	ldr	r1, [pc, #220]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b2:	4b37      	ldr	r3, [pc, #220]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7ff f8f4 	bl	80022a4 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c0:	f7ff f8f0 	bl	80022a4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e056      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x41c>
 80030de:	e04e      	b.n	800317e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7ff f8dd 	bl	80022a4 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7ff f8d9 	bl	80022a4 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e03f      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003100:	4b22      	ldr	r3, [pc, #136]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x44a>
 800310c:	e037      	b.n	800317e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e032      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d028      	beq.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d121      	bne.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d11a      	bne.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800314a:	4013      	ands	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003150:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003152:	4293      	cmp	r3, r2
 8003154:	d111      	bne.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d107      	bne.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40007000 	.word	0x40007000
 800318c:	40023800 	.word	0x40023800
 8003190:	42470060 	.word	0x42470060

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cc      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b68      	ldr	r3, [pc, #416]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90c      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b65      	ldr	r3, [pc, #404]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d044      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e067      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4934      	ldr	r1, [pc, #208]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7ff f80e 	bl	80022a4 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7ff f80a 	bl	80022a4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20c      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ff6e 	bl	800221c <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	08007cdc 	.word	0x08007cdc
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	2300      	movs	r3, #0
 8003372:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80bd 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x1a4>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e0b7      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003396:	60bb      	str	r3, [r7, #8]
       break;
 8003398:	e0b7      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b61      	ldr	r3, [pc, #388]	; (8003520 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800339c:	60bb      	str	r3, [r7, #8]
      break;
 800339e:	e0b4      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04d      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b58      	ldr	r3, [pc, #352]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	461a      	mov	r2, r3
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	ea02 0800 	and.w	r8, r2, r0
 80033ce:	ea03 0901 	and.w	r9, r3, r1
 80033d2:	4640      	mov	r0, r8
 80033d4:	4649      	mov	r1, r9
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	014b      	lsls	r3, r1, #5
 80033e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033e4:	0142      	lsls	r2, r0, #5
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	ebb0 0008 	subs.w	r0, r0, r8
 80033ee:	eb61 0109 	sbc.w	r1, r1, r9
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	018b      	lsls	r3, r1, #6
 80033fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003400:	0182      	lsls	r2, r0, #6
 8003402:	1a12      	subs	r2, r2, r0
 8003404:	eb63 0301 	sbc.w	r3, r3, r1
 8003408:	f04f 0000 	mov.w	r0, #0
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	00d9      	lsls	r1, r3, #3
 8003412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003416:	00d0      	lsls	r0, r2, #3
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	eb12 0208 	adds.w	r2, r2, r8
 8003420:	eb43 0309 	adc.w	r3, r3, r9
 8003424:	f04f 0000 	mov.w	r0, #0
 8003428:	f04f 0100 	mov.w	r1, #0
 800342c:	0259      	lsls	r1, r3, #9
 800342e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003432:	0250      	lsls	r0, r2, #9
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	461a      	mov	r2, r3
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	f7fd fc28 	bl	8000c98 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4613      	mov	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e04a      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	461a      	mov	r2, r3
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	ea02 0400 	and.w	r4, r2, r0
 800346a:	ea03 0501 	and.w	r5, r3, r1
 800346e:	4620      	mov	r0, r4
 8003470:	4629      	mov	r1, r5
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	014b      	lsls	r3, r1, #5
 800347c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003480:	0142      	lsls	r2, r0, #5
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	1b00      	subs	r0, r0, r4
 8003488:	eb61 0105 	sbc.w	r1, r1, r5
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	018b      	lsls	r3, r1, #6
 8003496:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800349a:	0182      	lsls	r2, r0, #6
 800349c:	1a12      	subs	r2, r2, r0
 800349e:	eb63 0301 	sbc.w	r3, r3, r1
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	00d9      	lsls	r1, r3, #3
 80034ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034b0:	00d0      	lsls	r0, r2, #3
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	1912      	adds	r2, r2, r4
 80034b8:	eb45 0303 	adc.w	r3, r5, r3
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	0299      	lsls	r1, r3, #10
 80034c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034ca:	0290      	lsls	r0, r2, #10
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	f7fd fbdc 	bl	8000c98 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	3301      	adds	r3, #1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	60bb      	str	r3, [r7, #8]
      break;
 8003502:	e002      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003506:	60bb      	str	r3, [r7, #8]
      break;
 8003508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350a:	68bb      	ldr	r3, [r7, #8]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	00f42400 	.word	0x00f42400
 8003520:	007a1200 	.word	0x007a1200

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000000 	.word	0x20000000

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003540:	f7ff fff0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0a9b      	lsrs	r3, r3, #10
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	08007cec 	.word	0x08007cec

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003568:	f7ff ffdc 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0b5b      	lsrs	r3, r3, #13
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800
 8003588:	08007cec 	.word	0x08007cec

0800358c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fe fcde 	bl	8001f74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fb4e 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_TIM_IC_Start_IT+0x1e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e013      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x46>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d104      	bne.n	800365a <HAL_TIM_IC_Start_IT+0x2e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e00b      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x46>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d104      	bne.n	800366a <HAL_TIM_IC_Start_IT+0x3e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	b2db      	uxtb	r3, r3
 8003668:	e003      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x46>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_TIM_IC_Start_IT+0x58>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e013      	b.n	80036ac <HAL_TIM_IC_Start_IT+0x80>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d104      	bne.n	8003694 <HAL_TIM_IC_Start_IT+0x68>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e00b      	b.n	80036ac <HAL_TIM_IC_Start_IT+0x80>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b08      	cmp	r3, #8
 8003698:	d104      	bne.n	80036a4 <HAL_TIM_IC_Start_IT+0x78>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e003      	b.n	80036ac <HAL_TIM_IC_Start_IT+0x80>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ae:	7bbb      	ldrb	r3, [r7, #14]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d102      	bne.n	80036ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036b4:	7b7b      	ldrb	r3, [r7, #13]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d001      	beq.n	80036be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0c2      	b.n	8003844 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_IC_Start_IT+0xa2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036cc:	e013      	b.n	80036f6 <HAL_TIM_IC_Start_IT+0xca>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d104      	bne.n	80036de <HAL_TIM_IC_Start_IT+0xb2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	e00b      	b.n	80036f6 <HAL_TIM_IC_Start_IT+0xca>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_IC_Start_IT+0xc2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ec:	e003      	b.n	80036f6 <HAL_TIM_IC_Start_IT+0xca>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_IC_Start_IT+0xda>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003704:	e013      	b.n	800372e <HAL_TIM_IC_Start_IT+0x102>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d104      	bne.n	8003716 <HAL_TIM_IC_Start_IT+0xea>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003714:	e00b      	b.n	800372e <HAL_TIM_IC_Start_IT+0x102>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d104      	bne.n	8003726 <HAL_TIM_IC_Start_IT+0xfa>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003724:	e003      	b.n	800372e <HAL_TIM_IC_Start_IT+0x102>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d841      	bhi.n	80037b8 <HAL_TIM_IC_Start_IT+0x18c>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <HAL_TIM_IC_Start_IT+0x110>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003771 	.word	0x08003771
 8003740:	080037b9 	.word	0x080037b9
 8003744:	080037b9 	.word	0x080037b9
 8003748:	080037b9 	.word	0x080037b9
 800374c:	08003783 	.word	0x08003783
 8003750:	080037b9 	.word	0x080037b9
 8003754:	080037b9 	.word	0x080037b9
 8003758:	080037b9 	.word	0x080037b9
 800375c:	08003795 	.word	0x08003795
 8003760:	080037b9 	.word	0x080037b9
 8003764:	080037b9 	.word	0x080037b9
 8003768:	080037b9 	.word	0x080037b9
 800376c:	080037a7 	.word	0x080037a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0202 	orr.w	r2, r2, #2
 800377e:	60da      	str	r2, [r3, #12]
      break;
 8003780:	e01d      	b.n	80037be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0204 	orr.w	r2, r2, #4
 8003790:	60da      	str	r2, [r3, #12]
      break;
 8003792:	e014      	b.n	80037be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0208 	orr.w	r2, r2, #8
 80037a2:	60da      	str	r2, [r3, #12]
      break;
 80037a4:	e00b      	b.n	80037be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0210 	orr.w	r2, r2, #16
 80037b4:	60da      	str	r2, [r3, #12]
      break;
 80037b6:	e002      	b.n	80037be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      break;
 80037bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d13e      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2201      	movs	r2, #1
 80037ca:	6839      	ldr	r1, [r7, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fbeb 	bl	8003fa8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_TIM_IC_Start_IT+0x220>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d013      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a19      	ldr	r2, [pc, #100]	; (8003850 <HAL_TIM_IC_Start_IT+0x224>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_TIM_IC_Start_IT+0x228>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_TIM_IC_Start_IT+0x22c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIM_IC_Start_IT+0x1e2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <HAL_TIM_IC_Start_IT+0x230>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d111      	bne.n	8003832 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b06      	cmp	r3, #6
 800381e:	d010      	beq.n	8003842 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	e007      	b.n	8003842 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40014000 	.word	0x40014000

08003860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b02      	cmp	r3, #2
 8003874:	d122      	bne.n	80038bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b02      	cmp	r3, #2
 8003882:	d11b      	bne.n	80038bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0202 	mvn.w	r2, #2
 800388c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fcda 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f9c0 	bl	8003c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f9c7 	bl	8003c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d122      	bne.n	8003910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d11b      	bne.n	8003910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0204 	mvn.w	r2, #4
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd fcb0 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f996 	bl	8003c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f99d 	bl	8003c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b08      	cmp	r3, #8
 800391c:	d122      	bne.n	8003964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0208 	mvn.w	r2, #8
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2204      	movs	r2, #4
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fc86 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f96c 	bl	8003c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f973 	bl	8003c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b10      	cmp	r3, #16
 8003970:	d122      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d11b      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0210 	mvn.w	r2, #16
 8003988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2208      	movs	r2, #8
 800398e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fc5c 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 80039a4:	e005      	b.n	80039b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f942 	bl	8003c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f949 	bl	8003c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0201 	mvn.w	r2, #1
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe f872 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b80      	cmp	r3, #128	; 0x80
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fb6a 	bl	80040e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d10e      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f90e 	bl	8003c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d10e      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d107      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0220 	mvn.w	r2, #32
 8003a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fb34 	bl	80040d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e088      	b.n	8003ba0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f000 f95e 	bl	8003d6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020c 	bic.w	r2, r2, #12
 8003abe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	e060      	b.n	8003b96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d11c      	bne.n	8003b14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f000 f9a7 	bl	8003e3c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003afc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6999      	ldr	r1, [r3, #24]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	021a      	lsls	r2, r3, #8
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]
 8003b12:	e040      	b.n	8003b96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11b      	bne.n	8003b52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f000 f9c4 	bl	8003eb6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 020c 	bic.w	r2, r2, #12
 8003b3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	61da      	str	r2, [r3, #28]
 8003b50:	e021      	b.n	8003b96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d11c      	bne.n	8003b92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f000 f9e1 	bl	8003f2e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69d9      	ldr	r1, [r3, #28]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]
 8003b90:	e001      	b.n	8003b96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d831      	bhi.n	8003c20 <HAL_TIM_ReadCapturedValue+0x78>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c21 	.word	0x08003c21
 8003bcc:	08003c21 	.word	0x08003c21
 8003bd0:	08003c21 	.word	0x08003c21
 8003bd4:	08003c03 	.word	0x08003c03
 8003bd8:	08003c21 	.word	0x08003c21
 8003bdc:	08003c21 	.word	0x08003c21
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c0d 	.word	0x08003c0d
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c21 	.word	0x08003c21
 8003bf4:	08003c17 	.word	0x08003c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	60fb      	str	r3, [r7, #12]

      break;
 8003c00:	e00f      	b.n	8003c22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	60fb      	str	r3, [r7, #12]

      break;
 8003c0a:	e00a      	b.n	8003c22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	60fb      	str	r3, [r7, #12]

      break;
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	60fb      	str	r3, [r7, #12]

      break;
 8003c1e:	e000      	b.n	8003c22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c20:	bf00      	nop
  }

  return tmpreg;
 8003c22:	68fb      	ldr	r3, [r7, #12]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a34      	ldr	r2, [pc, #208]	; (8003d50 <TIM_Base_SetConfig+0xe4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00f      	beq.n	8003ca4 <TIM_Base_SetConfig+0x38>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8a:	d00b      	beq.n	8003ca4 <TIM_Base_SetConfig+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a31      	ldr	r2, [pc, #196]	; (8003d54 <TIM_Base_SetConfig+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d007      	beq.n	8003ca4 <TIM_Base_SetConfig+0x38>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a30      	ldr	r2, [pc, #192]	; (8003d58 <TIM_Base_SetConfig+0xec>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <TIM_Base_SetConfig+0x38>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <TIM_Base_SetConfig+0xf0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d108      	bne.n	8003cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <TIM_Base_SetConfig+0xe4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01b      	beq.n	8003cf6 <TIM_Base_SetConfig+0x8a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d017      	beq.n	8003cf6 <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <TIM_Base_SetConfig+0xe8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a21      	ldr	r2, [pc, #132]	; (8003d58 <TIM_Base_SetConfig+0xec>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00f      	beq.n	8003cf6 <TIM_Base_SetConfig+0x8a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <TIM_Base_SetConfig+0xf0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_Base_SetConfig+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <TIM_Base_SetConfig+0xf4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <TIM_Base_SetConfig+0x8a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <TIM_Base_SetConfig+0xf8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_Base_SetConfig+0x8a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <TIM_Base_SetConfig+0xfc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <TIM_Base_SetConfig+0xe4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0201 	bic.w	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <TIM_TI1_SetConfig+0xbc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <TIM_TI1_SetConfig+0x56>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d00f      	beq.n	8003dc2 <TIM_TI1_SetConfig+0x56>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <TIM_TI1_SetConfig+0xc0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_TI1_SetConfig+0x56>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <TIM_TI1_SetConfig+0xc4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_TI1_SetConfig+0x56>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <TIM_TI1_SetConfig+0xc8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_TI1_SetConfig+0x56>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <TIM_TI1_SetConfig+0xcc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <TIM_TI1_SetConfig+0x5a>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <TIM_TI1_SetConfig+0x5c>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e003      	b.n	8003de6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f023 030a 	bic.w	r3, r3, #10
 8003e00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f003 030a 	and.w	r3, r3, #10
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40014000 	.word	0x40014000

08003e3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0210 	bic.w	r2, r3, #16
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	031b      	lsls	r3, r3, #12
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b087      	sub	sp, #28
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003f06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b087      	sub	sp, #28
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	031b      	lsls	r3, r3, #12
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	031b      	lsls	r3, r3, #12
 8003f86:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	2201      	movs	r2, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	401a      	ands	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004008:	2302      	movs	r3, #2
 800400a:	e050      	b.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d013      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a16      	ldr	r2, [pc, #88]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a13      	ldr	r2, [pc, #76]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10c      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004088:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4313      	orrs	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40014000 	.word	0x40014000

080040d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e03f      	b.n	800418a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd ffe0 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800413a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fd1f 	bl	8004b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d130      	bne.n	800420e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Transmit_IT+0x26>
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e029      	b.n	8004210 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Transmit_IT+0x38>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e022      	b.n	8004210 <HAL_UART_Transmit_IT+0x7e>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2221      	movs	r2, #33	; 0x21
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004208:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b20      	cmp	r3, #32
 8004234:	d11d      	bne.n	8004272 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_UART_Receive_IT+0x26>
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e016      	b.n	8004274 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_UART_Receive_IT+0x38>
 8004250:	2302      	movs	r3, #2
 8004252:	e00f      	b.n	8004274 <HAL_UART_Receive_IT+0x58>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	461a      	mov	r2, r3
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fab5 	bl	80047d8 <UART_Start_Receive_IT>
 800426e:	4603      	mov	r3, r0
 8004270:	e000      	b.n	8004274 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004272:	2302      	movs	r3, #2
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b0ba      	sub	sp, #232	; 0xe8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <HAL_UART_IRQHandler+0x66>
 80042ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fb95 	bl	8004a0a <UART_Receive_IT>
      return;
 80042e0:	e256      	b.n	8004790 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80de 	beq.w	80044a8 <HAL_UART_IRQHandler+0x22c>
 80042ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d106      	bne.n	8004306 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80d1 	beq.w	80044a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_UART_IRQHandler+0xae>
 8004312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f043 0201 	orr.w	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800432a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_UART_IRQHandler+0xd2>
 8004336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f043 0202 	orr.w	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_UART_IRQHandler+0xf6>
 800435a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d011      	beq.n	80043a2 <HAL_UART_IRQHandler+0x126>
 800437e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800438a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f043 0208 	orr.w	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 81ed 	beq.w	8004786 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0x14e>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fb20 	bl	8004a0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <HAL_UART_IRQHandler+0x17a>
 80043ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d04f      	beq.n	8004496 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa28 	bl	800484c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d141      	bne.n	800448e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3314      	adds	r3, #20
 8004432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004436:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800443a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800444e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1d9      	bne.n	800440a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	2b00      	cmp	r3, #0
 800445c:	d013      	beq.n	8004486 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	4a7d      	ldr	r2, [pc, #500]	; (8004658 <HAL_UART_IRQHandler+0x3dc>)
 8004464:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe f8cb 	bl	8002606 <HAL_DMA_Abort_IT>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004480:	4610      	mov	r0, r2
 8004482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	e00e      	b.n	80044a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f990 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	e00a      	b.n	80044a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f98c 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	e006      	b.n	80044a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f988 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044a2:	e170      	b.n	8004786 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	bf00      	nop
    return;
 80044a6:	e16e      	b.n	8004786 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	f040 814a 	bne.w	8004746 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8143 	beq.w	8004746 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 813c 	beq.w	8004746 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	f040 80b4 	bne.w	800465c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004500:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8140 	beq.w	800478a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800450e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004512:	429a      	cmp	r2, r3
 8004514:	f080 8139 	bcs.w	800478a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800451e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452a:	f000 8088 	beq.w	800463e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800455a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800455e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004566:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1d9      	bne.n	800452e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3314      	adds	r3, #20
 8004580:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800458a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800459e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e1      	bne.n	800457a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3314      	adds	r3, #20
 80045bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3314      	adds	r3, #20
 80045d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e3      	bne.n	80045b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800460c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004620:	65ba      	str	r2, [r7, #88]	; 0x58
 8004622:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004626:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800462e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e3      	bne.n	80045fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	4618      	mov	r0, r3
 800463a:	f7fd ff74 	bl	8002526 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004646:	b29b      	uxth	r3, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	b29b      	uxth	r3, r3
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8b6 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004654:	e099      	b.n	800478a <HAL_UART_IRQHandler+0x50e>
 8004656:	bf00      	nop
 8004658:	08004913 	.word	0x08004913
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004664:	b29b      	uxth	r3, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 808b 	beq.w	800478e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8086 	beq.w	800478e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046a6:	647a      	str	r2, [r7, #68]	; 0x44
 80046a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e3      	bne.n	8004682 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3314      	adds	r3, #20
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	623b      	str	r3, [r7, #32]
   return(result);
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3314      	adds	r3, #20
 80046da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046de:	633a      	str	r2, [r7, #48]	; 0x30
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e3      	bne.n	80046ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0310 	bic.w	r3, r3, #16
 8004716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004724:	61fa      	str	r2, [r7, #28]
 8004726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	69b9      	ldr	r1, [r7, #24]
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	617b      	str	r3, [r7, #20]
   return(result);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e3      	bne.n	8004700 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f83e 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004744:	e023      	b.n	800478e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_UART_IRQHandler+0x4ea>
 8004752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8eb 	bl	800493a <UART_Transmit_IT>
    return;
 8004764:	e014      	b.n	8004790 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <HAL_UART_IRQHandler+0x514>
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f92b 	bl	80049da <UART_EndTransmit_IT>
    return;
 8004784:	e004      	b.n	8004790 <HAL_UART_IRQHandler+0x514>
    return;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <HAL_UART_IRQHandler+0x514>
      return;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <HAL_UART_IRQHandler+0x514>
      return;
 800478e:	bf00      	nop
  }
}
 8004790:	37e8      	adds	r7, #232	; 0xe8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop

08004798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2222      	movs	r2, #34	; 0x22
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800481c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0220 	orr.w	r2, r2, #32
 800483c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b095      	sub	sp, #84	; 0x54
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800486a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004874:	643a      	str	r2, [r7, #64]	; 0x40
 8004876:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800487a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e5      	bne.n	8004854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3314      	adds	r3, #20
 800488e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	61fb      	str	r3, [r7, #28]
   return(result);
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3314      	adds	r3, #20
 80048a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e5      	bne.n	8004888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d119      	bne.n	80048f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f023 0310 	bic.w	r3, r3, #16
 80048da:	647b      	str	r3, [r7, #68]	; 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e4:	61ba      	str	r2, [r7, #24]
 80048e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6979      	ldr	r1, [r7, #20]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	613b      	str	r3, [r7, #16]
   return(result);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004906:	bf00      	nop
 8004908:	3754      	adds	r7, #84	; 0x54
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7ff ff3d 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b21      	cmp	r3, #33	; 0x21
 800494c:	d13e      	bne.n	80049cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d114      	bne.n	8004982 <UART_Transmit_IT+0x48>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d110      	bne.n	8004982 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004974:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	1c9a      	adds	r2, r3, #2
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	621a      	str	r2, [r3, #32]
 8004980:	e008      	b.n	8004994 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6211      	str	r1, [r2, #32]
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29b      	uxth	r3, r3
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4619      	mov	r1, r3
 80049a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10f      	bne.n	80049c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fecc 	bl	8004798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b08c      	sub	sp, #48	; 0x30
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b22      	cmp	r3, #34	; 0x22
 8004a1c:	f040 80ab 	bne.w	8004b76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a28:	d117      	bne.n	8004a5a <UART_Receive_IT+0x50>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d113      	bne.n	8004a5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	1c9a      	adds	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
 8004a58:	e026      	b.n	8004aa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d007      	beq.n	8004a7e <UART_Receive_IT+0x74>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <UART_Receive_IT+0x82>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e008      	b.n	8004a9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d15a      	bne.n	8004b72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0220 	bic.w	r2, r2, #32
 8004aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d135      	bne.n	8004b68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	613b      	str	r3, [r7, #16]
   return(result);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f023 0310 	bic.w	r3, r3, #16
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	330c      	adds	r3, #12
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	623a      	str	r2, [r7, #32]
 8004b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	69f9      	ldr	r1, [r7, #28]
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e5      	bne.n	8004b02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d10a      	bne.n	8004b5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff fe2d 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
 8004b66:	e002      	b.n	8004b6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fc fe71 	bl	8001850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e002      	b.n	8004b78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e000      	b.n	8004b78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b76:	2302      	movs	r3, #2
  }
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3730      	adds	r7, #48	; 0x30
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	b09f      	sub	sp, #124	; 0x7c
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b96:	68d9      	ldr	r1, [r3, #12]
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	ea40 0301 	orr.w	r3, r0, r1
 8004ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bc4:	f021 010c 	bic.w	r1, r1, #12
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bde:	6999      	ldr	r1, [r3, #24]
 8004be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	ea40 0301 	orr.w	r3, r0, r1
 8004be8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4bc5      	ldr	r3, [pc, #788]	; (8004f04 <UART_SetConfig+0x384>)
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d004      	beq.n	8004bfe <UART_SetConfig+0x7e>
 8004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4bc3      	ldr	r3, [pc, #780]	; (8004f08 <UART_SetConfig+0x388>)
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d103      	bne.n	8004c06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bfe:	f7fe fcb1 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004c02:	6778      	str	r0, [r7, #116]	; 0x74
 8004c04:	e002      	b.n	8004c0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c06:	f7fe fc99 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004c0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c14:	f040 80b6 	bne.w	8004d84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c1a:	461c      	mov	r4, r3
 8004c1c:	f04f 0500 	mov.w	r5, #0
 8004c20:	4622      	mov	r2, r4
 8004c22:	462b      	mov	r3, r5
 8004c24:	1891      	adds	r1, r2, r2
 8004c26:	6439      	str	r1, [r7, #64]	; 0x40
 8004c28:	415b      	adcs	r3, r3
 8004c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c30:	1912      	adds	r2, r2, r4
 8004c32:	eb45 0303 	adc.w	r3, r5, r3
 8004c36:	f04f 0000 	mov.w	r0, #0
 8004c3a:	f04f 0100 	mov.w	r1, #0
 8004c3e:	00d9      	lsls	r1, r3, #3
 8004c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c44:	00d0      	lsls	r0, r2, #3
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	1911      	adds	r1, r2, r4
 8004c4c:	6639      	str	r1, [r7, #96]	; 0x60
 8004c4e:	416b      	adcs	r3, r5
 8004c50:	667b      	str	r3, [r7, #100]	; 0x64
 8004c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c60:	415b      	adcs	r3, r3
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c6c:	f7fc f814 	bl	8000c98 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4ba5      	ldr	r3, [pc, #660]	; (8004f0c <UART_SetConfig+0x38c>)
 8004c76:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	011e      	lsls	r6, r3, #4
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c80:	461c      	mov	r4, r3
 8004c82:	f04f 0500 	mov.w	r5, #0
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	1891      	adds	r1, r2, r2
 8004c8c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c8e:	415b      	adcs	r3, r3
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
 8004c92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c96:	1912      	adds	r2, r2, r4
 8004c98:	eb45 0303 	adc.w	r3, r5, r3
 8004c9c:	f04f 0000 	mov.w	r0, #0
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	00d9      	lsls	r1, r3, #3
 8004ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004caa:	00d0      	lsls	r0, r2, #3
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	1911      	adds	r1, r2, r4
 8004cb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cb4:	416b      	adcs	r3, r5
 8004cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cc6:	415b      	adcs	r3, r3
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cd2:	f7fb ffe1 	bl	8000c98 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b8c      	ldr	r3, [pc, #560]	; (8004f0c <UART_SetConfig+0x38c>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a87      	ldr	r2, [pc, #540]	; (8004f0c <UART_SetConfig+0x38c>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cfc:	441e      	add	r6, r3
 8004cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d00:	4618      	mov	r0, r3
 8004d02:	f04f 0100 	mov.w	r1, #0
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	1894      	adds	r4, r2, r2
 8004d0c:	623c      	str	r4, [r7, #32]
 8004d0e:	415b      	adcs	r3, r3
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d16:	1812      	adds	r2, r2, r0
 8004d18:	eb41 0303 	adc.w	r3, r1, r3
 8004d1c:	f04f 0400 	mov.w	r4, #0
 8004d20:	f04f 0500 	mov.w	r5, #0
 8004d24:	00dd      	lsls	r5, r3, #3
 8004d26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d2a:	00d4      	lsls	r4, r2, #3
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	462b      	mov	r3, r5
 8004d30:	1814      	adds	r4, r2, r0
 8004d32:	653c      	str	r4, [r7, #80]	; 0x50
 8004d34:	414b      	adcs	r3, r1
 8004d36:	657b      	str	r3, [r7, #84]	; 0x54
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	1891      	adds	r1, r2, r2
 8004d44:	61b9      	str	r1, [r7, #24]
 8004d46:	415b      	adcs	r3, r3
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d52:	f7fb ffa1 	bl	8000c98 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <UART_SetConfig+0x38c>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	; 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	3332      	adds	r3, #50	; 0x32
 8004d6e:	4a67      	ldr	r2, [pc, #412]	; (8004f0c <UART_SetConfig+0x38c>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 0207 	and.w	r2, r3, #7
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4432      	add	r2, r6
 8004d80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d82:	e0b9      	b.n	8004ef8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d86:	461c      	mov	r4, r3
 8004d88:	f04f 0500 	mov.w	r5, #0
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	462b      	mov	r3, r5
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	6139      	str	r1, [r7, #16]
 8004d94:	415b      	adcs	r3, r3
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d9c:	1912      	adds	r2, r2, r4
 8004d9e:	eb45 0303 	adc.w	r3, r5, r3
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	00d9      	lsls	r1, r3, #3
 8004dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db0:	00d0      	lsls	r0, r2, #3
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	eb12 0804 	adds.w	r8, r2, r4
 8004dba:	eb43 0905 	adc.w	r9, r3, r5
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f04f 0100 	mov.w	r1, #0
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	008b      	lsls	r3, r1, #2
 8004dd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dd6:	0082      	lsls	r2, r0, #2
 8004dd8:	4640      	mov	r0, r8
 8004dda:	4649      	mov	r1, r9
 8004ddc:	f7fb ff5c 	bl	8000c98 <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <UART_SetConfig+0x38c>)
 8004de6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	011e      	lsls	r6, r3, #4
 8004dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df0:	4618      	mov	r0, r3
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	1894      	adds	r4, r2, r2
 8004dfc:	60bc      	str	r4, [r7, #8]
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e06:	1812      	adds	r2, r2, r0
 8004e08:	eb41 0303 	adc.w	r3, r1, r3
 8004e0c:	f04f 0400 	mov.w	r4, #0
 8004e10:	f04f 0500 	mov.w	r5, #0
 8004e14:	00dd      	lsls	r5, r3, #3
 8004e16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e1a:	00d4      	lsls	r4, r2, #3
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	462b      	mov	r3, r5
 8004e20:	1814      	adds	r4, r2, r0
 8004e22:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e24:	414b      	adcs	r3, r1
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	008b      	lsls	r3, r1, #2
 8004e3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e40:	0082      	lsls	r2, r0, #2
 8004e42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e46:	f7fb ff27 	bl	8000c98 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4b2f      	ldr	r3, [pc, #188]	; (8004f0c <UART_SetConfig+0x38c>)
 8004e50:	fba3 1302 	umull	r1, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	2164      	movs	r1, #100	; 0x64
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	3332      	adds	r3, #50	; 0x32
 8004e62:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <UART_SetConfig+0x38c>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6e:	441e      	add	r6, r3
 8004e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e72:	4618      	mov	r0, r3
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	1894      	adds	r4, r2, r2
 8004e7e:	603c      	str	r4, [r7, #0]
 8004e80:	415b      	adcs	r3, r3
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e88:	1812      	adds	r2, r2, r0
 8004e8a:	eb41 0303 	adc.w	r3, r1, r3
 8004e8e:	f04f 0400 	mov.w	r4, #0
 8004e92:	f04f 0500 	mov.w	r5, #0
 8004e96:	00dd      	lsls	r5, r3, #3
 8004e98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e9c:	00d4      	lsls	r4, r2, #3
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	eb12 0a00 	adds.w	sl, r2, r0
 8004ea6:	eb43 0b01 	adc.w	fp, r3, r1
 8004eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	008b      	lsls	r3, r1, #2
 8004ebe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ec2:	0082      	lsls	r2, r0, #2
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	4659      	mov	r1, fp
 8004ec8:	f7fb fee6 	bl	8000c98 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <UART_SetConfig+0x38c>)
 8004ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2164      	movs	r1, #100	; 0x64
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	3332      	adds	r3, #50	; 0x32
 8004ee4:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <UART_SetConfig+0x38c>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4432      	add	r2, r6
 8004ef6:	609a      	str	r2, [r3, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	377c      	adds	r7, #124	; 0x7c
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	bf00      	nop
 8004f04:	40011000 	.word	0x40011000
 8004f08:	40011400 	.word	0x40011400
 8004f0c:	51eb851f 	.word	0x51eb851f

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	; (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	2000000c 	.word	0x2000000c

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4d0d      	ldr	r5, [pc, #52]	; (8004f54 <__libc_init_array+0x38>)
 8004f20:	4c0d      	ldr	r4, [pc, #52]	; (8004f58 <__libc_init_array+0x3c>)
 8004f22:	1b64      	subs	r4, r4, r5
 8004f24:	10a4      	asrs	r4, r4, #2
 8004f26:	2600      	movs	r6, #0
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	4d0b      	ldr	r5, [pc, #44]	; (8004f5c <__libc_init_array+0x40>)
 8004f2e:	4c0c      	ldr	r4, [pc, #48]	; (8004f60 <__libc_init_array+0x44>)
 8004f30:	f002 feb4 	bl	8007c9c <_init>
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	2600      	movs	r6, #0
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	080080dc 	.word	0x080080dc
 8004f58:	080080dc 	.word	0x080080dc
 8004f5c:	080080dc 	.word	0x080080dc
 8004f60:	080080e0 	.word	0x080080e0

08004f64 <memset>:
 8004f64:	4402      	add	r2, r0
 8004f66:	4603      	mov	r3, r0
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d100      	bne.n	8004f6e <memset+0xa>
 8004f6c:	4770      	bx	lr
 8004f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f72:	e7f9      	b.n	8004f68 <memset+0x4>

08004f74 <__cvt>:
 8004f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	ec55 4b10 	vmov	r4, r5, d0
 8004f7c:	2d00      	cmp	r5, #0
 8004f7e:	460e      	mov	r6, r1
 8004f80:	4619      	mov	r1, r3
 8004f82:	462b      	mov	r3, r5
 8004f84:	bfbb      	ittet	lt
 8004f86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f8a:	461d      	movlt	r5, r3
 8004f8c:	2300      	movge	r3, #0
 8004f8e:	232d      	movlt	r3, #45	; 0x2d
 8004f90:	700b      	strb	r3, [r1, #0]
 8004f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f98:	4691      	mov	r9, r2
 8004f9a:	f023 0820 	bic.w	r8, r3, #32
 8004f9e:	bfbc      	itt	lt
 8004fa0:	4622      	movlt	r2, r4
 8004fa2:	4614      	movlt	r4, r2
 8004fa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fa8:	d005      	beq.n	8004fb6 <__cvt+0x42>
 8004faa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fae:	d100      	bne.n	8004fb2 <__cvt+0x3e>
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	2102      	movs	r1, #2
 8004fb4:	e000      	b.n	8004fb8 <__cvt+0x44>
 8004fb6:	2103      	movs	r1, #3
 8004fb8:	ab03      	add	r3, sp, #12
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	ab02      	add	r3, sp, #8
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	ec45 4b10 	vmov	d0, r4, r5
 8004fc4:	4653      	mov	r3, sl
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	f000 fcea 	bl	80059a0 <_dtoa_r>
 8004fcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	d102      	bne.n	8004fda <__cvt+0x66>
 8004fd4:	f019 0f01 	tst.w	r9, #1
 8004fd8:	d022      	beq.n	8005020 <__cvt+0xac>
 8004fda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fde:	eb07 0906 	add.w	r9, r7, r6
 8004fe2:	d110      	bne.n	8005006 <__cvt+0x92>
 8004fe4:	783b      	ldrb	r3, [r7, #0]
 8004fe6:	2b30      	cmp	r3, #48	; 0x30
 8004fe8:	d10a      	bne.n	8005000 <__cvt+0x8c>
 8004fea:	2200      	movs	r2, #0
 8004fec:	2300      	movs	r3, #0
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	f7fb fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ff6:	b918      	cbnz	r0, 8005000 <__cvt+0x8c>
 8004ff8:	f1c6 0601 	rsb	r6, r6, #1
 8004ffc:	f8ca 6000 	str.w	r6, [sl]
 8005000:	f8da 3000 	ldr.w	r3, [sl]
 8005004:	4499      	add	r9, r3
 8005006:	2200      	movs	r2, #0
 8005008:	2300      	movs	r3, #0
 800500a:	4620      	mov	r0, r4
 800500c:	4629      	mov	r1, r5
 800500e:	f7fb fd63 	bl	8000ad8 <__aeabi_dcmpeq>
 8005012:	b108      	cbz	r0, 8005018 <__cvt+0xa4>
 8005014:	f8cd 900c 	str.w	r9, [sp, #12]
 8005018:	2230      	movs	r2, #48	; 0x30
 800501a:	9b03      	ldr	r3, [sp, #12]
 800501c:	454b      	cmp	r3, r9
 800501e:	d307      	bcc.n	8005030 <__cvt+0xbc>
 8005020:	9b03      	ldr	r3, [sp, #12]
 8005022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005024:	1bdb      	subs	r3, r3, r7
 8005026:	4638      	mov	r0, r7
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	b004      	add	sp, #16
 800502c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005030:	1c59      	adds	r1, r3, #1
 8005032:	9103      	str	r1, [sp, #12]
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e7f0      	b.n	800501a <__cvt+0xa6>

08005038 <__exponent>:
 8005038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800503a:	4603      	mov	r3, r0
 800503c:	2900      	cmp	r1, #0
 800503e:	bfb8      	it	lt
 8005040:	4249      	neglt	r1, r1
 8005042:	f803 2b02 	strb.w	r2, [r3], #2
 8005046:	bfb4      	ite	lt
 8005048:	222d      	movlt	r2, #45	; 0x2d
 800504a:	222b      	movge	r2, #43	; 0x2b
 800504c:	2909      	cmp	r1, #9
 800504e:	7042      	strb	r2, [r0, #1]
 8005050:	dd2a      	ble.n	80050a8 <__exponent+0x70>
 8005052:	f10d 0407 	add.w	r4, sp, #7
 8005056:	46a4      	mov	ip, r4
 8005058:	270a      	movs	r7, #10
 800505a:	46a6      	mov	lr, r4
 800505c:	460a      	mov	r2, r1
 800505e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005062:	fb07 1516 	mls	r5, r7, r6, r1
 8005066:	3530      	adds	r5, #48	; 0x30
 8005068:	2a63      	cmp	r2, #99	; 0x63
 800506a:	f104 34ff 	add.w	r4, r4, #4294967295
 800506e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005072:	4631      	mov	r1, r6
 8005074:	dcf1      	bgt.n	800505a <__exponent+0x22>
 8005076:	3130      	adds	r1, #48	; 0x30
 8005078:	f1ae 0502 	sub.w	r5, lr, #2
 800507c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005080:	1c44      	adds	r4, r0, #1
 8005082:	4629      	mov	r1, r5
 8005084:	4561      	cmp	r1, ip
 8005086:	d30a      	bcc.n	800509e <__exponent+0x66>
 8005088:	f10d 0209 	add.w	r2, sp, #9
 800508c:	eba2 020e 	sub.w	r2, r2, lr
 8005090:	4565      	cmp	r5, ip
 8005092:	bf88      	it	hi
 8005094:	2200      	movhi	r2, #0
 8005096:	4413      	add	r3, r2
 8005098:	1a18      	subs	r0, r3, r0
 800509a:	b003      	add	sp, #12
 800509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050a6:	e7ed      	b.n	8005084 <__exponent+0x4c>
 80050a8:	2330      	movs	r3, #48	; 0x30
 80050aa:	3130      	adds	r1, #48	; 0x30
 80050ac:	7083      	strb	r3, [r0, #2]
 80050ae:	70c1      	strb	r1, [r0, #3]
 80050b0:	1d03      	adds	r3, r0, #4
 80050b2:	e7f1      	b.n	8005098 <__exponent+0x60>

080050b4 <_printf_float>:
 80050b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b8:	ed2d 8b02 	vpush	{d8}
 80050bc:	b08d      	sub	sp, #52	; 0x34
 80050be:	460c      	mov	r4, r1
 80050c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050c4:	4616      	mov	r6, r2
 80050c6:	461f      	mov	r7, r3
 80050c8:	4605      	mov	r5, r0
 80050ca:	f001 fa55 	bl	8006578 <_localeconv_r>
 80050ce:	f8d0 a000 	ldr.w	sl, [r0]
 80050d2:	4650      	mov	r0, sl
 80050d4:	f7fb f884 	bl	80001e0 <strlen>
 80050d8:	2300      	movs	r3, #0
 80050da:	930a      	str	r3, [sp, #40]	; 0x28
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	9305      	str	r3, [sp, #20]
 80050e0:	f8d8 3000 	ldr.w	r3, [r8]
 80050e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050e8:	3307      	adds	r3, #7
 80050ea:	f023 0307 	bic.w	r3, r3, #7
 80050ee:	f103 0208 	add.w	r2, r3, #8
 80050f2:	f8c8 2000 	str.w	r2, [r8]
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005102:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005106:	9307      	str	r3, [sp, #28]
 8005108:	f8cd 8018 	str.w	r8, [sp, #24]
 800510c:	ee08 0a10 	vmov	s16, r0
 8005110:	4b9f      	ldr	r3, [pc, #636]	; (8005390 <_printf_float+0x2dc>)
 8005112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005116:	f04f 32ff 	mov.w	r2, #4294967295
 800511a:	f7fb fd0f 	bl	8000b3c <__aeabi_dcmpun>
 800511e:	bb88      	cbnz	r0, 8005184 <_printf_float+0xd0>
 8005120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005124:	4b9a      	ldr	r3, [pc, #616]	; (8005390 <_printf_float+0x2dc>)
 8005126:	f04f 32ff 	mov.w	r2, #4294967295
 800512a:	f7fb fce9 	bl	8000b00 <__aeabi_dcmple>
 800512e:	bb48      	cbnz	r0, 8005184 <_printf_float+0xd0>
 8005130:	2200      	movs	r2, #0
 8005132:	2300      	movs	r3, #0
 8005134:	4640      	mov	r0, r8
 8005136:	4649      	mov	r1, r9
 8005138:	f7fb fcd8 	bl	8000aec <__aeabi_dcmplt>
 800513c:	b110      	cbz	r0, 8005144 <_printf_float+0x90>
 800513e:	232d      	movs	r3, #45	; 0x2d
 8005140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005144:	4b93      	ldr	r3, [pc, #588]	; (8005394 <_printf_float+0x2e0>)
 8005146:	4894      	ldr	r0, [pc, #592]	; (8005398 <_printf_float+0x2e4>)
 8005148:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800514c:	bf94      	ite	ls
 800514e:	4698      	movls	r8, r3
 8005150:	4680      	movhi	r8, r0
 8005152:	2303      	movs	r3, #3
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	9b05      	ldr	r3, [sp, #20]
 8005158:	f023 0204 	bic.w	r2, r3, #4
 800515c:	6022      	str	r2, [r4, #0]
 800515e:	f04f 0900 	mov.w	r9, #0
 8005162:	9700      	str	r7, [sp, #0]
 8005164:	4633      	mov	r3, r6
 8005166:	aa0b      	add	r2, sp, #44	; 0x2c
 8005168:	4621      	mov	r1, r4
 800516a:	4628      	mov	r0, r5
 800516c:	f000 f9d8 	bl	8005520 <_printf_common>
 8005170:	3001      	adds	r0, #1
 8005172:	f040 8090 	bne.w	8005296 <_printf_float+0x1e2>
 8005176:	f04f 30ff 	mov.w	r0, #4294967295
 800517a:	b00d      	add	sp, #52	; 0x34
 800517c:	ecbd 8b02 	vpop	{d8}
 8005180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	4640      	mov	r0, r8
 800518a:	4649      	mov	r1, r9
 800518c:	f7fb fcd6 	bl	8000b3c <__aeabi_dcmpun>
 8005190:	b140      	cbz	r0, 80051a4 <_printf_float+0xf0>
 8005192:	464b      	mov	r3, r9
 8005194:	2b00      	cmp	r3, #0
 8005196:	bfbc      	itt	lt
 8005198:	232d      	movlt	r3, #45	; 0x2d
 800519a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800519e:	487f      	ldr	r0, [pc, #508]	; (800539c <_printf_float+0x2e8>)
 80051a0:	4b7f      	ldr	r3, [pc, #508]	; (80053a0 <_printf_float+0x2ec>)
 80051a2:	e7d1      	b.n	8005148 <_printf_float+0x94>
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051aa:	9206      	str	r2, [sp, #24]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	d13f      	bne.n	8005230 <_printf_float+0x17c>
 80051b0:	2306      	movs	r3, #6
 80051b2:	6063      	str	r3, [r4, #4]
 80051b4:	9b05      	ldr	r3, [sp, #20]
 80051b6:	6861      	ldr	r1, [r4, #4]
 80051b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051bc:	2300      	movs	r3, #0
 80051be:	9303      	str	r3, [sp, #12]
 80051c0:	ab0a      	add	r3, sp, #40	; 0x28
 80051c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051c6:	ab09      	add	r3, sp, #36	; 0x24
 80051c8:	ec49 8b10 	vmov	d0, r8, r9
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	6022      	str	r2, [r4, #0]
 80051d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051d4:	4628      	mov	r0, r5
 80051d6:	f7ff fecd 	bl	8004f74 <__cvt>
 80051da:	9b06      	ldr	r3, [sp, #24]
 80051dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051de:	2b47      	cmp	r3, #71	; 0x47
 80051e0:	4680      	mov	r8, r0
 80051e2:	d108      	bne.n	80051f6 <_printf_float+0x142>
 80051e4:	1cc8      	adds	r0, r1, #3
 80051e6:	db02      	blt.n	80051ee <_printf_float+0x13a>
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	4299      	cmp	r1, r3
 80051ec:	dd41      	ble.n	8005272 <_printf_float+0x1be>
 80051ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80051f2:	fa5f fb8b 	uxtb.w	fp, fp
 80051f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051fa:	d820      	bhi.n	800523e <_printf_float+0x18a>
 80051fc:	3901      	subs	r1, #1
 80051fe:	465a      	mov	r2, fp
 8005200:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005204:	9109      	str	r1, [sp, #36]	; 0x24
 8005206:	f7ff ff17 	bl	8005038 <__exponent>
 800520a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800520c:	1813      	adds	r3, r2, r0
 800520e:	2a01      	cmp	r2, #1
 8005210:	4681      	mov	r9, r0
 8005212:	6123      	str	r3, [r4, #16]
 8005214:	dc02      	bgt.n	800521c <_printf_float+0x168>
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	07d2      	lsls	r2, r2, #31
 800521a:	d501      	bpl.n	8005220 <_printf_float+0x16c>
 800521c:	3301      	adds	r3, #1
 800521e:	6123      	str	r3, [r4, #16]
 8005220:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005224:	2b00      	cmp	r3, #0
 8005226:	d09c      	beq.n	8005162 <_printf_float+0xae>
 8005228:	232d      	movs	r3, #45	; 0x2d
 800522a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800522e:	e798      	b.n	8005162 <_printf_float+0xae>
 8005230:	9a06      	ldr	r2, [sp, #24]
 8005232:	2a47      	cmp	r2, #71	; 0x47
 8005234:	d1be      	bne.n	80051b4 <_printf_float+0x100>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1bc      	bne.n	80051b4 <_printf_float+0x100>
 800523a:	2301      	movs	r3, #1
 800523c:	e7b9      	b.n	80051b2 <_printf_float+0xfe>
 800523e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005242:	d118      	bne.n	8005276 <_printf_float+0x1c2>
 8005244:	2900      	cmp	r1, #0
 8005246:	6863      	ldr	r3, [r4, #4]
 8005248:	dd0b      	ble.n	8005262 <_printf_float+0x1ae>
 800524a:	6121      	str	r1, [r4, #16]
 800524c:	b913      	cbnz	r3, 8005254 <_printf_float+0x1a0>
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	07d0      	lsls	r0, r2, #31
 8005252:	d502      	bpl.n	800525a <_printf_float+0x1a6>
 8005254:	3301      	adds	r3, #1
 8005256:	440b      	add	r3, r1
 8005258:	6123      	str	r3, [r4, #16]
 800525a:	65a1      	str	r1, [r4, #88]	; 0x58
 800525c:	f04f 0900 	mov.w	r9, #0
 8005260:	e7de      	b.n	8005220 <_printf_float+0x16c>
 8005262:	b913      	cbnz	r3, 800526a <_printf_float+0x1b6>
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	07d2      	lsls	r2, r2, #31
 8005268:	d501      	bpl.n	800526e <_printf_float+0x1ba>
 800526a:	3302      	adds	r3, #2
 800526c:	e7f4      	b.n	8005258 <_printf_float+0x1a4>
 800526e:	2301      	movs	r3, #1
 8005270:	e7f2      	b.n	8005258 <_printf_float+0x1a4>
 8005272:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005278:	4299      	cmp	r1, r3
 800527a:	db05      	blt.n	8005288 <_printf_float+0x1d4>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	6121      	str	r1, [r4, #16]
 8005280:	07d8      	lsls	r0, r3, #31
 8005282:	d5ea      	bpl.n	800525a <_printf_float+0x1a6>
 8005284:	1c4b      	adds	r3, r1, #1
 8005286:	e7e7      	b.n	8005258 <_printf_float+0x1a4>
 8005288:	2900      	cmp	r1, #0
 800528a:	bfd4      	ite	le
 800528c:	f1c1 0202 	rsble	r2, r1, #2
 8005290:	2201      	movgt	r2, #1
 8005292:	4413      	add	r3, r2
 8005294:	e7e0      	b.n	8005258 <_printf_float+0x1a4>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	055a      	lsls	r2, r3, #21
 800529a:	d407      	bmi.n	80052ac <_printf_float+0x1f8>
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	4642      	mov	r2, r8
 80052a0:	4631      	mov	r1, r6
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	d12c      	bne.n	8005304 <_printf_float+0x250>
 80052aa:	e764      	b.n	8005176 <_printf_float+0xc2>
 80052ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052b0:	f240 80e0 	bls.w	8005474 <_printf_float+0x3c0>
 80052b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052b8:	2200      	movs	r2, #0
 80052ba:	2300      	movs	r3, #0
 80052bc:	f7fb fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d034      	beq.n	800532e <_printf_float+0x27a>
 80052c4:	4a37      	ldr	r2, [pc, #220]	; (80053a4 <_printf_float+0x2f0>)
 80052c6:	2301      	movs	r3, #1
 80052c8:	4631      	mov	r1, r6
 80052ca:	4628      	mov	r0, r5
 80052cc:	47b8      	blx	r7
 80052ce:	3001      	adds	r0, #1
 80052d0:	f43f af51 	beq.w	8005176 <_printf_float+0xc2>
 80052d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d8:	429a      	cmp	r2, r3
 80052da:	db02      	blt.n	80052e2 <_printf_float+0x22e>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	07d8      	lsls	r0, r3, #31
 80052e0:	d510      	bpl.n	8005304 <_printf_float+0x250>
 80052e2:	ee18 3a10 	vmov	r3, s16
 80052e6:	4652      	mov	r2, sl
 80052e8:	4631      	mov	r1, r6
 80052ea:	4628      	mov	r0, r5
 80052ec:	47b8      	blx	r7
 80052ee:	3001      	adds	r0, #1
 80052f0:	f43f af41 	beq.w	8005176 <_printf_float+0xc2>
 80052f4:	f04f 0800 	mov.w	r8, #0
 80052f8:	f104 091a 	add.w	r9, r4, #26
 80052fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	4543      	cmp	r3, r8
 8005302:	dc09      	bgt.n	8005318 <_printf_float+0x264>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	079b      	lsls	r3, r3, #30
 8005308:	f100 8105 	bmi.w	8005516 <_printf_float+0x462>
 800530c:	68e0      	ldr	r0, [r4, #12]
 800530e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005310:	4298      	cmp	r0, r3
 8005312:	bfb8      	it	lt
 8005314:	4618      	movlt	r0, r3
 8005316:	e730      	b.n	800517a <_printf_float+0xc6>
 8005318:	2301      	movs	r3, #1
 800531a:	464a      	mov	r2, r9
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f af27 	beq.w	8005176 <_printf_float+0xc2>
 8005328:	f108 0801 	add.w	r8, r8, #1
 800532c:	e7e6      	b.n	80052fc <_printf_float+0x248>
 800532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005330:	2b00      	cmp	r3, #0
 8005332:	dc39      	bgt.n	80053a8 <_printf_float+0x2f4>
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <_printf_float+0x2f0>)
 8005336:	2301      	movs	r3, #1
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f af19 	beq.w	8005176 <_printf_float+0xc2>
 8005344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005348:	4313      	orrs	r3, r2
 800534a:	d102      	bne.n	8005352 <_printf_float+0x29e>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	07d9      	lsls	r1, r3, #31
 8005350:	d5d8      	bpl.n	8005304 <_printf_float+0x250>
 8005352:	ee18 3a10 	vmov	r3, s16
 8005356:	4652      	mov	r2, sl
 8005358:	4631      	mov	r1, r6
 800535a:	4628      	mov	r0, r5
 800535c:	47b8      	blx	r7
 800535e:	3001      	adds	r0, #1
 8005360:	f43f af09 	beq.w	8005176 <_printf_float+0xc2>
 8005364:	f04f 0900 	mov.w	r9, #0
 8005368:	f104 0a1a 	add.w	sl, r4, #26
 800536c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536e:	425b      	negs	r3, r3
 8005370:	454b      	cmp	r3, r9
 8005372:	dc01      	bgt.n	8005378 <_printf_float+0x2c4>
 8005374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005376:	e792      	b.n	800529e <_printf_float+0x1ea>
 8005378:	2301      	movs	r3, #1
 800537a:	4652      	mov	r2, sl
 800537c:	4631      	mov	r1, r6
 800537e:	4628      	mov	r0, r5
 8005380:	47b8      	blx	r7
 8005382:	3001      	adds	r0, #1
 8005384:	f43f aef7 	beq.w	8005176 <_printf_float+0xc2>
 8005388:	f109 0901 	add.w	r9, r9, #1
 800538c:	e7ee      	b.n	800536c <_printf_float+0x2b8>
 800538e:	bf00      	nop
 8005390:	7fefffff 	.word	0x7fefffff
 8005394:	08007cf8 	.word	0x08007cf8
 8005398:	08007cfc 	.word	0x08007cfc
 800539c:	08007d04 	.word	0x08007d04
 80053a0:	08007d00 	.word	0x08007d00
 80053a4:	08007d08 	.word	0x08007d08
 80053a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053ac:	429a      	cmp	r2, r3
 80053ae:	bfa8      	it	ge
 80053b0:	461a      	movge	r2, r3
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	4691      	mov	r9, r2
 80053b6:	dc37      	bgt.n	8005428 <_printf_float+0x374>
 80053b8:	f04f 0b00 	mov.w	fp, #0
 80053bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053c0:	f104 021a 	add.w	r2, r4, #26
 80053c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053c6:	9305      	str	r3, [sp, #20]
 80053c8:	eba3 0309 	sub.w	r3, r3, r9
 80053cc:	455b      	cmp	r3, fp
 80053ce:	dc33      	bgt.n	8005438 <_printf_float+0x384>
 80053d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d4:	429a      	cmp	r2, r3
 80053d6:	db3b      	blt.n	8005450 <_printf_float+0x39c>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	07da      	lsls	r2, r3, #31
 80053dc:	d438      	bmi.n	8005450 <_printf_float+0x39c>
 80053de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053e0:	9b05      	ldr	r3, [sp, #20]
 80053e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	eba2 0901 	sub.w	r9, r2, r1
 80053ea:	4599      	cmp	r9, r3
 80053ec:	bfa8      	it	ge
 80053ee:	4699      	movge	r9, r3
 80053f0:	f1b9 0f00 	cmp.w	r9, #0
 80053f4:	dc35      	bgt.n	8005462 <_printf_float+0x3ae>
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053fe:	f104 0a1a 	add.w	sl, r4, #26
 8005402:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	eba3 0309 	sub.w	r3, r3, r9
 800540c:	4543      	cmp	r3, r8
 800540e:	f77f af79 	ble.w	8005304 <_printf_float+0x250>
 8005412:	2301      	movs	r3, #1
 8005414:	4652      	mov	r2, sl
 8005416:	4631      	mov	r1, r6
 8005418:	4628      	mov	r0, r5
 800541a:	47b8      	blx	r7
 800541c:	3001      	adds	r0, #1
 800541e:	f43f aeaa 	beq.w	8005176 <_printf_float+0xc2>
 8005422:	f108 0801 	add.w	r8, r8, #1
 8005426:	e7ec      	b.n	8005402 <_printf_float+0x34e>
 8005428:	4613      	mov	r3, r2
 800542a:	4631      	mov	r1, r6
 800542c:	4642      	mov	r2, r8
 800542e:	4628      	mov	r0, r5
 8005430:	47b8      	blx	r7
 8005432:	3001      	adds	r0, #1
 8005434:	d1c0      	bne.n	80053b8 <_printf_float+0x304>
 8005436:	e69e      	b.n	8005176 <_printf_float+0xc2>
 8005438:	2301      	movs	r3, #1
 800543a:	4631      	mov	r1, r6
 800543c:	4628      	mov	r0, r5
 800543e:	9205      	str	r2, [sp, #20]
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	f43f ae97 	beq.w	8005176 <_printf_float+0xc2>
 8005448:	9a05      	ldr	r2, [sp, #20]
 800544a:	f10b 0b01 	add.w	fp, fp, #1
 800544e:	e7b9      	b.n	80053c4 <_printf_float+0x310>
 8005450:	ee18 3a10 	vmov	r3, s16
 8005454:	4652      	mov	r2, sl
 8005456:	4631      	mov	r1, r6
 8005458:	4628      	mov	r0, r5
 800545a:	47b8      	blx	r7
 800545c:	3001      	adds	r0, #1
 800545e:	d1be      	bne.n	80053de <_printf_float+0x32a>
 8005460:	e689      	b.n	8005176 <_printf_float+0xc2>
 8005462:	9a05      	ldr	r2, [sp, #20]
 8005464:	464b      	mov	r3, r9
 8005466:	4442      	add	r2, r8
 8005468:	4631      	mov	r1, r6
 800546a:	4628      	mov	r0, r5
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	d1c1      	bne.n	80053f6 <_printf_float+0x342>
 8005472:	e680      	b.n	8005176 <_printf_float+0xc2>
 8005474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005476:	2a01      	cmp	r2, #1
 8005478:	dc01      	bgt.n	800547e <_printf_float+0x3ca>
 800547a:	07db      	lsls	r3, r3, #31
 800547c:	d538      	bpl.n	80054f0 <_printf_float+0x43c>
 800547e:	2301      	movs	r3, #1
 8005480:	4642      	mov	r2, r8
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	47b8      	blx	r7
 8005488:	3001      	adds	r0, #1
 800548a:	f43f ae74 	beq.w	8005176 <_printf_float+0xc2>
 800548e:	ee18 3a10 	vmov	r3, s16
 8005492:	4652      	mov	r2, sl
 8005494:	4631      	mov	r1, r6
 8005496:	4628      	mov	r0, r5
 8005498:	47b8      	blx	r7
 800549a:	3001      	adds	r0, #1
 800549c:	f43f ae6b 	beq.w	8005176 <_printf_float+0xc2>
 80054a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054a4:	2200      	movs	r2, #0
 80054a6:	2300      	movs	r3, #0
 80054a8:	f7fb fb16 	bl	8000ad8 <__aeabi_dcmpeq>
 80054ac:	b9d8      	cbnz	r0, 80054e6 <_printf_float+0x432>
 80054ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b0:	f108 0201 	add.w	r2, r8, #1
 80054b4:	3b01      	subs	r3, #1
 80054b6:	4631      	mov	r1, r6
 80054b8:	4628      	mov	r0, r5
 80054ba:	47b8      	blx	r7
 80054bc:	3001      	adds	r0, #1
 80054be:	d10e      	bne.n	80054de <_printf_float+0x42a>
 80054c0:	e659      	b.n	8005176 <_printf_float+0xc2>
 80054c2:	2301      	movs	r3, #1
 80054c4:	4652      	mov	r2, sl
 80054c6:	4631      	mov	r1, r6
 80054c8:	4628      	mov	r0, r5
 80054ca:	47b8      	blx	r7
 80054cc:	3001      	adds	r0, #1
 80054ce:	f43f ae52 	beq.w	8005176 <_printf_float+0xc2>
 80054d2:	f108 0801 	add.w	r8, r8, #1
 80054d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d8:	3b01      	subs	r3, #1
 80054da:	4543      	cmp	r3, r8
 80054dc:	dcf1      	bgt.n	80054c2 <_printf_float+0x40e>
 80054de:	464b      	mov	r3, r9
 80054e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054e4:	e6dc      	b.n	80052a0 <_printf_float+0x1ec>
 80054e6:	f04f 0800 	mov.w	r8, #0
 80054ea:	f104 0a1a 	add.w	sl, r4, #26
 80054ee:	e7f2      	b.n	80054d6 <_printf_float+0x422>
 80054f0:	2301      	movs	r3, #1
 80054f2:	4642      	mov	r2, r8
 80054f4:	e7df      	b.n	80054b6 <_printf_float+0x402>
 80054f6:	2301      	movs	r3, #1
 80054f8:	464a      	mov	r2, r9
 80054fa:	4631      	mov	r1, r6
 80054fc:	4628      	mov	r0, r5
 80054fe:	47b8      	blx	r7
 8005500:	3001      	adds	r0, #1
 8005502:	f43f ae38 	beq.w	8005176 <_printf_float+0xc2>
 8005506:	f108 0801 	add.w	r8, r8, #1
 800550a:	68e3      	ldr	r3, [r4, #12]
 800550c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800550e:	1a5b      	subs	r3, r3, r1
 8005510:	4543      	cmp	r3, r8
 8005512:	dcf0      	bgt.n	80054f6 <_printf_float+0x442>
 8005514:	e6fa      	b.n	800530c <_printf_float+0x258>
 8005516:	f04f 0800 	mov.w	r8, #0
 800551a:	f104 0919 	add.w	r9, r4, #25
 800551e:	e7f4      	b.n	800550a <_printf_float+0x456>

08005520 <_printf_common>:
 8005520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	4616      	mov	r6, r2
 8005526:	4699      	mov	r9, r3
 8005528:	688a      	ldr	r2, [r1, #8]
 800552a:	690b      	ldr	r3, [r1, #16]
 800552c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005530:	4293      	cmp	r3, r2
 8005532:	bfb8      	it	lt
 8005534:	4613      	movlt	r3, r2
 8005536:	6033      	str	r3, [r6, #0]
 8005538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800553c:	4607      	mov	r7, r0
 800553e:	460c      	mov	r4, r1
 8005540:	b10a      	cbz	r2, 8005546 <_printf_common+0x26>
 8005542:	3301      	adds	r3, #1
 8005544:	6033      	str	r3, [r6, #0]
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	0699      	lsls	r1, r3, #26
 800554a:	bf42      	ittt	mi
 800554c:	6833      	ldrmi	r3, [r6, #0]
 800554e:	3302      	addmi	r3, #2
 8005550:	6033      	strmi	r3, [r6, #0]
 8005552:	6825      	ldr	r5, [r4, #0]
 8005554:	f015 0506 	ands.w	r5, r5, #6
 8005558:	d106      	bne.n	8005568 <_printf_common+0x48>
 800555a:	f104 0a19 	add.w	sl, r4, #25
 800555e:	68e3      	ldr	r3, [r4, #12]
 8005560:	6832      	ldr	r2, [r6, #0]
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	42ab      	cmp	r3, r5
 8005566:	dc26      	bgt.n	80055b6 <_printf_common+0x96>
 8005568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800556c:	1e13      	subs	r3, r2, #0
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	bf18      	it	ne
 8005572:	2301      	movne	r3, #1
 8005574:	0692      	lsls	r2, r2, #26
 8005576:	d42b      	bmi.n	80055d0 <_printf_common+0xb0>
 8005578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800557c:	4649      	mov	r1, r9
 800557e:	4638      	mov	r0, r7
 8005580:	47c0      	blx	r8
 8005582:	3001      	adds	r0, #1
 8005584:	d01e      	beq.n	80055c4 <_printf_common+0xa4>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	68e5      	ldr	r5, [r4, #12]
 800558a:	6832      	ldr	r2, [r6, #0]
 800558c:	f003 0306 	and.w	r3, r3, #6
 8005590:	2b04      	cmp	r3, #4
 8005592:	bf08      	it	eq
 8005594:	1aad      	subeq	r5, r5, r2
 8005596:	68a3      	ldr	r3, [r4, #8]
 8005598:	6922      	ldr	r2, [r4, #16]
 800559a:	bf0c      	ite	eq
 800559c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a0:	2500      	movne	r5, #0
 80055a2:	4293      	cmp	r3, r2
 80055a4:	bfc4      	itt	gt
 80055a6:	1a9b      	subgt	r3, r3, r2
 80055a8:	18ed      	addgt	r5, r5, r3
 80055aa:	2600      	movs	r6, #0
 80055ac:	341a      	adds	r4, #26
 80055ae:	42b5      	cmp	r5, r6
 80055b0:	d11a      	bne.n	80055e8 <_printf_common+0xc8>
 80055b2:	2000      	movs	r0, #0
 80055b4:	e008      	b.n	80055c8 <_printf_common+0xa8>
 80055b6:	2301      	movs	r3, #1
 80055b8:	4652      	mov	r2, sl
 80055ba:	4649      	mov	r1, r9
 80055bc:	4638      	mov	r0, r7
 80055be:	47c0      	blx	r8
 80055c0:	3001      	adds	r0, #1
 80055c2:	d103      	bne.n	80055cc <_printf_common+0xac>
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055cc:	3501      	adds	r5, #1
 80055ce:	e7c6      	b.n	800555e <_printf_common+0x3e>
 80055d0:	18e1      	adds	r1, r4, r3
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	2030      	movs	r0, #48	; 0x30
 80055d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055da:	4422      	add	r2, r4
 80055dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e4:	3302      	adds	r3, #2
 80055e6:	e7c7      	b.n	8005578 <_printf_common+0x58>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4622      	mov	r2, r4
 80055ec:	4649      	mov	r1, r9
 80055ee:	4638      	mov	r0, r7
 80055f0:	47c0      	blx	r8
 80055f2:	3001      	adds	r0, #1
 80055f4:	d0e6      	beq.n	80055c4 <_printf_common+0xa4>
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7d9      	b.n	80055ae <_printf_common+0x8e>
	...

080055fc <_printf_i>:
 80055fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005600:	460c      	mov	r4, r1
 8005602:	4691      	mov	r9, r2
 8005604:	7e27      	ldrb	r7, [r4, #24]
 8005606:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005608:	2f78      	cmp	r7, #120	; 0x78
 800560a:	4680      	mov	r8, r0
 800560c:	469a      	mov	sl, r3
 800560e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005612:	d807      	bhi.n	8005624 <_printf_i+0x28>
 8005614:	2f62      	cmp	r7, #98	; 0x62
 8005616:	d80a      	bhi.n	800562e <_printf_i+0x32>
 8005618:	2f00      	cmp	r7, #0
 800561a:	f000 80d8 	beq.w	80057ce <_printf_i+0x1d2>
 800561e:	2f58      	cmp	r7, #88	; 0x58
 8005620:	f000 80a3 	beq.w	800576a <_printf_i+0x16e>
 8005624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800562c:	e03a      	b.n	80056a4 <_printf_i+0xa8>
 800562e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005632:	2b15      	cmp	r3, #21
 8005634:	d8f6      	bhi.n	8005624 <_printf_i+0x28>
 8005636:	a001      	add	r0, pc, #4	; (adr r0, 800563c <_printf_i+0x40>)
 8005638:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800563c:	08005695 	.word	0x08005695
 8005640:	080056a9 	.word	0x080056a9
 8005644:	08005625 	.word	0x08005625
 8005648:	08005625 	.word	0x08005625
 800564c:	08005625 	.word	0x08005625
 8005650:	08005625 	.word	0x08005625
 8005654:	080056a9 	.word	0x080056a9
 8005658:	08005625 	.word	0x08005625
 800565c:	08005625 	.word	0x08005625
 8005660:	08005625 	.word	0x08005625
 8005664:	08005625 	.word	0x08005625
 8005668:	080057b5 	.word	0x080057b5
 800566c:	080056d9 	.word	0x080056d9
 8005670:	08005797 	.word	0x08005797
 8005674:	08005625 	.word	0x08005625
 8005678:	08005625 	.word	0x08005625
 800567c:	080057d7 	.word	0x080057d7
 8005680:	08005625 	.word	0x08005625
 8005684:	080056d9 	.word	0x080056d9
 8005688:	08005625 	.word	0x08005625
 800568c:	08005625 	.word	0x08005625
 8005690:	0800579f 	.word	0x0800579f
 8005694:	680b      	ldr	r3, [r1, #0]
 8005696:	1d1a      	adds	r2, r3, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	600a      	str	r2, [r1, #0]
 800569c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0a3      	b.n	80057f0 <_printf_i+0x1f4>
 80056a8:	6825      	ldr	r5, [r4, #0]
 80056aa:	6808      	ldr	r0, [r1, #0]
 80056ac:	062e      	lsls	r6, r5, #24
 80056ae:	f100 0304 	add.w	r3, r0, #4
 80056b2:	d50a      	bpl.n	80056ca <_printf_i+0xce>
 80056b4:	6805      	ldr	r5, [r0, #0]
 80056b6:	600b      	str	r3, [r1, #0]
 80056b8:	2d00      	cmp	r5, #0
 80056ba:	da03      	bge.n	80056c4 <_printf_i+0xc8>
 80056bc:	232d      	movs	r3, #45	; 0x2d
 80056be:	426d      	negs	r5, r5
 80056c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c4:	485e      	ldr	r0, [pc, #376]	; (8005840 <_printf_i+0x244>)
 80056c6:	230a      	movs	r3, #10
 80056c8:	e019      	b.n	80056fe <_printf_i+0x102>
 80056ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056ce:	6805      	ldr	r5, [r0, #0]
 80056d0:	600b      	str	r3, [r1, #0]
 80056d2:	bf18      	it	ne
 80056d4:	b22d      	sxthne	r5, r5
 80056d6:	e7ef      	b.n	80056b8 <_printf_i+0xbc>
 80056d8:	680b      	ldr	r3, [r1, #0]
 80056da:	6825      	ldr	r5, [r4, #0]
 80056dc:	1d18      	adds	r0, r3, #4
 80056de:	6008      	str	r0, [r1, #0]
 80056e0:	0628      	lsls	r0, r5, #24
 80056e2:	d501      	bpl.n	80056e8 <_printf_i+0xec>
 80056e4:	681d      	ldr	r5, [r3, #0]
 80056e6:	e002      	b.n	80056ee <_printf_i+0xf2>
 80056e8:	0669      	lsls	r1, r5, #25
 80056ea:	d5fb      	bpl.n	80056e4 <_printf_i+0xe8>
 80056ec:	881d      	ldrh	r5, [r3, #0]
 80056ee:	4854      	ldr	r0, [pc, #336]	; (8005840 <_printf_i+0x244>)
 80056f0:	2f6f      	cmp	r7, #111	; 0x6f
 80056f2:	bf0c      	ite	eq
 80056f4:	2308      	moveq	r3, #8
 80056f6:	230a      	movne	r3, #10
 80056f8:	2100      	movs	r1, #0
 80056fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056fe:	6866      	ldr	r6, [r4, #4]
 8005700:	60a6      	str	r6, [r4, #8]
 8005702:	2e00      	cmp	r6, #0
 8005704:	bfa2      	ittt	ge
 8005706:	6821      	ldrge	r1, [r4, #0]
 8005708:	f021 0104 	bicge.w	r1, r1, #4
 800570c:	6021      	strge	r1, [r4, #0]
 800570e:	b90d      	cbnz	r5, 8005714 <_printf_i+0x118>
 8005710:	2e00      	cmp	r6, #0
 8005712:	d04d      	beq.n	80057b0 <_printf_i+0x1b4>
 8005714:	4616      	mov	r6, r2
 8005716:	fbb5 f1f3 	udiv	r1, r5, r3
 800571a:	fb03 5711 	mls	r7, r3, r1, r5
 800571e:	5dc7      	ldrb	r7, [r0, r7]
 8005720:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005724:	462f      	mov	r7, r5
 8005726:	42bb      	cmp	r3, r7
 8005728:	460d      	mov	r5, r1
 800572a:	d9f4      	bls.n	8005716 <_printf_i+0x11a>
 800572c:	2b08      	cmp	r3, #8
 800572e:	d10b      	bne.n	8005748 <_printf_i+0x14c>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	07df      	lsls	r7, r3, #31
 8005734:	d508      	bpl.n	8005748 <_printf_i+0x14c>
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	6861      	ldr	r1, [r4, #4]
 800573a:	4299      	cmp	r1, r3
 800573c:	bfde      	ittt	le
 800573e:	2330      	movle	r3, #48	; 0x30
 8005740:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005744:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005748:	1b92      	subs	r2, r2, r6
 800574a:	6122      	str	r2, [r4, #16]
 800574c:	f8cd a000 	str.w	sl, [sp]
 8005750:	464b      	mov	r3, r9
 8005752:	aa03      	add	r2, sp, #12
 8005754:	4621      	mov	r1, r4
 8005756:	4640      	mov	r0, r8
 8005758:	f7ff fee2 	bl	8005520 <_printf_common>
 800575c:	3001      	adds	r0, #1
 800575e:	d14c      	bne.n	80057fa <_printf_i+0x1fe>
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	b004      	add	sp, #16
 8005766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576a:	4835      	ldr	r0, [pc, #212]	; (8005840 <_printf_i+0x244>)
 800576c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	680e      	ldr	r6, [r1, #0]
 8005774:	061f      	lsls	r7, r3, #24
 8005776:	f856 5b04 	ldr.w	r5, [r6], #4
 800577a:	600e      	str	r6, [r1, #0]
 800577c:	d514      	bpl.n	80057a8 <_printf_i+0x1ac>
 800577e:	07d9      	lsls	r1, r3, #31
 8005780:	bf44      	itt	mi
 8005782:	f043 0320 	orrmi.w	r3, r3, #32
 8005786:	6023      	strmi	r3, [r4, #0]
 8005788:	b91d      	cbnz	r5, 8005792 <_printf_i+0x196>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	f023 0320 	bic.w	r3, r3, #32
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	2310      	movs	r3, #16
 8005794:	e7b0      	b.n	80056f8 <_printf_i+0xfc>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	f043 0320 	orr.w	r3, r3, #32
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	2378      	movs	r3, #120	; 0x78
 80057a0:	4828      	ldr	r0, [pc, #160]	; (8005844 <_printf_i+0x248>)
 80057a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057a6:	e7e3      	b.n	8005770 <_printf_i+0x174>
 80057a8:	065e      	lsls	r6, r3, #25
 80057aa:	bf48      	it	mi
 80057ac:	b2ad      	uxthmi	r5, r5
 80057ae:	e7e6      	b.n	800577e <_printf_i+0x182>
 80057b0:	4616      	mov	r6, r2
 80057b2:	e7bb      	b.n	800572c <_printf_i+0x130>
 80057b4:	680b      	ldr	r3, [r1, #0]
 80057b6:	6826      	ldr	r6, [r4, #0]
 80057b8:	6960      	ldr	r0, [r4, #20]
 80057ba:	1d1d      	adds	r5, r3, #4
 80057bc:	600d      	str	r5, [r1, #0]
 80057be:	0635      	lsls	r5, r6, #24
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	d501      	bpl.n	80057c8 <_printf_i+0x1cc>
 80057c4:	6018      	str	r0, [r3, #0]
 80057c6:	e002      	b.n	80057ce <_printf_i+0x1d2>
 80057c8:	0671      	lsls	r1, r6, #25
 80057ca:	d5fb      	bpl.n	80057c4 <_printf_i+0x1c8>
 80057cc:	8018      	strh	r0, [r3, #0]
 80057ce:	2300      	movs	r3, #0
 80057d0:	6123      	str	r3, [r4, #16]
 80057d2:	4616      	mov	r6, r2
 80057d4:	e7ba      	b.n	800574c <_printf_i+0x150>
 80057d6:	680b      	ldr	r3, [r1, #0]
 80057d8:	1d1a      	adds	r2, r3, #4
 80057da:	600a      	str	r2, [r1, #0]
 80057dc:	681e      	ldr	r6, [r3, #0]
 80057de:	6862      	ldr	r2, [r4, #4]
 80057e0:	2100      	movs	r1, #0
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7fa fd04 	bl	80001f0 <memchr>
 80057e8:	b108      	cbz	r0, 80057ee <_printf_i+0x1f2>
 80057ea:	1b80      	subs	r0, r0, r6
 80057ec:	6060      	str	r0, [r4, #4]
 80057ee:	6863      	ldr	r3, [r4, #4]
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	2300      	movs	r3, #0
 80057f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f8:	e7a8      	b.n	800574c <_printf_i+0x150>
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	4632      	mov	r2, r6
 80057fe:	4649      	mov	r1, r9
 8005800:	4640      	mov	r0, r8
 8005802:	47d0      	blx	sl
 8005804:	3001      	adds	r0, #1
 8005806:	d0ab      	beq.n	8005760 <_printf_i+0x164>
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	079b      	lsls	r3, r3, #30
 800580c:	d413      	bmi.n	8005836 <_printf_i+0x23a>
 800580e:	68e0      	ldr	r0, [r4, #12]
 8005810:	9b03      	ldr	r3, [sp, #12]
 8005812:	4298      	cmp	r0, r3
 8005814:	bfb8      	it	lt
 8005816:	4618      	movlt	r0, r3
 8005818:	e7a4      	b.n	8005764 <_printf_i+0x168>
 800581a:	2301      	movs	r3, #1
 800581c:	4632      	mov	r2, r6
 800581e:	4649      	mov	r1, r9
 8005820:	4640      	mov	r0, r8
 8005822:	47d0      	blx	sl
 8005824:	3001      	adds	r0, #1
 8005826:	d09b      	beq.n	8005760 <_printf_i+0x164>
 8005828:	3501      	adds	r5, #1
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	9903      	ldr	r1, [sp, #12]
 800582e:	1a5b      	subs	r3, r3, r1
 8005830:	42ab      	cmp	r3, r5
 8005832:	dcf2      	bgt.n	800581a <_printf_i+0x21e>
 8005834:	e7eb      	b.n	800580e <_printf_i+0x212>
 8005836:	2500      	movs	r5, #0
 8005838:	f104 0619 	add.w	r6, r4, #25
 800583c:	e7f5      	b.n	800582a <_printf_i+0x22e>
 800583e:	bf00      	nop
 8005840:	08007d0a 	.word	0x08007d0a
 8005844:	08007d1b 	.word	0x08007d1b

08005848 <siprintf>:
 8005848:	b40e      	push	{r1, r2, r3}
 800584a:	b500      	push	{lr}
 800584c:	b09c      	sub	sp, #112	; 0x70
 800584e:	ab1d      	add	r3, sp, #116	; 0x74
 8005850:	9002      	str	r0, [sp, #8]
 8005852:	9006      	str	r0, [sp, #24]
 8005854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005858:	4809      	ldr	r0, [pc, #36]	; (8005880 <siprintf+0x38>)
 800585a:	9107      	str	r1, [sp, #28]
 800585c:	9104      	str	r1, [sp, #16]
 800585e:	4909      	ldr	r1, [pc, #36]	; (8005884 <siprintf+0x3c>)
 8005860:	f853 2b04 	ldr.w	r2, [r3], #4
 8005864:	9105      	str	r1, [sp, #20]
 8005866:	6800      	ldr	r0, [r0, #0]
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	a902      	add	r1, sp, #8
 800586c:	f001 fb32 	bl	8006ed4 <_svfiprintf_r>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	b01c      	add	sp, #112	; 0x70
 8005878:	f85d eb04 	ldr.w	lr, [sp], #4
 800587c:	b003      	add	sp, #12
 800587e:	4770      	bx	lr
 8005880:	2000000c 	.word	0x2000000c
 8005884:	ffff0208 	.word	0xffff0208

08005888 <quorem>:
 8005888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	6903      	ldr	r3, [r0, #16]
 800588e:	690c      	ldr	r4, [r1, #16]
 8005890:	42a3      	cmp	r3, r4
 8005892:	4607      	mov	r7, r0
 8005894:	f2c0 8081 	blt.w	800599a <quorem+0x112>
 8005898:	3c01      	subs	r4, #1
 800589a:	f101 0814 	add.w	r8, r1, #20
 800589e:	f100 0514 	add.w	r5, r0, #20
 80058a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058b0:	3301      	adds	r3, #1
 80058b2:	429a      	cmp	r2, r3
 80058b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80058c0:	d331      	bcc.n	8005926 <quorem+0x9e>
 80058c2:	f04f 0e00 	mov.w	lr, #0
 80058c6:	4640      	mov	r0, r8
 80058c8:	46ac      	mov	ip, r5
 80058ca:	46f2      	mov	sl, lr
 80058cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80058d0:	b293      	uxth	r3, r2
 80058d2:	fb06 e303 	mla	r3, r6, r3, lr
 80058d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80058da:	b29b      	uxth	r3, r3
 80058dc:	ebaa 0303 	sub.w	r3, sl, r3
 80058e0:	0c12      	lsrs	r2, r2, #16
 80058e2:	f8dc a000 	ldr.w	sl, [ip]
 80058e6:	fb06 e202 	mla	r2, r6, r2, lr
 80058ea:	fa13 f38a 	uxtah	r3, r3, sl
 80058ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058f2:	fa1f fa82 	uxth.w	sl, r2
 80058f6:	f8dc 2000 	ldr.w	r2, [ip]
 80058fa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80058fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005902:	b29b      	uxth	r3, r3
 8005904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005908:	4581      	cmp	r9, r0
 800590a:	f84c 3b04 	str.w	r3, [ip], #4
 800590e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005912:	d2db      	bcs.n	80058cc <quorem+0x44>
 8005914:	f855 300b 	ldr.w	r3, [r5, fp]
 8005918:	b92b      	cbnz	r3, 8005926 <quorem+0x9e>
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	3b04      	subs	r3, #4
 800591e:	429d      	cmp	r5, r3
 8005920:	461a      	mov	r2, r3
 8005922:	d32e      	bcc.n	8005982 <quorem+0xfa>
 8005924:	613c      	str	r4, [r7, #16]
 8005926:	4638      	mov	r0, r7
 8005928:	f001 f8be 	bl	8006aa8 <__mcmp>
 800592c:	2800      	cmp	r0, #0
 800592e:	db24      	blt.n	800597a <quorem+0xf2>
 8005930:	3601      	adds	r6, #1
 8005932:	4628      	mov	r0, r5
 8005934:	f04f 0c00 	mov.w	ip, #0
 8005938:	f858 2b04 	ldr.w	r2, [r8], #4
 800593c:	f8d0 e000 	ldr.w	lr, [r0]
 8005940:	b293      	uxth	r3, r2
 8005942:	ebac 0303 	sub.w	r3, ip, r3
 8005946:	0c12      	lsrs	r2, r2, #16
 8005948:	fa13 f38e 	uxtah	r3, r3, lr
 800594c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005950:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800595a:	45c1      	cmp	r9, r8
 800595c:	f840 3b04 	str.w	r3, [r0], #4
 8005960:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005964:	d2e8      	bcs.n	8005938 <quorem+0xb0>
 8005966:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800596a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800596e:	b922      	cbnz	r2, 800597a <quorem+0xf2>
 8005970:	3b04      	subs	r3, #4
 8005972:	429d      	cmp	r5, r3
 8005974:	461a      	mov	r2, r3
 8005976:	d30a      	bcc.n	800598e <quorem+0x106>
 8005978:	613c      	str	r4, [r7, #16]
 800597a:	4630      	mov	r0, r6
 800597c:	b003      	add	sp, #12
 800597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	3b04      	subs	r3, #4
 8005986:	2a00      	cmp	r2, #0
 8005988:	d1cc      	bne.n	8005924 <quorem+0x9c>
 800598a:	3c01      	subs	r4, #1
 800598c:	e7c7      	b.n	800591e <quorem+0x96>
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	3b04      	subs	r3, #4
 8005992:	2a00      	cmp	r2, #0
 8005994:	d1f0      	bne.n	8005978 <quorem+0xf0>
 8005996:	3c01      	subs	r4, #1
 8005998:	e7eb      	b.n	8005972 <quorem+0xea>
 800599a:	2000      	movs	r0, #0
 800599c:	e7ee      	b.n	800597c <quorem+0xf4>
	...

080059a0 <_dtoa_r>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	ed2d 8b02 	vpush	{d8}
 80059a8:	ec57 6b10 	vmov	r6, r7, d0
 80059ac:	b095      	sub	sp, #84	; 0x54
 80059ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80059b4:	9105      	str	r1, [sp, #20]
 80059b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80059ba:	4604      	mov	r4, r0
 80059bc:	9209      	str	r2, [sp, #36]	; 0x24
 80059be:	930f      	str	r3, [sp, #60]	; 0x3c
 80059c0:	b975      	cbnz	r5, 80059e0 <_dtoa_r+0x40>
 80059c2:	2010      	movs	r0, #16
 80059c4:	f000 fddc 	bl	8006580 <malloc>
 80059c8:	4602      	mov	r2, r0
 80059ca:	6260      	str	r0, [r4, #36]	; 0x24
 80059cc:	b920      	cbnz	r0, 80059d8 <_dtoa_r+0x38>
 80059ce:	4bb2      	ldr	r3, [pc, #712]	; (8005c98 <_dtoa_r+0x2f8>)
 80059d0:	21ea      	movs	r1, #234	; 0xea
 80059d2:	48b2      	ldr	r0, [pc, #712]	; (8005c9c <_dtoa_r+0x2fc>)
 80059d4:	f001 fb8e 	bl	80070f4 <__assert_func>
 80059d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059dc:	6005      	str	r5, [r0, #0]
 80059de:	60c5      	str	r5, [r0, #12]
 80059e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	b151      	cbz	r1, 80059fc <_dtoa_r+0x5c>
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	604a      	str	r2, [r1, #4]
 80059ea:	2301      	movs	r3, #1
 80059ec:	4093      	lsls	r3, r2
 80059ee:	608b      	str	r3, [r1, #8]
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 fe1b 	bl	800662c <_Bfree>
 80059f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	1e3b      	subs	r3, r7, #0
 80059fe:	bfb9      	ittee	lt
 8005a00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a04:	9303      	strlt	r3, [sp, #12]
 8005a06:	2300      	movge	r3, #0
 8005a08:	f8c8 3000 	strge.w	r3, [r8]
 8005a0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005a10:	4ba3      	ldr	r3, [pc, #652]	; (8005ca0 <_dtoa_r+0x300>)
 8005a12:	bfbc      	itt	lt
 8005a14:	2201      	movlt	r2, #1
 8005a16:	f8c8 2000 	strlt.w	r2, [r8]
 8005a1a:	ea33 0309 	bics.w	r3, r3, r9
 8005a1e:	d11b      	bne.n	8005a58 <_dtoa_r+0xb8>
 8005a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a22:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a2c:	4333      	orrs	r3, r6
 8005a2e:	f000 857a 	beq.w	8006526 <_dtoa_r+0xb86>
 8005a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a34:	b963      	cbnz	r3, 8005a50 <_dtoa_r+0xb0>
 8005a36:	4b9b      	ldr	r3, [pc, #620]	; (8005ca4 <_dtoa_r+0x304>)
 8005a38:	e024      	b.n	8005a84 <_dtoa_r+0xe4>
 8005a3a:	4b9b      	ldr	r3, [pc, #620]	; (8005ca8 <_dtoa_r+0x308>)
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	9800      	ldr	r0, [sp, #0]
 8005a46:	b015      	add	sp, #84	; 0x54
 8005a48:	ecbd 8b02 	vpop	{d8}
 8005a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a50:	4b94      	ldr	r3, [pc, #592]	; (8005ca4 <_dtoa_r+0x304>)
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	3303      	adds	r3, #3
 8005a56:	e7f3      	b.n	8005a40 <_dtoa_r+0xa0>
 8005a58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	ec51 0b17 	vmov	r0, r1, d7
 8005a62:	2300      	movs	r3, #0
 8005a64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005a68:	f7fb f836 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	b158      	cbz	r0, 8005a88 <_dtoa_r+0xe8>
 8005a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a72:	2301      	movs	r3, #1
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 8551 	beq.w	8006520 <_dtoa_r+0xb80>
 8005a7e:	488b      	ldr	r0, [pc, #556]	; (8005cac <_dtoa_r+0x30c>)
 8005a80:	6018      	str	r0, [r3, #0]
 8005a82:	1e43      	subs	r3, r0, #1
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	e7dd      	b.n	8005a44 <_dtoa_r+0xa4>
 8005a88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005a8c:	aa12      	add	r2, sp, #72	; 0x48
 8005a8e:	a913      	add	r1, sp, #76	; 0x4c
 8005a90:	4620      	mov	r0, r4
 8005a92:	f001 f8ad 	bl	8006bf0 <__d2b>
 8005a96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a9a:	4683      	mov	fp, r0
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	d07c      	beq.n	8005b9a <_dtoa_r+0x1fa>
 8005aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aa2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aaa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005aae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ab2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ab6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005aba:	4b7d      	ldr	r3, [pc, #500]	; (8005cb0 <_dtoa_r+0x310>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	4630      	mov	r0, r6
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	f7fa fbe9 	bl	8000298 <__aeabi_dsub>
 8005ac6:	a36e      	add	r3, pc, #440	; (adr r3, 8005c80 <_dtoa_r+0x2e0>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa fd9c 	bl	8000608 <__aeabi_dmul>
 8005ad0:	a36d      	add	r3, pc, #436	; (adr r3, 8005c88 <_dtoa_r+0x2e8>)
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f7fa fbe1 	bl	800029c <__adddf3>
 8005ada:	4606      	mov	r6, r0
 8005adc:	4628      	mov	r0, r5
 8005ade:	460f      	mov	r7, r1
 8005ae0:	f7fa fd28 	bl	8000534 <__aeabi_i2d>
 8005ae4:	a36a      	add	r3, pc, #424	; (adr r3, 8005c90 <_dtoa_r+0x2f0>)
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	f7fa fd8d 	bl	8000608 <__aeabi_dmul>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4630      	mov	r0, r6
 8005af4:	4639      	mov	r1, r7
 8005af6:	f7fa fbd1 	bl	800029c <__adddf3>
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	f7fb f833 	bl	8000b68 <__aeabi_d2iz>
 8005b02:	2200      	movs	r2, #0
 8005b04:	4682      	mov	sl, r0
 8005b06:	2300      	movs	r3, #0
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	f7fa ffee 	bl	8000aec <__aeabi_dcmplt>
 8005b10:	b148      	cbz	r0, 8005b26 <_dtoa_r+0x186>
 8005b12:	4650      	mov	r0, sl
 8005b14:	f7fa fd0e 	bl	8000534 <__aeabi_i2d>
 8005b18:	4632      	mov	r2, r6
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	f7fa ffdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b20:	b908      	cbnz	r0, 8005b26 <_dtoa_r+0x186>
 8005b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b26:	f1ba 0f16 	cmp.w	sl, #22
 8005b2a:	d854      	bhi.n	8005bd6 <_dtoa_r+0x236>
 8005b2c:	4b61      	ldr	r3, [pc, #388]	; (8005cb4 <_dtoa_r+0x314>)
 8005b2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b3a:	f7fa ffd7 	bl	8000aec <__aeabi_dcmplt>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d04b      	beq.n	8005bda <_dtoa_r+0x23a>
 8005b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b46:	2300      	movs	r3, #0
 8005b48:	930e      	str	r3, [sp, #56]	; 0x38
 8005b4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b4c:	1b5d      	subs	r5, r3, r5
 8005b4e:	1e6b      	subs	r3, r5, #1
 8005b50:	9304      	str	r3, [sp, #16]
 8005b52:	bf43      	ittte	mi
 8005b54:	2300      	movmi	r3, #0
 8005b56:	f1c5 0801 	rsbmi	r8, r5, #1
 8005b5a:	9304      	strmi	r3, [sp, #16]
 8005b5c:	f04f 0800 	movpl.w	r8, #0
 8005b60:	f1ba 0f00 	cmp.w	sl, #0
 8005b64:	db3b      	blt.n	8005bde <_dtoa_r+0x23e>
 8005b66:	9b04      	ldr	r3, [sp, #16]
 8005b68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005b6c:	4453      	add	r3, sl
 8005b6e:	9304      	str	r3, [sp, #16]
 8005b70:	2300      	movs	r3, #0
 8005b72:	9306      	str	r3, [sp, #24]
 8005b74:	9b05      	ldr	r3, [sp, #20]
 8005b76:	2b09      	cmp	r3, #9
 8005b78:	d869      	bhi.n	8005c4e <_dtoa_r+0x2ae>
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	bfc4      	itt	gt
 8005b7e:	3b04      	subgt	r3, #4
 8005b80:	9305      	strgt	r3, [sp, #20]
 8005b82:	9b05      	ldr	r3, [sp, #20]
 8005b84:	f1a3 0302 	sub.w	r3, r3, #2
 8005b88:	bfcc      	ite	gt
 8005b8a:	2500      	movgt	r5, #0
 8005b8c:	2501      	movle	r5, #1
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d869      	bhi.n	8005c66 <_dtoa_r+0x2c6>
 8005b92:	e8df f003 	tbb	[pc, r3]
 8005b96:	4e2c      	.short	0x4e2c
 8005b98:	5a4c      	.short	0x5a4c
 8005b9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b9e:	441d      	add	r5, r3
 8005ba0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	bfc1      	itttt	gt
 8005ba8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005bb0:	fa09 f303 	lslgt.w	r3, r9, r3
 8005bb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005bb8:	bfda      	itte	le
 8005bba:	f1c3 0320 	rsble	r3, r3, #32
 8005bbe:	fa06 f003 	lslle.w	r0, r6, r3
 8005bc2:	4318      	orrgt	r0, r3
 8005bc4:	f7fa fca6 	bl	8000514 <__aeabi_ui2d>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4606      	mov	r6, r0
 8005bcc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005bd0:	3d01      	subs	r5, #1
 8005bd2:	9310      	str	r3, [sp, #64]	; 0x40
 8005bd4:	e771      	b.n	8005aba <_dtoa_r+0x11a>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e7b6      	b.n	8005b48 <_dtoa_r+0x1a8>
 8005bda:	900e      	str	r0, [sp, #56]	; 0x38
 8005bdc:	e7b5      	b.n	8005b4a <_dtoa_r+0x1aa>
 8005bde:	f1ca 0300 	rsb	r3, sl, #0
 8005be2:	9306      	str	r3, [sp, #24]
 8005be4:	2300      	movs	r3, #0
 8005be6:	eba8 080a 	sub.w	r8, r8, sl
 8005bea:	930d      	str	r3, [sp, #52]	; 0x34
 8005bec:	e7c2      	b.n	8005b74 <_dtoa_r+0x1d4>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9308      	str	r3, [sp, #32]
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	dc39      	bgt.n	8005c6c <_dtoa_r+0x2cc>
 8005bf8:	f04f 0901 	mov.w	r9, #1
 8005bfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c00:	464b      	mov	r3, r9
 8005c02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005c06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005c08:	2200      	movs	r2, #0
 8005c0a:	6042      	str	r2, [r0, #4]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	f102 0614 	add.w	r6, r2, #20
 8005c12:	429e      	cmp	r6, r3
 8005c14:	6841      	ldr	r1, [r0, #4]
 8005c16:	d92f      	bls.n	8005c78 <_dtoa_r+0x2d8>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fcc7 	bl	80065ac <_Balloc>
 8005c1e:	9000      	str	r0, [sp, #0]
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d14b      	bne.n	8005cbc <_dtoa_r+0x31c>
 8005c24:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <_dtoa_r+0x318>)
 8005c26:	4602      	mov	r2, r0
 8005c28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c2c:	e6d1      	b.n	80059d2 <_dtoa_r+0x32>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e7de      	b.n	8005bf0 <_dtoa_r+0x250>
 8005c32:	2300      	movs	r3, #0
 8005c34:	9308      	str	r3, [sp, #32]
 8005c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c38:	eb0a 0903 	add.w	r9, sl, r3
 8005c3c:	f109 0301 	add.w	r3, r9, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	bfb8      	it	lt
 8005c46:	2301      	movlt	r3, #1
 8005c48:	e7dd      	b.n	8005c06 <_dtoa_r+0x266>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e7f2      	b.n	8005c34 <_dtoa_r+0x294>
 8005c4e:	2501      	movs	r5, #1
 8005c50:	2300      	movs	r3, #0
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	9508      	str	r5, [sp, #32]
 8005c56:	f04f 39ff 	mov.w	r9, #4294967295
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c60:	2312      	movs	r3, #18
 8005c62:	9209      	str	r2, [sp, #36]	; 0x24
 8005c64:	e7cf      	b.n	8005c06 <_dtoa_r+0x266>
 8005c66:	2301      	movs	r3, #1
 8005c68:	9308      	str	r3, [sp, #32]
 8005c6a:	e7f4      	b.n	8005c56 <_dtoa_r+0x2b6>
 8005c6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005c70:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c74:	464b      	mov	r3, r9
 8005c76:	e7c6      	b.n	8005c06 <_dtoa_r+0x266>
 8005c78:	3101      	adds	r1, #1
 8005c7a:	6041      	str	r1, [r0, #4]
 8005c7c:	0052      	lsls	r2, r2, #1
 8005c7e:	e7c6      	b.n	8005c0e <_dtoa_r+0x26e>
 8005c80:	636f4361 	.word	0x636f4361
 8005c84:	3fd287a7 	.word	0x3fd287a7
 8005c88:	8b60c8b3 	.word	0x8b60c8b3
 8005c8c:	3fc68a28 	.word	0x3fc68a28
 8005c90:	509f79fb 	.word	0x509f79fb
 8005c94:	3fd34413 	.word	0x3fd34413
 8005c98:	08007d39 	.word	0x08007d39
 8005c9c:	08007d50 	.word	0x08007d50
 8005ca0:	7ff00000 	.word	0x7ff00000
 8005ca4:	08007d35 	.word	0x08007d35
 8005ca8:	08007d2c 	.word	0x08007d2c
 8005cac:	08007d09 	.word	0x08007d09
 8005cb0:	3ff80000 	.word	0x3ff80000
 8005cb4:	08007e48 	.word	0x08007e48
 8005cb8:	08007daf 	.word	0x08007daf
 8005cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cbe:	9a00      	ldr	r2, [sp, #0]
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	9b01      	ldr	r3, [sp, #4]
 8005cc4:	2b0e      	cmp	r3, #14
 8005cc6:	f200 80ad 	bhi.w	8005e24 <_dtoa_r+0x484>
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	f000 80aa 	beq.w	8005e24 <_dtoa_r+0x484>
 8005cd0:	f1ba 0f00 	cmp.w	sl, #0
 8005cd4:	dd36      	ble.n	8005d44 <_dtoa_r+0x3a4>
 8005cd6:	4ac3      	ldr	r2, [pc, #780]	; (8005fe4 <_dtoa_r+0x644>)
 8005cd8:	f00a 030f 	and.w	r3, sl, #15
 8005cdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ce0:	ed93 7b00 	vldr	d7, [r3]
 8005ce4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005ce8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005cec:	eeb0 8a47 	vmov.f32	s16, s14
 8005cf0:	eef0 8a67 	vmov.f32	s17, s15
 8005cf4:	d016      	beq.n	8005d24 <_dtoa_r+0x384>
 8005cf6:	4bbc      	ldr	r3, [pc, #752]	; (8005fe8 <_dtoa_r+0x648>)
 8005cf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d00:	f7fa fdac 	bl	800085c <__aeabi_ddiv>
 8005d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d08:	f007 070f 	and.w	r7, r7, #15
 8005d0c:	2503      	movs	r5, #3
 8005d0e:	4eb6      	ldr	r6, [pc, #728]	; (8005fe8 <_dtoa_r+0x648>)
 8005d10:	b957      	cbnz	r7, 8005d28 <_dtoa_r+0x388>
 8005d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d16:	ec53 2b18 	vmov	r2, r3, d8
 8005d1a:	f7fa fd9f 	bl	800085c <__aeabi_ddiv>
 8005d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d22:	e029      	b.n	8005d78 <_dtoa_r+0x3d8>
 8005d24:	2502      	movs	r5, #2
 8005d26:	e7f2      	b.n	8005d0e <_dtoa_r+0x36e>
 8005d28:	07f9      	lsls	r1, r7, #31
 8005d2a:	d508      	bpl.n	8005d3e <_dtoa_r+0x39e>
 8005d2c:	ec51 0b18 	vmov	r0, r1, d8
 8005d30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d34:	f7fa fc68 	bl	8000608 <__aeabi_dmul>
 8005d38:	ec41 0b18 	vmov	d8, r0, r1
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	107f      	asrs	r7, r7, #1
 8005d40:	3608      	adds	r6, #8
 8005d42:	e7e5      	b.n	8005d10 <_dtoa_r+0x370>
 8005d44:	f000 80a6 	beq.w	8005e94 <_dtoa_r+0x4f4>
 8005d48:	f1ca 0600 	rsb	r6, sl, #0
 8005d4c:	4ba5      	ldr	r3, [pc, #660]	; (8005fe4 <_dtoa_r+0x644>)
 8005d4e:	4fa6      	ldr	r7, [pc, #664]	; (8005fe8 <_dtoa_r+0x648>)
 8005d50:	f006 020f 	and.w	r2, r6, #15
 8005d54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d60:	f7fa fc52 	bl	8000608 <__aeabi_dmul>
 8005d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d68:	1136      	asrs	r6, r6, #4
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2502      	movs	r5, #2
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	f040 8085 	bne.w	8005e7e <_dtoa_r+0x4de>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1d2      	bne.n	8005d1e <_dtoa_r+0x37e>
 8005d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 808c 	beq.w	8005e98 <_dtoa_r+0x4f8>
 8005d80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d84:	4b99      	ldr	r3, [pc, #612]	; (8005fec <_dtoa_r+0x64c>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	4630      	mov	r0, r6
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	f7fa feae 	bl	8000aec <__aeabi_dcmplt>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f000 8081 	beq.w	8005e98 <_dtoa_r+0x4f8>
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d07d      	beq.n	8005e98 <_dtoa_r+0x4f8>
 8005d9c:	f1b9 0f00 	cmp.w	r9, #0
 8005da0:	dd3c      	ble.n	8005e1c <_dtoa_r+0x47c>
 8005da2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005da6:	9307      	str	r3, [sp, #28]
 8005da8:	2200      	movs	r2, #0
 8005daa:	4b91      	ldr	r3, [pc, #580]	; (8005ff0 <_dtoa_r+0x650>)
 8005dac:	4630      	mov	r0, r6
 8005dae:	4639      	mov	r1, r7
 8005db0:	f7fa fc2a 	bl	8000608 <__aeabi_dmul>
 8005db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db8:	3501      	adds	r5, #1
 8005dba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005dbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f7fa fbb6 	bl	8000534 <__aeabi_i2d>
 8005dc8:	4632      	mov	r2, r6
 8005dca:	463b      	mov	r3, r7
 8005dcc:	f7fa fc1c 	bl	8000608 <__aeabi_dmul>
 8005dd0:	4b88      	ldr	r3, [pc, #544]	; (8005ff4 <_dtoa_r+0x654>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f7fa fa62 	bl	800029c <__adddf3>
 8005dd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de0:	9303      	str	r3, [sp, #12]
 8005de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d15c      	bne.n	8005ea2 <_dtoa_r+0x502>
 8005de8:	4b83      	ldr	r3, [pc, #524]	; (8005ff8 <_dtoa_r+0x658>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	4630      	mov	r0, r6
 8005dee:	4639      	mov	r1, r7
 8005df0:	f7fa fa52 	bl	8000298 <__aeabi_dsub>
 8005df4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	f7fa fe94 	bl	8000b28 <__aeabi_dcmpgt>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f040 8296 	bne.w	8006332 <_dtoa_r+0x992>
 8005e06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7fa fe6b 	bl	8000aec <__aeabi_dcmplt>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f040 8288 	bne.w	800632c <_dtoa_r+0x98c>
 8005e1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f2c0 8158 	blt.w	80060dc <_dtoa_r+0x73c>
 8005e2c:	f1ba 0f0e 	cmp.w	sl, #14
 8005e30:	f300 8154 	bgt.w	80060dc <_dtoa_r+0x73c>
 8005e34:	4b6b      	ldr	r3, [pc, #428]	; (8005fe4 <_dtoa_r+0x644>)
 8005e36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f280 80e3 	bge.w	800600c <_dtoa_r+0x66c>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f300 80df 	bgt.w	800600c <_dtoa_r+0x66c>
 8005e4e:	f040 826d 	bne.w	800632c <_dtoa_r+0x98c>
 8005e52:	4b69      	ldr	r3, [pc, #420]	; (8005ff8 <_dtoa_r+0x658>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	4640      	mov	r0, r8
 8005e58:	4649      	mov	r1, r9
 8005e5a:	f7fa fbd5 	bl	8000608 <__aeabi_dmul>
 8005e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e62:	f7fa fe57 	bl	8000b14 <__aeabi_dcmpge>
 8005e66:	9e01      	ldr	r6, [sp, #4]
 8005e68:	4637      	mov	r7, r6
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	f040 8243 	bne.w	80062f6 <_dtoa_r+0x956>
 8005e70:	9d00      	ldr	r5, [sp, #0]
 8005e72:	2331      	movs	r3, #49	; 0x31
 8005e74:	f805 3b01 	strb.w	r3, [r5], #1
 8005e78:	f10a 0a01 	add.w	sl, sl, #1
 8005e7c:	e23f      	b.n	80062fe <_dtoa_r+0x95e>
 8005e7e:	07f2      	lsls	r2, r6, #31
 8005e80:	d505      	bpl.n	8005e8e <_dtoa_r+0x4ee>
 8005e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e86:	f7fa fbbf 	bl	8000608 <__aeabi_dmul>
 8005e8a:	3501      	adds	r5, #1
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	1076      	asrs	r6, r6, #1
 8005e90:	3708      	adds	r7, #8
 8005e92:	e76c      	b.n	8005d6e <_dtoa_r+0x3ce>
 8005e94:	2502      	movs	r5, #2
 8005e96:	e76f      	b.n	8005d78 <_dtoa_r+0x3d8>
 8005e98:	9b01      	ldr	r3, [sp, #4]
 8005e9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005ea0:	e78d      	b.n	8005dbe <_dtoa_r+0x41e>
 8005ea2:	9900      	ldr	r1, [sp, #0]
 8005ea4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ea8:	4b4e      	ldr	r3, [pc, #312]	; (8005fe4 <_dtoa_r+0x644>)
 8005eaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005eae:	4401      	add	r1, r0
 8005eb0:	9102      	str	r1, [sp, #8]
 8005eb2:	9908      	ldr	r1, [sp, #32]
 8005eb4:	eeb0 8a47 	vmov.f32	s16, s14
 8005eb8:	eef0 8a67 	vmov.f32	s17, s15
 8005ebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ec0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d045      	beq.n	8005f54 <_dtoa_r+0x5b4>
 8005ec8:	494c      	ldr	r1, [pc, #304]	; (8005ffc <_dtoa_r+0x65c>)
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f7fa fcc6 	bl	800085c <__aeabi_ddiv>
 8005ed0:	ec53 2b18 	vmov	r2, r3, d8
 8005ed4:	f7fa f9e0 	bl	8000298 <__aeabi_dsub>
 8005ed8:	9d00      	ldr	r5, [sp, #0]
 8005eda:	ec41 0b18 	vmov	d8, r0, r1
 8005ede:	4639      	mov	r1, r7
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7fa fe41 	bl	8000b68 <__aeabi_d2iz>
 8005ee6:	900c      	str	r0, [sp, #48]	; 0x30
 8005ee8:	f7fa fb24 	bl	8000534 <__aeabi_i2d>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa f9d0 	bl	8000298 <__aeabi_dsub>
 8005ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005efa:	3330      	adds	r3, #48	; 0x30
 8005efc:	f805 3b01 	strb.w	r3, [r5], #1
 8005f00:	ec53 2b18 	vmov	r2, r3, d8
 8005f04:	4606      	mov	r6, r0
 8005f06:	460f      	mov	r7, r1
 8005f08:	f7fa fdf0 	bl	8000aec <__aeabi_dcmplt>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d165      	bne.n	8005fdc <_dtoa_r+0x63c>
 8005f10:	4632      	mov	r2, r6
 8005f12:	463b      	mov	r3, r7
 8005f14:	4935      	ldr	r1, [pc, #212]	; (8005fec <_dtoa_r+0x64c>)
 8005f16:	2000      	movs	r0, #0
 8005f18:	f7fa f9be 	bl	8000298 <__aeabi_dsub>
 8005f1c:	ec53 2b18 	vmov	r2, r3, d8
 8005f20:	f7fa fde4 	bl	8000aec <__aeabi_dcmplt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f040 80b9 	bne.w	800609c <_dtoa_r+0x6fc>
 8005f2a:	9b02      	ldr	r3, [sp, #8]
 8005f2c:	429d      	cmp	r5, r3
 8005f2e:	f43f af75 	beq.w	8005e1c <_dtoa_r+0x47c>
 8005f32:	4b2f      	ldr	r3, [pc, #188]	; (8005ff0 <_dtoa_r+0x650>)
 8005f34:	ec51 0b18 	vmov	r0, r1, d8
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f7fa fb65 	bl	8000608 <__aeabi_dmul>
 8005f3e:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <_dtoa_r+0x650>)
 8005f40:	ec41 0b18 	vmov	d8, r0, r1
 8005f44:	2200      	movs	r2, #0
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa fb5d 	bl	8000608 <__aeabi_dmul>
 8005f4e:	4606      	mov	r6, r0
 8005f50:	460f      	mov	r7, r1
 8005f52:	e7c4      	b.n	8005ede <_dtoa_r+0x53e>
 8005f54:	ec51 0b17 	vmov	r0, r1, d7
 8005f58:	f7fa fb56 	bl	8000608 <__aeabi_dmul>
 8005f5c:	9b02      	ldr	r3, [sp, #8]
 8005f5e:	9d00      	ldr	r5, [sp, #0]
 8005f60:	930c      	str	r3, [sp, #48]	; 0x30
 8005f62:	ec41 0b18 	vmov	d8, r0, r1
 8005f66:	4639      	mov	r1, r7
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7fa fdfd 	bl	8000b68 <__aeabi_d2iz>
 8005f6e:	9011      	str	r0, [sp, #68]	; 0x44
 8005f70:	f7fa fae0 	bl	8000534 <__aeabi_i2d>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa f98c 	bl	8000298 <__aeabi_dsub>
 8005f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f82:	3330      	adds	r3, #48	; 0x30
 8005f84:	f805 3b01 	strb.w	r3, [r5], #1
 8005f88:	9b02      	ldr	r3, [sp, #8]
 8005f8a:	429d      	cmp	r5, r3
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	460f      	mov	r7, r1
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	d134      	bne.n	8006000 <_dtoa_r+0x660>
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <_dtoa_r+0x65c>)
 8005f98:	ec51 0b18 	vmov	r0, r1, d8
 8005f9c:	f7fa f97e 	bl	800029c <__adddf3>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	f7fa fdbe 	bl	8000b28 <__aeabi_dcmpgt>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d175      	bne.n	800609c <_dtoa_r+0x6fc>
 8005fb0:	ec53 2b18 	vmov	r2, r3, d8
 8005fb4:	4911      	ldr	r1, [pc, #68]	; (8005ffc <_dtoa_r+0x65c>)
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f7fa f96e 	bl	8000298 <__aeabi_dsub>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa fd92 	bl	8000aec <__aeabi_dcmplt>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f43f af27 	beq.w	8005e1c <_dtoa_r+0x47c>
 8005fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fd0:	1e6b      	subs	r3, r5, #1
 8005fd2:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fd8:	2b30      	cmp	r3, #48	; 0x30
 8005fda:	d0f8      	beq.n	8005fce <_dtoa_r+0x62e>
 8005fdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005fe0:	e04a      	b.n	8006078 <_dtoa_r+0x6d8>
 8005fe2:	bf00      	nop
 8005fe4:	08007e48 	.word	0x08007e48
 8005fe8:	08007e20 	.word	0x08007e20
 8005fec:	3ff00000 	.word	0x3ff00000
 8005ff0:	40240000 	.word	0x40240000
 8005ff4:	401c0000 	.word	0x401c0000
 8005ff8:	40140000 	.word	0x40140000
 8005ffc:	3fe00000 	.word	0x3fe00000
 8006000:	4baf      	ldr	r3, [pc, #700]	; (80062c0 <_dtoa_r+0x920>)
 8006002:	f7fa fb01 	bl	8000608 <__aeabi_dmul>
 8006006:	4606      	mov	r6, r0
 8006008:	460f      	mov	r7, r1
 800600a:	e7ac      	b.n	8005f66 <_dtoa_r+0x5c6>
 800600c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006010:	9d00      	ldr	r5, [sp, #0]
 8006012:	4642      	mov	r2, r8
 8006014:	464b      	mov	r3, r9
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa fc1f 	bl	800085c <__aeabi_ddiv>
 800601e:	f7fa fda3 	bl	8000b68 <__aeabi_d2iz>
 8006022:	9002      	str	r0, [sp, #8]
 8006024:	f7fa fa86 	bl	8000534 <__aeabi_i2d>
 8006028:	4642      	mov	r2, r8
 800602a:	464b      	mov	r3, r9
 800602c:	f7fa faec 	bl	8000608 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4630      	mov	r0, r6
 8006036:	4639      	mov	r1, r7
 8006038:	f7fa f92e 	bl	8000298 <__aeabi_dsub>
 800603c:	9e02      	ldr	r6, [sp, #8]
 800603e:	9f01      	ldr	r7, [sp, #4]
 8006040:	3630      	adds	r6, #48	; 0x30
 8006042:	f805 6b01 	strb.w	r6, [r5], #1
 8006046:	9e00      	ldr	r6, [sp, #0]
 8006048:	1bae      	subs	r6, r5, r6
 800604a:	42b7      	cmp	r7, r6
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	d137      	bne.n	80060c2 <_dtoa_r+0x722>
 8006052:	f7fa f923 	bl	800029c <__adddf3>
 8006056:	4642      	mov	r2, r8
 8006058:	464b      	mov	r3, r9
 800605a:	4606      	mov	r6, r0
 800605c:	460f      	mov	r7, r1
 800605e:	f7fa fd63 	bl	8000b28 <__aeabi_dcmpgt>
 8006062:	b9c8      	cbnz	r0, 8006098 <_dtoa_r+0x6f8>
 8006064:	4642      	mov	r2, r8
 8006066:	464b      	mov	r3, r9
 8006068:	4630      	mov	r0, r6
 800606a:	4639      	mov	r1, r7
 800606c:	f7fa fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 8006070:	b110      	cbz	r0, 8006078 <_dtoa_r+0x6d8>
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	07d9      	lsls	r1, r3, #31
 8006076:	d40f      	bmi.n	8006098 <_dtoa_r+0x6f8>
 8006078:	4620      	mov	r0, r4
 800607a:	4659      	mov	r1, fp
 800607c:	f000 fad6 	bl	800662c <_Bfree>
 8006080:	2300      	movs	r3, #0
 8006082:	702b      	strb	r3, [r5, #0]
 8006084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006086:	f10a 0001 	add.w	r0, sl, #1
 800608a:	6018      	str	r0, [r3, #0]
 800608c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800608e:	2b00      	cmp	r3, #0
 8006090:	f43f acd8 	beq.w	8005a44 <_dtoa_r+0xa4>
 8006094:	601d      	str	r5, [r3, #0]
 8006096:	e4d5      	b.n	8005a44 <_dtoa_r+0xa4>
 8006098:	f8cd a01c 	str.w	sl, [sp, #28]
 800609c:	462b      	mov	r3, r5
 800609e:	461d      	mov	r5, r3
 80060a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060a4:	2a39      	cmp	r2, #57	; 0x39
 80060a6:	d108      	bne.n	80060ba <_dtoa_r+0x71a>
 80060a8:	9a00      	ldr	r2, [sp, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d1f7      	bne.n	800609e <_dtoa_r+0x6fe>
 80060ae:	9a07      	ldr	r2, [sp, #28]
 80060b0:	9900      	ldr	r1, [sp, #0]
 80060b2:	3201      	adds	r2, #1
 80060b4:	9207      	str	r2, [sp, #28]
 80060b6:	2230      	movs	r2, #48	; 0x30
 80060b8:	700a      	strb	r2, [r1, #0]
 80060ba:	781a      	ldrb	r2, [r3, #0]
 80060bc:	3201      	adds	r2, #1
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e78c      	b.n	8005fdc <_dtoa_r+0x63c>
 80060c2:	4b7f      	ldr	r3, [pc, #508]	; (80062c0 <_dtoa_r+0x920>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	f7fa fa9f 	bl	8000608 <__aeabi_dmul>
 80060ca:	2200      	movs	r2, #0
 80060cc:	2300      	movs	r3, #0
 80060ce:	4606      	mov	r6, r0
 80060d0:	460f      	mov	r7, r1
 80060d2:	f7fa fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d09b      	beq.n	8006012 <_dtoa_r+0x672>
 80060da:	e7cd      	b.n	8006078 <_dtoa_r+0x6d8>
 80060dc:	9a08      	ldr	r2, [sp, #32]
 80060de:	2a00      	cmp	r2, #0
 80060e0:	f000 80c4 	beq.w	800626c <_dtoa_r+0x8cc>
 80060e4:	9a05      	ldr	r2, [sp, #20]
 80060e6:	2a01      	cmp	r2, #1
 80060e8:	f300 80a8 	bgt.w	800623c <_dtoa_r+0x89c>
 80060ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060ee:	2a00      	cmp	r2, #0
 80060f0:	f000 80a0 	beq.w	8006234 <_dtoa_r+0x894>
 80060f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060f8:	9e06      	ldr	r6, [sp, #24]
 80060fa:	4645      	mov	r5, r8
 80060fc:	9a04      	ldr	r2, [sp, #16]
 80060fe:	2101      	movs	r1, #1
 8006100:	441a      	add	r2, r3
 8006102:	4620      	mov	r0, r4
 8006104:	4498      	add	r8, r3
 8006106:	9204      	str	r2, [sp, #16]
 8006108:	f000 fb4c 	bl	80067a4 <__i2b>
 800610c:	4607      	mov	r7, r0
 800610e:	2d00      	cmp	r5, #0
 8006110:	dd0b      	ble.n	800612a <_dtoa_r+0x78a>
 8006112:	9b04      	ldr	r3, [sp, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	dd08      	ble.n	800612a <_dtoa_r+0x78a>
 8006118:	42ab      	cmp	r3, r5
 800611a:	9a04      	ldr	r2, [sp, #16]
 800611c:	bfa8      	it	ge
 800611e:	462b      	movge	r3, r5
 8006120:	eba8 0803 	sub.w	r8, r8, r3
 8006124:	1aed      	subs	r5, r5, r3
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	9b06      	ldr	r3, [sp, #24]
 800612c:	b1fb      	cbz	r3, 800616e <_dtoa_r+0x7ce>
 800612e:	9b08      	ldr	r3, [sp, #32]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 809f 	beq.w	8006274 <_dtoa_r+0x8d4>
 8006136:	2e00      	cmp	r6, #0
 8006138:	dd11      	ble.n	800615e <_dtoa_r+0x7be>
 800613a:	4639      	mov	r1, r7
 800613c:	4632      	mov	r2, r6
 800613e:	4620      	mov	r0, r4
 8006140:	f000 fbec 	bl	800691c <__pow5mult>
 8006144:	465a      	mov	r2, fp
 8006146:	4601      	mov	r1, r0
 8006148:	4607      	mov	r7, r0
 800614a:	4620      	mov	r0, r4
 800614c:	f000 fb40 	bl	80067d0 <__multiply>
 8006150:	4659      	mov	r1, fp
 8006152:	9007      	str	r0, [sp, #28]
 8006154:	4620      	mov	r0, r4
 8006156:	f000 fa69 	bl	800662c <_Bfree>
 800615a:	9b07      	ldr	r3, [sp, #28]
 800615c:	469b      	mov	fp, r3
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	1b9a      	subs	r2, r3, r6
 8006162:	d004      	beq.n	800616e <_dtoa_r+0x7ce>
 8006164:	4659      	mov	r1, fp
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fbd8 	bl	800691c <__pow5mult>
 800616c:	4683      	mov	fp, r0
 800616e:	2101      	movs	r1, #1
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fb17 	bl	80067a4 <__i2b>
 8006176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006178:	2b00      	cmp	r3, #0
 800617a:	4606      	mov	r6, r0
 800617c:	dd7c      	ble.n	8006278 <_dtoa_r+0x8d8>
 800617e:	461a      	mov	r2, r3
 8006180:	4601      	mov	r1, r0
 8006182:	4620      	mov	r0, r4
 8006184:	f000 fbca 	bl	800691c <__pow5mult>
 8006188:	9b05      	ldr	r3, [sp, #20]
 800618a:	2b01      	cmp	r3, #1
 800618c:	4606      	mov	r6, r0
 800618e:	dd76      	ble.n	800627e <_dtoa_r+0x8de>
 8006190:	2300      	movs	r3, #0
 8006192:	9306      	str	r3, [sp, #24]
 8006194:	6933      	ldr	r3, [r6, #16]
 8006196:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800619a:	6918      	ldr	r0, [r3, #16]
 800619c:	f000 fab2 	bl	8006704 <__hi0bits>
 80061a0:	f1c0 0020 	rsb	r0, r0, #32
 80061a4:	9b04      	ldr	r3, [sp, #16]
 80061a6:	4418      	add	r0, r3
 80061a8:	f010 001f 	ands.w	r0, r0, #31
 80061ac:	f000 8086 	beq.w	80062bc <_dtoa_r+0x91c>
 80061b0:	f1c0 0320 	rsb	r3, r0, #32
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	dd7f      	ble.n	80062b8 <_dtoa_r+0x918>
 80061b8:	f1c0 001c 	rsb	r0, r0, #28
 80061bc:	9b04      	ldr	r3, [sp, #16]
 80061be:	4403      	add	r3, r0
 80061c0:	4480      	add	r8, r0
 80061c2:	4405      	add	r5, r0
 80061c4:	9304      	str	r3, [sp, #16]
 80061c6:	f1b8 0f00 	cmp.w	r8, #0
 80061ca:	dd05      	ble.n	80061d8 <_dtoa_r+0x838>
 80061cc:	4659      	mov	r1, fp
 80061ce:	4642      	mov	r2, r8
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fbfd 	bl	80069d0 <__lshift>
 80061d6:	4683      	mov	fp, r0
 80061d8:	9b04      	ldr	r3, [sp, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	dd05      	ble.n	80061ea <_dtoa_r+0x84a>
 80061de:	4631      	mov	r1, r6
 80061e0:	461a      	mov	r2, r3
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fbf4 	bl	80069d0 <__lshift>
 80061e8:	4606      	mov	r6, r0
 80061ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d069      	beq.n	80062c4 <_dtoa_r+0x924>
 80061f0:	4631      	mov	r1, r6
 80061f2:	4658      	mov	r0, fp
 80061f4:	f000 fc58 	bl	8006aa8 <__mcmp>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	da63      	bge.n	80062c4 <_dtoa_r+0x924>
 80061fc:	2300      	movs	r3, #0
 80061fe:	4659      	mov	r1, fp
 8006200:	220a      	movs	r2, #10
 8006202:	4620      	mov	r0, r4
 8006204:	f000 fa34 	bl	8006670 <__multadd>
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800620e:	4683      	mov	fp, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 818f 	beq.w	8006534 <_dtoa_r+0xb94>
 8006216:	4639      	mov	r1, r7
 8006218:	2300      	movs	r3, #0
 800621a:	220a      	movs	r2, #10
 800621c:	4620      	mov	r0, r4
 800621e:	f000 fa27 	bl	8006670 <__multadd>
 8006222:	f1b9 0f00 	cmp.w	r9, #0
 8006226:	4607      	mov	r7, r0
 8006228:	f300 808e 	bgt.w	8006348 <_dtoa_r+0x9a8>
 800622c:	9b05      	ldr	r3, [sp, #20]
 800622e:	2b02      	cmp	r3, #2
 8006230:	dc50      	bgt.n	80062d4 <_dtoa_r+0x934>
 8006232:	e089      	b.n	8006348 <_dtoa_r+0x9a8>
 8006234:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006236:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800623a:	e75d      	b.n	80060f8 <_dtoa_r+0x758>
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	1e5e      	subs	r6, r3, #1
 8006240:	9b06      	ldr	r3, [sp, #24]
 8006242:	42b3      	cmp	r3, r6
 8006244:	bfbf      	itttt	lt
 8006246:	9b06      	ldrlt	r3, [sp, #24]
 8006248:	9606      	strlt	r6, [sp, #24]
 800624a:	1af2      	sublt	r2, r6, r3
 800624c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800624e:	bfb6      	itet	lt
 8006250:	189b      	addlt	r3, r3, r2
 8006252:	1b9e      	subge	r6, r3, r6
 8006254:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	bfb8      	it	lt
 800625a:	2600      	movlt	r6, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	bfb5      	itete	lt
 8006260:	eba8 0503 	sublt.w	r5, r8, r3
 8006264:	9b01      	ldrge	r3, [sp, #4]
 8006266:	2300      	movlt	r3, #0
 8006268:	4645      	movge	r5, r8
 800626a:	e747      	b.n	80060fc <_dtoa_r+0x75c>
 800626c:	9e06      	ldr	r6, [sp, #24]
 800626e:	9f08      	ldr	r7, [sp, #32]
 8006270:	4645      	mov	r5, r8
 8006272:	e74c      	b.n	800610e <_dtoa_r+0x76e>
 8006274:	9a06      	ldr	r2, [sp, #24]
 8006276:	e775      	b.n	8006164 <_dtoa_r+0x7c4>
 8006278:	9b05      	ldr	r3, [sp, #20]
 800627a:	2b01      	cmp	r3, #1
 800627c:	dc18      	bgt.n	80062b0 <_dtoa_r+0x910>
 800627e:	9b02      	ldr	r3, [sp, #8]
 8006280:	b9b3      	cbnz	r3, 80062b0 <_dtoa_r+0x910>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006288:	b9a3      	cbnz	r3, 80062b4 <_dtoa_r+0x914>
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006290:	0d1b      	lsrs	r3, r3, #20
 8006292:	051b      	lsls	r3, r3, #20
 8006294:	b12b      	cbz	r3, 80062a2 <_dtoa_r+0x902>
 8006296:	9b04      	ldr	r3, [sp, #16]
 8006298:	3301      	adds	r3, #1
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	f108 0801 	add.w	r8, r8, #1
 80062a0:	2301      	movs	r3, #1
 80062a2:	9306      	str	r3, [sp, #24]
 80062a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f47f af74 	bne.w	8006194 <_dtoa_r+0x7f4>
 80062ac:	2001      	movs	r0, #1
 80062ae:	e779      	b.n	80061a4 <_dtoa_r+0x804>
 80062b0:	2300      	movs	r3, #0
 80062b2:	e7f6      	b.n	80062a2 <_dtoa_r+0x902>
 80062b4:	9b02      	ldr	r3, [sp, #8]
 80062b6:	e7f4      	b.n	80062a2 <_dtoa_r+0x902>
 80062b8:	d085      	beq.n	80061c6 <_dtoa_r+0x826>
 80062ba:	4618      	mov	r0, r3
 80062bc:	301c      	adds	r0, #28
 80062be:	e77d      	b.n	80061bc <_dtoa_r+0x81c>
 80062c0:	40240000 	.word	0x40240000
 80062c4:	9b01      	ldr	r3, [sp, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dc38      	bgt.n	800633c <_dtoa_r+0x99c>
 80062ca:	9b05      	ldr	r3, [sp, #20]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	dd35      	ble.n	800633c <_dtoa_r+0x99c>
 80062d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	d10d      	bne.n	80062f6 <_dtoa_r+0x956>
 80062da:	4631      	mov	r1, r6
 80062dc:	464b      	mov	r3, r9
 80062de:	2205      	movs	r2, #5
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f9c5 	bl	8006670 <__multadd>
 80062e6:	4601      	mov	r1, r0
 80062e8:	4606      	mov	r6, r0
 80062ea:	4658      	mov	r0, fp
 80062ec:	f000 fbdc 	bl	8006aa8 <__mcmp>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f73f adbd 	bgt.w	8005e70 <_dtoa_r+0x4d0>
 80062f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f8:	9d00      	ldr	r5, [sp, #0]
 80062fa:	ea6f 0a03 	mvn.w	sl, r3
 80062fe:	f04f 0800 	mov.w	r8, #0
 8006302:	4631      	mov	r1, r6
 8006304:	4620      	mov	r0, r4
 8006306:	f000 f991 	bl	800662c <_Bfree>
 800630a:	2f00      	cmp	r7, #0
 800630c:	f43f aeb4 	beq.w	8006078 <_dtoa_r+0x6d8>
 8006310:	f1b8 0f00 	cmp.w	r8, #0
 8006314:	d005      	beq.n	8006322 <_dtoa_r+0x982>
 8006316:	45b8      	cmp	r8, r7
 8006318:	d003      	beq.n	8006322 <_dtoa_r+0x982>
 800631a:	4641      	mov	r1, r8
 800631c:	4620      	mov	r0, r4
 800631e:	f000 f985 	bl	800662c <_Bfree>
 8006322:	4639      	mov	r1, r7
 8006324:	4620      	mov	r0, r4
 8006326:	f000 f981 	bl	800662c <_Bfree>
 800632a:	e6a5      	b.n	8006078 <_dtoa_r+0x6d8>
 800632c:	2600      	movs	r6, #0
 800632e:	4637      	mov	r7, r6
 8006330:	e7e1      	b.n	80062f6 <_dtoa_r+0x956>
 8006332:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006334:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006338:	4637      	mov	r7, r6
 800633a:	e599      	b.n	8005e70 <_dtoa_r+0x4d0>
 800633c:	9b08      	ldr	r3, [sp, #32]
 800633e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 80fd 	beq.w	8006542 <_dtoa_r+0xba2>
 8006348:	2d00      	cmp	r5, #0
 800634a:	dd05      	ble.n	8006358 <_dtoa_r+0x9b8>
 800634c:	4639      	mov	r1, r7
 800634e:	462a      	mov	r2, r5
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fb3d 	bl	80069d0 <__lshift>
 8006356:	4607      	mov	r7, r0
 8006358:	9b06      	ldr	r3, [sp, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d05c      	beq.n	8006418 <_dtoa_r+0xa78>
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4620      	mov	r0, r4
 8006362:	f000 f923 	bl	80065ac <_Balloc>
 8006366:	4605      	mov	r5, r0
 8006368:	b928      	cbnz	r0, 8006376 <_dtoa_r+0x9d6>
 800636a:	4b80      	ldr	r3, [pc, #512]	; (800656c <_dtoa_r+0xbcc>)
 800636c:	4602      	mov	r2, r0
 800636e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006372:	f7ff bb2e 	b.w	80059d2 <_dtoa_r+0x32>
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	3202      	adds	r2, #2
 800637a:	0092      	lsls	r2, r2, #2
 800637c:	f107 010c 	add.w	r1, r7, #12
 8006380:	300c      	adds	r0, #12
 8006382:	f000 f905 	bl	8006590 <memcpy>
 8006386:	2201      	movs	r2, #1
 8006388:	4629      	mov	r1, r5
 800638a:	4620      	mov	r0, r4
 800638c:	f000 fb20 	bl	80069d0 <__lshift>
 8006390:	9b00      	ldr	r3, [sp, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	9b00      	ldr	r3, [sp, #0]
 8006398:	444b      	add	r3, r9
 800639a:	9307      	str	r3, [sp, #28]
 800639c:	9b02      	ldr	r3, [sp, #8]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	46b8      	mov	r8, r7
 80063a4:	9306      	str	r3, [sp, #24]
 80063a6:	4607      	mov	r7, r0
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	4631      	mov	r1, r6
 80063ac:	3b01      	subs	r3, #1
 80063ae:	4658      	mov	r0, fp
 80063b0:	9302      	str	r3, [sp, #8]
 80063b2:	f7ff fa69 	bl	8005888 <quorem>
 80063b6:	4603      	mov	r3, r0
 80063b8:	3330      	adds	r3, #48	; 0x30
 80063ba:	9004      	str	r0, [sp, #16]
 80063bc:	4641      	mov	r1, r8
 80063be:	4658      	mov	r0, fp
 80063c0:	9308      	str	r3, [sp, #32]
 80063c2:	f000 fb71 	bl	8006aa8 <__mcmp>
 80063c6:	463a      	mov	r2, r7
 80063c8:	4681      	mov	r9, r0
 80063ca:	4631      	mov	r1, r6
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 fb87 	bl	8006ae0 <__mdiff>
 80063d2:	68c2      	ldr	r2, [r0, #12]
 80063d4:	9b08      	ldr	r3, [sp, #32]
 80063d6:	4605      	mov	r5, r0
 80063d8:	bb02      	cbnz	r2, 800641c <_dtoa_r+0xa7c>
 80063da:	4601      	mov	r1, r0
 80063dc:	4658      	mov	r0, fp
 80063de:	f000 fb63 	bl	8006aa8 <__mcmp>
 80063e2:	9b08      	ldr	r3, [sp, #32]
 80063e4:	4602      	mov	r2, r0
 80063e6:	4629      	mov	r1, r5
 80063e8:	4620      	mov	r0, r4
 80063ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80063ee:	f000 f91d 	bl	800662c <_Bfree>
 80063f2:	9b05      	ldr	r3, [sp, #20]
 80063f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063f6:	9d01      	ldr	r5, [sp, #4]
 80063f8:	ea43 0102 	orr.w	r1, r3, r2
 80063fc:	9b06      	ldr	r3, [sp, #24]
 80063fe:	430b      	orrs	r3, r1
 8006400:	9b08      	ldr	r3, [sp, #32]
 8006402:	d10d      	bne.n	8006420 <_dtoa_r+0xa80>
 8006404:	2b39      	cmp	r3, #57	; 0x39
 8006406:	d029      	beq.n	800645c <_dtoa_r+0xabc>
 8006408:	f1b9 0f00 	cmp.w	r9, #0
 800640c:	dd01      	ble.n	8006412 <_dtoa_r+0xa72>
 800640e:	9b04      	ldr	r3, [sp, #16]
 8006410:	3331      	adds	r3, #49	; 0x31
 8006412:	9a02      	ldr	r2, [sp, #8]
 8006414:	7013      	strb	r3, [r2, #0]
 8006416:	e774      	b.n	8006302 <_dtoa_r+0x962>
 8006418:	4638      	mov	r0, r7
 800641a:	e7b9      	b.n	8006390 <_dtoa_r+0x9f0>
 800641c:	2201      	movs	r2, #1
 800641e:	e7e2      	b.n	80063e6 <_dtoa_r+0xa46>
 8006420:	f1b9 0f00 	cmp.w	r9, #0
 8006424:	db06      	blt.n	8006434 <_dtoa_r+0xa94>
 8006426:	9905      	ldr	r1, [sp, #20]
 8006428:	ea41 0909 	orr.w	r9, r1, r9
 800642c:	9906      	ldr	r1, [sp, #24]
 800642e:	ea59 0101 	orrs.w	r1, r9, r1
 8006432:	d120      	bne.n	8006476 <_dtoa_r+0xad6>
 8006434:	2a00      	cmp	r2, #0
 8006436:	ddec      	ble.n	8006412 <_dtoa_r+0xa72>
 8006438:	4659      	mov	r1, fp
 800643a:	2201      	movs	r2, #1
 800643c:	4620      	mov	r0, r4
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	f000 fac6 	bl	80069d0 <__lshift>
 8006444:	4631      	mov	r1, r6
 8006446:	4683      	mov	fp, r0
 8006448:	f000 fb2e 	bl	8006aa8 <__mcmp>
 800644c:	2800      	cmp	r0, #0
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	dc02      	bgt.n	8006458 <_dtoa_r+0xab8>
 8006452:	d1de      	bne.n	8006412 <_dtoa_r+0xa72>
 8006454:	07da      	lsls	r2, r3, #31
 8006456:	d5dc      	bpl.n	8006412 <_dtoa_r+0xa72>
 8006458:	2b39      	cmp	r3, #57	; 0x39
 800645a:	d1d8      	bne.n	800640e <_dtoa_r+0xa6e>
 800645c:	9a02      	ldr	r2, [sp, #8]
 800645e:	2339      	movs	r3, #57	; 0x39
 8006460:	7013      	strb	r3, [r2, #0]
 8006462:	462b      	mov	r3, r5
 8006464:	461d      	mov	r5, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800646c:	2a39      	cmp	r2, #57	; 0x39
 800646e:	d050      	beq.n	8006512 <_dtoa_r+0xb72>
 8006470:	3201      	adds	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	e745      	b.n	8006302 <_dtoa_r+0x962>
 8006476:	2a00      	cmp	r2, #0
 8006478:	dd03      	ble.n	8006482 <_dtoa_r+0xae2>
 800647a:	2b39      	cmp	r3, #57	; 0x39
 800647c:	d0ee      	beq.n	800645c <_dtoa_r+0xabc>
 800647e:	3301      	adds	r3, #1
 8006480:	e7c7      	b.n	8006412 <_dtoa_r+0xa72>
 8006482:	9a01      	ldr	r2, [sp, #4]
 8006484:	9907      	ldr	r1, [sp, #28]
 8006486:	f802 3c01 	strb.w	r3, [r2, #-1]
 800648a:	428a      	cmp	r2, r1
 800648c:	d02a      	beq.n	80064e4 <_dtoa_r+0xb44>
 800648e:	4659      	mov	r1, fp
 8006490:	2300      	movs	r3, #0
 8006492:	220a      	movs	r2, #10
 8006494:	4620      	mov	r0, r4
 8006496:	f000 f8eb 	bl	8006670 <__multadd>
 800649a:	45b8      	cmp	r8, r7
 800649c:	4683      	mov	fp, r0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	f04f 020a 	mov.w	r2, #10
 80064a6:	4641      	mov	r1, r8
 80064a8:	4620      	mov	r0, r4
 80064aa:	d107      	bne.n	80064bc <_dtoa_r+0xb1c>
 80064ac:	f000 f8e0 	bl	8006670 <__multadd>
 80064b0:	4680      	mov	r8, r0
 80064b2:	4607      	mov	r7, r0
 80064b4:	9b01      	ldr	r3, [sp, #4]
 80064b6:	3301      	adds	r3, #1
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	e775      	b.n	80063a8 <_dtoa_r+0xa08>
 80064bc:	f000 f8d8 	bl	8006670 <__multadd>
 80064c0:	4639      	mov	r1, r7
 80064c2:	4680      	mov	r8, r0
 80064c4:	2300      	movs	r3, #0
 80064c6:	220a      	movs	r2, #10
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 f8d1 	bl	8006670 <__multadd>
 80064ce:	4607      	mov	r7, r0
 80064d0:	e7f0      	b.n	80064b4 <_dtoa_r+0xb14>
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	9a00      	ldr	r2, [sp, #0]
 80064d8:	bfcc      	ite	gt
 80064da:	464d      	movgt	r5, r9
 80064dc:	2501      	movle	r5, #1
 80064de:	4415      	add	r5, r2
 80064e0:	f04f 0800 	mov.w	r8, #0
 80064e4:	4659      	mov	r1, fp
 80064e6:	2201      	movs	r2, #1
 80064e8:	4620      	mov	r0, r4
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	f000 fa70 	bl	80069d0 <__lshift>
 80064f0:	4631      	mov	r1, r6
 80064f2:	4683      	mov	fp, r0
 80064f4:	f000 fad8 	bl	8006aa8 <__mcmp>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	dcb2      	bgt.n	8006462 <_dtoa_r+0xac2>
 80064fc:	d102      	bne.n	8006504 <_dtoa_r+0xb64>
 80064fe:	9b01      	ldr	r3, [sp, #4]
 8006500:	07db      	lsls	r3, r3, #31
 8006502:	d4ae      	bmi.n	8006462 <_dtoa_r+0xac2>
 8006504:	462b      	mov	r3, r5
 8006506:	461d      	mov	r5, r3
 8006508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800650c:	2a30      	cmp	r2, #48	; 0x30
 800650e:	d0fa      	beq.n	8006506 <_dtoa_r+0xb66>
 8006510:	e6f7      	b.n	8006302 <_dtoa_r+0x962>
 8006512:	9a00      	ldr	r2, [sp, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d1a5      	bne.n	8006464 <_dtoa_r+0xac4>
 8006518:	f10a 0a01 	add.w	sl, sl, #1
 800651c:	2331      	movs	r3, #49	; 0x31
 800651e:	e779      	b.n	8006414 <_dtoa_r+0xa74>
 8006520:	4b13      	ldr	r3, [pc, #76]	; (8006570 <_dtoa_r+0xbd0>)
 8006522:	f7ff baaf 	b.w	8005a84 <_dtoa_r+0xe4>
 8006526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006528:	2b00      	cmp	r3, #0
 800652a:	f47f aa86 	bne.w	8005a3a <_dtoa_r+0x9a>
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <_dtoa_r+0xbd4>)
 8006530:	f7ff baa8 	b.w	8005a84 <_dtoa_r+0xe4>
 8006534:	f1b9 0f00 	cmp.w	r9, #0
 8006538:	dc03      	bgt.n	8006542 <_dtoa_r+0xba2>
 800653a:	9b05      	ldr	r3, [sp, #20]
 800653c:	2b02      	cmp	r3, #2
 800653e:	f73f aec9 	bgt.w	80062d4 <_dtoa_r+0x934>
 8006542:	9d00      	ldr	r5, [sp, #0]
 8006544:	4631      	mov	r1, r6
 8006546:	4658      	mov	r0, fp
 8006548:	f7ff f99e 	bl	8005888 <quorem>
 800654c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006550:	f805 3b01 	strb.w	r3, [r5], #1
 8006554:	9a00      	ldr	r2, [sp, #0]
 8006556:	1aaa      	subs	r2, r5, r2
 8006558:	4591      	cmp	r9, r2
 800655a:	ddba      	ble.n	80064d2 <_dtoa_r+0xb32>
 800655c:	4659      	mov	r1, fp
 800655e:	2300      	movs	r3, #0
 8006560:	220a      	movs	r2, #10
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f884 	bl	8006670 <__multadd>
 8006568:	4683      	mov	fp, r0
 800656a:	e7eb      	b.n	8006544 <_dtoa_r+0xba4>
 800656c:	08007daf 	.word	0x08007daf
 8006570:	08007d08 	.word	0x08007d08
 8006574:	08007d2c 	.word	0x08007d2c

08006578 <_localeconv_r>:
 8006578:	4800      	ldr	r0, [pc, #0]	; (800657c <_localeconv_r+0x4>)
 800657a:	4770      	bx	lr
 800657c:	20000160 	.word	0x20000160

08006580 <malloc>:
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <malloc+0xc>)
 8006582:	4601      	mov	r1, r0
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	f000 bbef 	b.w	8006d68 <_malloc_r>
 800658a:	bf00      	nop
 800658c:	2000000c 	.word	0x2000000c

08006590 <memcpy>:
 8006590:	440a      	add	r2, r1
 8006592:	4291      	cmp	r1, r2
 8006594:	f100 33ff 	add.w	r3, r0, #4294967295
 8006598:	d100      	bne.n	800659c <memcpy+0xc>
 800659a:	4770      	bx	lr
 800659c:	b510      	push	{r4, lr}
 800659e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a6:	4291      	cmp	r1, r2
 80065a8:	d1f9      	bne.n	800659e <memcpy+0xe>
 80065aa:	bd10      	pop	{r4, pc}

080065ac <_Balloc>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065b0:	4604      	mov	r4, r0
 80065b2:	460d      	mov	r5, r1
 80065b4:	b976      	cbnz	r6, 80065d4 <_Balloc+0x28>
 80065b6:	2010      	movs	r0, #16
 80065b8:	f7ff ffe2 	bl	8006580 <malloc>
 80065bc:	4602      	mov	r2, r0
 80065be:	6260      	str	r0, [r4, #36]	; 0x24
 80065c0:	b920      	cbnz	r0, 80065cc <_Balloc+0x20>
 80065c2:	4b18      	ldr	r3, [pc, #96]	; (8006624 <_Balloc+0x78>)
 80065c4:	4818      	ldr	r0, [pc, #96]	; (8006628 <_Balloc+0x7c>)
 80065c6:	2166      	movs	r1, #102	; 0x66
 80065c8:	f000 fd94 	bl	80070f4 <__assert_func>
 80065cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065d0:	6006      	str	r6, [r0, #0]
 80065d2:	60c6      	str	r6, [r0, #12]
 80065d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065d6:	68f3      	ldr	r3, [r6, #12]
 80065d8:	b183      	cbz	r3, 80065fc <_Balloc+0x50>
 80065da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065e2:	b9b8      	cbnz	r0, 8006614 <_Balloc+0x68>
 80065e4:	2101      	movs	r1, #1
 80065e6:	fa01 f605 	lsl.w	r6, r1, r5
 80065ea:	1d72      	adds	r2, r6, #5
 80065ec:	0092      	lsls	r2, r2, #2
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 fb5a 	bl	8006ca8 <_calloc_r>
 80065f4:	b160      	cbz	r0, 8006610 <_Balloc+0x64>
 80065f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065fa:	e00e      	b.n	800661a <_Balloc+0x6e>
 80065fc:	2221      	movs	r2, #33	; 0x21
 80065fe:	2104      	movs	r1, #4
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fb51 	bl	8006ca8 <_calloc_r>
 8006606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006608:	60f0      	str	r0, [r6, #12]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e4      	bne.n	80065da <_Balloc+0x2e>
 8006610:	2000      	movs	r0, #0
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	6802      	ldr	r2, [r0, #0]
 8006616:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800661a:	2300      	movs	r3, #0
 800661c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006620:	e7f7      	b.n	8006612 <_Balloc+0x66>
 8006622:	bf00      	nop
 8006624:	08007d39 	.word	0x08007d39
 8006628:	08007dc0 	.word	0x08007dc0

0800662c <_Bfree>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006630:	4605      	mov	r5, r0
 8006632:	460c      	mov	r4, r1
 8006634:	b976      	cbnz	r6, 8006654 <_Bfree+0x28>
 8006636:	2010      	movs	r0, #16
 8006638:	f7ff ffa2 	bl	8006580 <malloc>
 800663c:	4602      	mov	r2, r0
 800663e:	6268      	str	r0, [r5, #36]	; 0x24
 8006640:	b920      	cbnz	r0, 800664c <_Bfree+0x20>
 8006642:	4b09      	ldr	r3, [pc, #36]	; (8006668 <_Bfree+0x3c>)
 8006644:	4809      	ldr	r0, [pc, #36]	; (800666c <_Bfree+0x40>)
 8006646:	218a      	movs	r1, #138	; 0x8a
 8006648:	f000 fd54 	bl	80070f4 <__assert_func>
 800664c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006650:	6006      	str	r6, [r0, #0]
 8006652:	60c6      	str	r6, [r0, #12]
 8006654:	b13c      	cbz	r4, 8006666 <_Bfree+0x3a>
 8006656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006658:	6862      	ldr	r2, [r4, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006660:	6021      	str	r1, [r4, #0]
 8006662:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	08007d39 	.word	0x08007d39
 800666c:	08007dc0 	.word	0x08007dc0

08006670 <__multadd>:
 8006670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006674:	690e      	ldr	r6, [r1, #16]
 8006676:	4607      	mov	r7, r0
 8006678:	4698      	mov	r8, r3
 800667a:	460c      	mov	r4, r1
 800667c:	f101 0014 	add.w	r0, r1, #20
 8006680:	2300      	movs	r3, #0
 8006682:	6805      	ldr	r5, [r0, #0]
 8006684:	b2a9      	uxth	r1, r5
 8006686:	fb02 8101 	mla	r1, r2, r1, r8
 800668a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800668e:	0c2d      	lsrs	r5, r5, #16
 8006690:	fb02 c505 	mla	r5, r2, r5, ip
 8006694:	b289      	uxth	r1, r1
 8006696:	3301      	adds	r3, #1
 8006698:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800669c:	429e      	cmp	r6, r3
 800669e:	f840 1b04 	str.w	r1, [r0], #4
 80066a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80066a6:	dcec      	bgt.n	8006682 <__multadd+0x12>
 80066a8:	f1b8 0f00 	cmp.w	r8, #0
 80066ac:	d022      	beq.n	80066f4 <__multadd+0x84>
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	42b3      	cmp	r3, r6
 80066b2:	dc19      	bgt.n	80066e8 <__multadd+0x78>
 80066b4:	6861      	ldr	r1, [r4, #4]
 80066b6:	4638      	mov	r0, r7
 80066b8:	3101      	adds	r1, #1
 80066ba:	f7ff ff77 	bl	80065ac <_Balloc>
 80066be:	4605      	mov	r5, r0
 80066c0:	b928      	cbnz	r0, 80066ce <__multadd+0x5e>
 80066c2:	4602      	mov	r2, r0
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <__multadd+0x8c>)
 80066c6:	480e      	ldr	r0, [pc, #56]	; (8006700 <__multadd+0x90>)
 80066c8:	21b5      	movs	r1, #181	; 0xb5
 80066ca:	f000 fd13 	bl	80070f4 <__assert_func>
 80066ce:	6922      	ldr	r2, [r4, #16]
 80066d0:	3202      	adds	r2, #2
 80066d2:	f104 010c 	add.w	r1, r4, #12
 80066d6:	0092      	lsls	r2, r2, #2
 80066d8:	300c      	adds	r0, #12
 80066da:	f7ff ff59 	bl	8006590 <memcpy>
 80066de:	4621      	mov	r1, r4
 80066e0:	4638      	mov	r0, r7
 80066e2:	f7ff ffa3 	bl	800662c <_Bfree>
 80066e6:	462c      	mov	r4, r5
 80066e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80066ec:	3601      	adds	r6, #1
 80066ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80066f2:	6126      	str	r6, [r4, #16]
 80066f4:	4620      	mov	r0, r4
 80066f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066fa:	bf00      	nop
 80066fc:	08007daf 	.word	0x08007daf
 8006700:	08007dc0 	.word	0x08007dc0

08006704 <__hi0bits>:
 8006704:	0c03      	lsrs	r3, r0, #16
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	b9d3      	cbnz	r3, 8006740 <__hi0bits+0x3c>
 800670a:	0400      	lsls	r0, r0, #16
 800670c:	2310      	movs	r3, #16
 800670e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006712:	bf04      	itt	eq
 8006714:	0200      	lsleq	r0, r0, #8
 8006716:	3308      	addeq	r3, #8
 8006718:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800671c:	bf04      	itt	eq
 800671e:	0100      	lsleq	r0, r0, #4
 8006720:	3304      	addeq	r3, #4
 8006722:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006726:	bf04      	itt	eq
 8006728:	0080      	lsleq	r0, r0, #2
 800672a:	3302      	addeq	r3, #2
 800672c:	2800      	cmp	r0, #0
 800672e:	db05      	blt.n	800673c <__hi0bits+0x38>
 8006730:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006734:	f103 0301 	add.w	r3, r3, #1
 8006738:	bf08      	it	eq
 800673a:	2320      	moveq	r3, #32
 800673c:	4618      	mov	r0, r3
 800673e:	4770      	bx	lr
 8006740:	2300      	movs	r3, #0
 8006742:	e7e4      	b.n	800670e <__hi0bits+0xa>

08006744 <__lo0bits>:
 8006744:	6803      	ldr	r3, [r0, #0]
 8006746:	f013 0207 	ands.w	r2, r3, #7
 800674a:	4601      	mov	r1, r0
 800674c:	d00b      	beq.n	8006766 <__lo0bits+0x22>
 800674e:	07da      	lsls	r2, r3, #31
 8006750:	d424      	bmi.n	800679c <__lo0bits+0x58>
 8006752:	0798      	lsls	r0, r3, #30
 8006754:	bf49      	itett	mi
 8006756:	085b      	lsrmi	r3, r3, #1
 8006758:	089b      	lsrpl	r3, r3, #2
 800675a:	2001      	movmi	r0, #1
 800675c:	600b      	strmi	r3, [r1, #0]
 800675e:	bf5c      	itt	pl
 8006760:	600b      	strpl	r3, [r1, #0]
 8006762:	2002      	movpl	r0, #2
 8006764:	4770      	bx	lr
 8006766:	b298      	uxth	r0, r3
 8006768:	b9b0      	cbnz	r0, 8006798 <__lo0bits+0x54>
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	2010      	movs	r0, #16
 800676e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006772:	bf04      	itt	eq
 8006774:	0a1b      	lsreq	r3, r3, #8
 8006776:	3008      	addeq	r0, #8
 8006778:	071a      	lsls	r2, r3, #28
 800677a:	bf04      	itt	eq
 800677c:	091b      	lsreq	r3, r3, #4
 800677e:	3004      	addeq	r0, #4
 8006780:	079a      	lsls	r2, r3, #30
 8006782:	bf04      	itt	eq
 8006784:	089b      	lsreq	r3, r3, #2
 8006786:	3002      	addeq	r0, #2
 8006788:	07da      	lsls	r2, r3, #31
 800678a:	d403      	bmi.n	8006794 <__lo0bits+0x50>
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	f100 0001 	add.w	r0, r0, #1
 8006792:	d005      	beq.n	80067a0 <__lo0bits+0x5c>
 8006794:	600b      	str	r3, [r1, #0]
 8006796:	4770      	bx	lr
 8006798:	4610      	mov	r0, r2
 800679a:	e7e8      	b.n	800676e <__lo0bits+0x2a>
 800679c:	2000      	movs	r0, #0
 800679e:	4770      	bx	lr
 80067a0:	2020      	movs	r0, #32
 80067a2:	4770      	bx	lr

080067a4 <__i2b>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	460c      	mov	r4, r1
 80067a8:	2101      	movs	r1, #1
 80067aa:	f7ff feff 	bl	80065ac <_Balloc>
 80067ae:	4602      	mov	r2, r0
 80067b0:	b928      	cbnz	r0, 80067be <__i2b+0x1a>
 80067b2:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <__i2b+0x24>)
 80067b4:	4805      	ldr	r0, [pc, #20]	; (80067cc <__i2b+0x28>)
 80067b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067ba:	f000 fc9b 	bl	80070f4 <__assert_func>
 80067be:	2301      	movs	r3, #1
 80067c0:	6144      	str	r4, [r0, #20]
 80067c2:	6103      	str	r3, [r0, #16]
 80067c4:	bd10      	pop	{r4, pc}
 80067c6:	bf00      	nop
 80067c8:	08007daf 	.word	0x08007daf
 80067cc:	08007dc0 	.word	0x08007dc0

080067d0 <__multiply>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	4614      	mov	r4, r2
 80067d6:	690a      	ldr	r2, [r1, #16]
 80067d8:	6923      	ldr	r3, [r4, #16]
 80067da:	429a      	cmp	r2, r3
 80067dc:	bfb8      	it	lt
 80067de:	460b      	movlt	r3, r1
 80067e0:	460d      	mov	r5, r1
 80067e2:	bfbc      	itt	lt
 80067e4:	4625      	movlt	r5, r4
 80067e6:	461c      	movlt	r4, r3
 80067e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80067ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80067f0:	68ab      	ldr	r3, [r5, #8]
 80067f2:	6869      	ldr	r1, [r5, #4]
 80067f4:	eb0a 0709 	add.w	r7, sl, r9
 80067f8:	42bb      	cmp	r3, r7
 80067fa:	b085      	sub	sp, #20
 80067fc:	bfb8      	it	lt
 80067fe:	3101      	addlt	r1, #1
 8006800:	f7ff fed4 	bl	80065ac <_Balloc>
 8006804:	b930      	cbnz	r0, 8006814 <__multiply+0x44>
 8006806:	4602      	mov	r2, r0
 8006808:	4b42      	ldr	r3, [pc, #264]	; (8006914 <__multiply+0x144>)
 800680a:	4843      	ldr	r0, [pc, #268]	; (8006918 <__multiply+0x148>)
 800680c:	f240 115d 	movw	r1, #349	; 0x15d
 8006810:	f000 fc70 	bl	80070f4 <__assert_func>
 8006814:	f100 0614 	add.w	r6, r0, #20
 8006818:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800681c:	4633      	mov	r3, r6
 800681e:	2200      	movs	r2, #0
 8006820:	4543      	cmp	r3, r8
 8006822:	d31e      	bcc.n	8006862 <__multiply+0x92>
 8006824:	f105 0c14 	add.w	ip, r5, #20
 8006828:	f104 0314 	add.w	r3, r4, #20
 800682c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006830:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006834:	9202      	str	r2, [sp, #8]
 8006836:	ebac 0205 	sub.w	r2, ip, r5
 800683a:	3a15      	subs	r2, #21
 800683c:	f022 0203 	bic.w	r2, r2, #3
 8006840:	3204      	adds	r2, #4
 8006842:	f105 0115 	add.w	r1, r5, #21
 8006846:	458c      	cmp	ip, r1
 8006848:	bf38      	it	cc
 800684a:	2204      	movcc	r2, #4
 800684c:	9201      	str	r2, [sp, #4]
 800684e:	9a02      	ldr	r2, [sp, #8]
 8006850:	9303      	str	r3, [sp, #12]
 8006852:	429a      	cmp	r2, r3
 8006854:	d808      	bhi.n	8006868 <__multiply+0x98>
 8006856:	2f00      	cmp	r7, #0
 8006858:	dc55      	bgt.n	8006906 <__multiply+0x136>
 800685a:	6107      	str	r7, [r0, #16]
 800685c:	b005      	add	sp, #20
 800685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006862:	f843 2b04 	str.w	r2, [r3], #4
 8006866:	e7db      	b.n	8006820 <__multiply+0x50>
 8006868:	f8b3 a000 	ldrh.w	sl, [r3]
 800686c:	f1ba 0f00 	cmp.w	sl, #0
 8006870:	d020      	beq.n	80068b4 <__multiply+0xe4>
 8006872:	f105 0e14 	add.w	lr, r5, #20
 8006876:	46b1      	mov	r9, r6
 8006878:	2200      	movs	r2, #0
 800687a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800687e:	f8d9 b000 	ldr.w	fp, [r9]
 8006882:	b2a1      	uxth	r1, r4
 8006884:	fa1f fb8b 	uxth.w	fp, fp
 8006888:	fb0a b101 	mla	r1, sl, r1, fp
 800688c:	4411      	add	r1, r2
 800688e:	f8d9 2000 	ldr.w	r2, [r9]
 8006892:	0c24      	lsrs	r4, r4, #16
 8006894:	0c12      	lsrs	r2, r2, #16
 8006896:	fb0a 2404 	mla	r4, sl, r4, r2
 800689a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800689e:	b289      	uxth	r1, r1
 80068a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80068a4:	45f4      	cmp	ip, lr
 80068a6:	f849 1b04 	str.w	r1, [r9], #4
 80068aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80068ae:	d8e4      	bhi.n	800687a <__multiply+0xaa>
 80068b0:	9901      	ldr	r1, [sp, #4]
 80068b2:	5072      	str	r2, [r6, r1]
 80068b4:	9a03      	ldr	r2, [sp, #12]
 80068b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068ba:	3304      	adds	r3, #4
 80068bc:	f1b9 0f00 	cmp.w	r9, #0
 80068c0:	d01f      	beq.n	8006902 <__multiply+0x132>
 80068c2:	6834      	ldr	r4, [r6, #0]
 80068c4:	f105 0114 	add.w	r1, r5, #20
 80068c8:	46b6      	mov	lr, r6
 80068ca:	f04f 0a00 	mov.w	sl, #0
 80068ce:	880a      	ldrh	r2, [r1, #0]
 80068d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80068d4:	fb09 b202 	mla	r2, r9, r2, fp
 80068d8:	4492      	add	sl, r2
 80068da:	b2a4      	uxth	r4, r4
 80068dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80068e0:	f84e 4b04 	str.w	r4, [lr], #4
 80068e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80068e8:	f8be 2000 	ldrh.w	r2, [lr]
 80068ec:	0c24      	lsrs	r4, r4, #16
 80068ee:	fb09 2404 	mla	r4, r9, r4, r2
 80068f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80068f6:	458c      	cmp	ip, r1
 80068f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80068fc:	d8e7      	bhi.n	80068ce <__multiply+0xfe>
 80068fe:	9a01      	ldr	r2, [sp, #4]
 8006900:	50b4      	str	r4, [r6, r2]
 8006902:	3604      	adds	r6, #4
 8006904:	e7a3      	b.n	800684e <__multiply+0x7e>
 8006906:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1a5      	bne.n	800685a <__multiply+0x8a>
 800690e:	3f01      	subs	r7, #1
 8006910:	e7a1      	b.n	8006856 <__multiply+0x86>
 8006912:	bf00      	nop
 8006914:	08007daf 	.word	0x08007daf
 8006918:	08007dc0 	.word	0x08007dc0

0800691c <__pow5mult>:
 800691c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006920:	4615      	mov	r5, r2
 8006922:	f012 0203 	ands.w	r2, r2, #3
 8006926:	4606      	mov	r6, r0
 8006928:	460f      	mov	r7, r1
 800692a:	d007      	beq.n	800693c <__pow5mult+0x20>
 800692c:	4c25      	ldr	r4, [pc, #148]	; (80069c4 <__pow5mult+0xa8>)
 800692e:	3a01      	subs	r2, #1
 8006930:	2300      	movs	r3, #0
 8006932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006936:	f7ff fe9b 	bl	8006670 <__multadd>
 800693a:	4607      	mov	r7, r0
 800693c:	10ad      	asrs	r5, r5, #2
 800693e:	d03d      	beq.n	80069bc <__pow5mult+0xa0>
 8006940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006942:	b97c      	cbnz	r4, 8006964 <__pow5mult+0x48>
 8006944:	2010      	movs	r0, #16
 8006946:	f7ff fe1b 	bl	8006580 <malloc>
 800694a:	4602      	mov	r2, r0
 800694c:	6270      	str	r0, [r6, #36]	; 0x24
 800694e:	b928      	cbnz	r0, 800695c <__pow5mult+0x40>
 8006950:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <__pow5mult+0xac>)
 8006952:	481e      	ldr	r0, [pc, #120]	; (80069cc <__pow5mult+0xb0>)
 8006954:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006958:	f000 fbcc 	bl	80070f4 <__assert_func>
 800695c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006960:	6004      	str	r4, [r0, #0]
 8006962:	60c4      	str	r4, [r0, #12]
 8006964:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800696c:	b94c      	cbnz	r4, 8006982 <__pow5mult+0x66>
 800696e:	f240 2171 	movw	r1, #625	; 0x271
 8006972:	4630      	mov	r0, r6
 8006974:	f7ff ff16 	bl	80067a4 <__i2b>
 8006978:	2300      	movs	r3, #0
 800697a:	f8c8 0008 	str.w	r0, [r8, #8]
 800697e:	4604      	mov	r4, r0
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	f04f 0900 	mov.w	r9, #0
 8006986:	07eb      	lsls	r3, r5, #31
 8006988:	d50a      	bpl.n	80069a0 <__pow5mult+0x84>
 800698a:	4639      	mov	r1, r7
 800698c:	4622      	mov	r2, r4
 800698e:	4630      	mov	r0, r6
 8006990:	f7ff ff1e 	bl	80067d0 <__multiply>
 8006994:	4639      	mov	r1, r7
 8006996:	4680      	mov	r8, r0
 8006998:	4630      	mov	r0, r6
 800699a:	f7ff fe47 	bl	800662c <_Bfree>
 800699e:	4647      	mov	r7, r8
 80069a0:	106d      	asrs	r5, r5, #1
 80069a2:	d00b      	beq.n	80069bc <__pow5mult+0xa0>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	b938      	cbnz	r0, 80069b8 <__pow5mult+0x9c>
 80069a8:	4622      	mov	r2, r4
 80069aa:	4621      	mov	r1, r4
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7ff ff0f 	bl	80067d0 <__multiply>
 80069b2:	6020      	str	r0, [r4, #0]
 80069b4:	f8c0 9000 	str.w	r9, [r0]
 80069b8:	4604      	mov	r4, r0
 80069ba:	e7e4      	b.n	8006986 <__pow5mult+0x6a>
 80069bc:	4638      	mov	r0, r7
 80069be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c2:	bf00      	nop
 80069c4:	08007f10 	.word	0x08007f10
 80069c8:	08007d39 	.word	0x08007d39
 80069cc:	08007dc0 	.word	0x08007dc0

080069d0 <__lshift>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	460c      	mov	r4, r1
 80069d6:	6849      	ldr	r1, [r1, #4]
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	4607      	mov	r7, r0
 80069e2:	4691      	mov	r9, r2
 80069e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069e8:	f108 0601 	add.w	r6, r8, #1
 80069ec:	42b3      	cmp	r3, r6
 80069ee:	db0b      	blt.n	8006a08 <__lshift+0x38>
 80069f0:	4638      	mov	r0, r7
 80069f2:	f7ff fddb 	bl	80065ac <_Balloc>
 80069f6:	4605      	mov	r5, r0
 80069f8:	b948      	cbnz	r0, 8006a0e <__lshift+0x3e>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <__lshift+0xd0>)
 80069fe:	4829      	ldr	r0, [pc, #164]	; (8006aa4 <__lshift+0xd4>)
 8006a00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a04:	f000 fb76 	bl	80070f4 <__assert_func>
 8006a08:	3101      	adds	r1, #1
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	e7ee      	b.n	80069ec <__lshift+0x1c>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f100 0114 	add.w	r1, r0, #20
 8006a14:	f100 0210 	add.w	r2, r0, #16
 8006a18:	4618      	mov	r0, r3
 8006a1a:	4553      	cmp	r3, sl
 8006a1c:	db33      	blt.n	8006a86 <__lshift+0xb6>
 8006a1e:	6920      	ldr	r0, [r4, #16]
 8006a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a24:	f104 0314 	add.w	r3, r4, #20
 8006a28:	f019 091f 	ands.w	r9, r9, #31
 8006a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a34:	d02b      	beq.n	8006a8e <__lshift+0xbe>
 8006a36:	f1c9 0e20 	rsb	lr, r9, #32
 8006a3a:	468a      	mov	sl, r1
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	fa00 f009 	lsl.w	r0, r0, r9
 8006a44:	4302      	orrs	r2, r0
 8006a46:	f84a 2b04 	str.w	r2, [sl], #4
 8006a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a4e:	459c      	cmp	ip, r3
 8006a50:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a54:	d8f3      	bhi.n	8006a3e <__lshift+0x6e>
 8006a56:	ebac 0304 	sub.w	r3, ip, r4
 8006a5a:	3b15      	subs	r3, #21
 8006a5c:	f023 0303 	bic.w	r3, r3, #3
 8006a60:	3304      	adds	r3, #4
 8006a62:	f104 0015 	add.w	r0, r4, #21
 8006a66:	4584      	cmp	ip, r0
 8006a68:	bf38      	it	cc
 8006a6a:	2304      	movcc	r3, #4
 8006a6c:	50ca      	str	r2, [r1, r3]
 8006a6e:	b10a      	cbz	r2, 8006a74 <__lshift+0xa4>
 8006a70:	f108 0602 	add.w	r6, r8, #2
 8006a74:	3e01      	subs	r6, #1
 8006a76:	4638      	mov	r0, r7
 8006a78:	612e      	str	r6, [r5, #16]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	f7ff fdd6 	bl	800662c <_Bfree>
 8006a80:	4628      	mov	r0, r5
 8006a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a86:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	e7c5      	b.n	8006a1a <__lshift+0x4a>
 8006a8e:	3904      	subs	r1, #4
 8006a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a94:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a98:	459c      	cmp	ip, r3
 8006a9a:	d8f9      	bhi.n	8006a90 <__lshift+0xc0>
 8006a9c:	e7ea      	b.n	8006a74 <__lshift+0xa4>
 8006a9e:	bf00      	nop
 8006aa0:	08007daf 	.word	0x08007daf
 8006aa4:	08007dc0 	.word	0x08007dc0

08006aa8 <__mcmp>:
 8006aa8:	b530      	push	{r4, r5, lr}
 8006aaa:	6902      	ldr	r2, [r0, #16]
 8006aac:	690c      	ldr	r4, [r1, #16]
 8006aae:	1b12      	subs	r2, r2, r4
 8006ab0:	d10e      	bne.n	8006ad0 <__mcmp+0x28>
 8006ab2:	f100 0314 	add.w	r3, r0, #20
 8006ab6:	3114      	adds	r1, #20
 8006ab8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006abc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ac0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ac4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ac8:	42a5      	cmp	r5, r4
 8006aca:	d003      	beq.n	8006ad4 <__mcmp+0x2c>
 8006acc:	d305      	bcc.n	8006ada <__mcmp+0x32>
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	bd30      	pop	{r4, r5, pc}
 8006ad4:	4283      	cmp	r3, r0
 8006ad6:	d3f3      	bcc.n	8006ac0 <__mcmp+0x18>
 8006ad8:	e7fa      	b.n	8006ad0 <__mcmp+0x28>
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	e7f7      	b.n	8006ad0 <__mcmp+0x28>

08006ae0 <__mdiff>:
 8006ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4620      	mov	r0, r4
 8006aec:	4617      	mov	r7, r2
 8006aee:	f7ff ffdb 	bl	8006aa8 <__mcmp>
 8006af2:	1e05      	subs	r5, r0, #0
 8006af4:	d110      	bne.n	8006b18 <__mdiff+0x38>
 8006af6:	4629      	mov	r1, r5
 8006af8:	4630      	mov	r0, r6
 8006afa:	f7ff fd57 	bl	80065ac <_Balloc>
 8006afe:	b930      	cbnz	r0, 8006b0e <__mdiff+0x2e>
 8006b00:	4b39      	ldr	r3, [pc, #228]	; (8006be8 <__mdiff+0x108>)
 8006b02:	4602      	mov	r2, r0
 8006b04:	f240 2132 	movw	r1, #562	; 0x232
 8006b08:	4838      	ldr	r0, [pc, #224]	; (8006bec <__mdiff+0x10c>)
 8006b0a:	f000 faf3 	bl	80070f4 <__assert_func>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b18:	bfa4      	itt	ge
 8006b1a:	463b      	movge	r3, r7
 8006b1c:	4627      	movge	r7, r4
 8006b1e:	4630      	mov	r0, r6
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	bfa6      	itte	ge
 8006b24:	461c      	movge	r4, r3
 8006b26:	2500      	movge	r5, #0
 8006b28:	2501      	movlt	r5, #1
 8006b2a:	f7ff fd3f 	bl	80065ac <_Balloc>
 8006b2e:	b920      	cbnz	r0, 8006b3a <__mdiff+0x5a>
 8006b30:	4b2d      	ldr	r3, [pc, #180]	; (8006be8 <__mdiff+0x108>)
 8006b32:	4602      	mov	r2, r0
 8006b34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b38:	e7e6      	b.n	8006b08 <__mdiff+0x28>
 8006b3a:	693e      	ldr	r6, [r7, #16]
 8006b3c:	60c5      	str	r5, [r0, #12]
 8006b3e:	6925      	ldr	r5, [r4, #16]
 8006b40:	f107 0114 	add.w	r1, r7, #20
 8006b44:	f104 0914 	add.w	r9, r4, #20
 8006b48:	f100 0e14 	add.w	lr, r0, #20
 8006b4c:	f107 0210 	add.w	r2, r7, #16
 8006b50:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006b54:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006b58:	46f2      	mov	sl, lr
 8006b5a:	2700      	movs	r7, #0
 8006b5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b64:	fa1f f883 	uxth.w	r8, r3
 8006b68:	fa17 f78b 	uxtah	r7, r7, fp
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	eba7 0808 	sub.w	r8, r7, r8
 8006b72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b7a:	fa1f f888 	uxth.w	r8, r8
 8006b7e:	141f      	asrs	r7, r3, #16
 8006b80:	454d      	cmp	r5, r9
 8006b82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b86:	f84a 3b04 	str.w	r3, [sl], #4
 8006b8a:	d8e7      	bhi.n	8006b5c <__mdiff+0x7c>
 8006b8c:	1b2b      	subs	r3, r5, r4
 8006b8e:	3b15      	subs	r3, #21
 8006b90:	f023 0303 	bic.w	r3, r3, #3
 8006b94:	3304      	adds	r3, #4
 8006b96:	3415      	adds	r4, #21
 8006b98:	42a5      	cmp	r5, r4
 8006b9a:	bf38      	it	cc
 8006b9c:	2304      	movcc	r3, #4
 8006b9e:	4419      	add	r1, r3
 8006ba0:	4473      	add	r3, lr
 8006ba2:	469e      	mov	lr, r3
 8006ba4:	460d      	mov	r5, r1
 8006ba6:	4565      	cmp	r5, ip
 8006ba8:	d30e      	bcc.n	8006bc8 <__mdiff+0xe8>
 8006baa:	f10c 0203 	add.w	r2, ip, #3
 8006bae:	1a52      	subs	r2, r2, r1
 8006bb0:	f022 0203 	bic.w	r2, r2, #3
 8006bb4:	3903      	subs	r1, #3
 8006bb6:	458c      	cmp	ip, r1
 8006bb8:	bf38      	it	cc
 8006bba:	2200      	movcc	r2, #0
 8006bbc:	441a      	add	r2, r3
 8006bbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006bc2:	b17b      	cbz	r3, 8006be4 <__mdiff+0x104>
 8006bc4:	6106      	str	r6, [r0, #16]
 8006bc6:	e7a5      	b.n	8006b14 <__mdiff+0x34>
 8006bc8:	f855 8b04 	ldr.w	r8, [r5], #4
 8006bcc:	fa17 f488 	uxtah	r4, r7, r8
 8006bd0:	1422      	asrs	r2, r4, #16
 8006bd2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006bd6:	b2a4      	uxth	r4, r4
 8006bd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006bdc:	f84e 4b04 	str.w	r4, [lr], #4
 8006be0:	1417      	asrs	r7, r2, #16
 8006be2:	e7e0      	b.n	8006ba6 <__mdiff+0xc6>
 8006be4:	3e01      	subs	r6, #1
 8006be6:	e7ea      	b.n	8006bbe <__mdiff+0xde>
 8006be8:	08007daf 	.word	0x08007daf
 8006bec:	08007dc0 	.word	0x08007dc0

08006bf0 <__d2b>:
 8006bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bf4:	4689      	mov	r9, r1
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	ec57 6b10 	vmov	r6, r7, d0
 8006bfc:	4690      	mov	r8, r2
 8006bfe:	f7ff fcd5 	bl	80065ac <_Balloc>
 8006c02:	4604      	mov	r4, r0
 8006c04:	b930      	cbnz	r0, 8006c14 <__d2b+0x24>
 8006c06:	4602      	mov	r2, r0
 8006c08:	4b25      	ldr	r3, [pc, #148]	; (8006ca0 <__d2b+0xb0>)
 8006c0a:	4826      	ldr	r0, [pc, #152]	; (8006ca4 <__d2b+0xb4>)
 8006c0c:	f240 310a 	movw	r1, #778	; 0x30a
 8006c10:	f000 fa70 	bl	80070f4 <__assert_func>
 8006c14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006c18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c1c:	bb35      	cbnz	r5, 8006c6c <__d2b+0x7c>
 8006c1e:	2e00      	cmp	r6, #0
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	d028      	beq.n	8006c76 <__d2b+0x86>
 8006c24:	4668      	mov	r0, sp
 8006c26:	9600      	str	r6, [sp, #0]
 8006c28:	f7ff fd8c 	bl	8006744 <__lo0bits>
 8006c2c:	9900      	ldr	r1, [sp, #0]
 8006c2e:	b300      	cbz	r0, 8006c72 <__d2b+0x82>
 8006c30:	9a01      	ldr	r2, [sp, #4]
 8006c32:	f1c0 0320 	rsb	r3, r0, #32
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	40c2      	lsrs	r2, r0
 8006c3e:	6163      	str	r3, [r4, #20]
 8006c40:	9201      	str	r2, [sp, #4]
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	61a3      	str	r3, [r4, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	2202      	movne	r2, #2
 8006c4c:	2201      	moveq	r2, #1
 8006c4e:	6122      	str	r2, [r4, #16]
 8006c50:	b1d5      	cbz	r5, 8006c88 <__d2b+0x98>
 8006c52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c56:	4405      	add	r5, r0
 8006c58:	f8c9 5000 	str.w	r5, [r9]
 8006c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c60:	f8c8 0000 	str.w	r0, [r8]
 8006c64:	4620      	mov	r0, r4
 8006c66:	b003      	add	sp, #12
 8006c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c70:	e7d5      	b.n	8006c1e <__d2b+0x2e>
 8006c72:	6161      	str	r1, [r4, #20]
 8006c74:	e7e5      	b.n	8006c42 <__d2b+0x52>
 8006c76:	a801      	add	r0, sp, #4
 8006c78:	f7ff fd64 	bl	8006744 <__lo0bits>
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	6163      	str	r3, [r4, #20]
 8006c80:	2201      	movs	r2, #1
 8006c82:	6122      	str	r2, [r4, #16]
 8006c84:	3020      	adds	r0, #32
 8006c86:	e7e3      	b.n	8006c50 <__d2b+0x60>
 8006c88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c90:	f8c9 0000 	str.w	r0, [r9]
 8006c94:	6918      	ldr	r0, [r3, #16]
 8006c96:	f7ff fd35 	bl	8006704 <__hi0bits>
 8006c9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c9e:	e7df      	b.n	8006c60 <__d2b+0x70>
 8006ca0:	08007daf 	.word	0x08007daf
 8006ca4:	08007dc0 	.word	0x08007dc0

08006ca8 <_calloc_r>:
 8006ca8:	b513      	push	{r0, r1, r4, lr}
 8006caa:	434a      	muls	r2, r1
 8006cac:	4611      	mov	r1, r2
 8006cae:	9201      	str	r2, [sp, #4]
 8006cb0:	f000 f85a 	bl	8006d68 <_malloc_r>
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	b118      	cbz	r0, 8006cc0 <_calloc_r+0x18>
 8006cb8:	9a01      	ldr	r2, [sp, #4]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	f7fe f952 	bl	8004f64 <memset>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd10      	pop	{r4, pc}
	...

08006cc8 <_free_r>:
 8006cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	d048      	beq.n	8006d60 <_free_r+0x98>
 8006cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd2:	9001      	str	r0, [sp, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006cda:	bfb8      	it	lt
 8006cdc:	18e4      	addlt	r4, r4, r3
 8006cde:	f000 fa65 	bl	80071ac <__malloc_lock>
 8006ce2:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <_free_r+0x9c>)
 8006ce4:	9801      	ldr	r0, [sp, #4]
 8006ce6:	6813      	ldr	r3, [r2, #0]
 8006ce8:	4615      	mov	r5, r2
 8006cea:	b933      	cbnz	r3, 8006cfa <_free_r+0x32>
 8006cec:	6063      	str	r3, [r4, #4]
 8006cee:	6014      	str	r4, [r2, #0]
 8006cf0:	b003      	add	sp, #12
 8006cf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cf6:	f000 ba5f 	b.w	80071b8 <__malloc_unlock>
 8006cfa:	42a3      	cmp	r3, r4
 8006cfc:	d90b      	bls.n	8006d16 <_free_r+0x4e>
 8006cfe:	6821      	ldr	r1, [r4, #0]
 8006d00:	1862      	adds	r2, r4, r1
 8006d02:	4293      	cmp	r3, r2
 8006d04:	bf04      	itt	eq
 8006d06:	681a      	ldreq	r2, [r3, #0]
 8006d08:	685b      	ldreq	r3, [r3, #4]
 8006d0a:	6063      	str	r3, [r4, #4]
 8006d0c:	bf04      	itt	eq
 8006d0e:	1852      	addeq	r2, r2, r1
 8006d10:	6022      	streq	r2, [r4, #0]
 8006d12:	602c      	str	r4, [r5, #0]
 8006d14:	e7ec      	b.n	8006cf0 <_free_r+0x28>
 8006d16:	461a      	mov	r2, r3
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	b10b      	cbz	r3, 8006d20 <_free_r+0x58>
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	d9fa      	bls.n	8006d16 <_free_r+0x4e>
 8006d20:	6811      	ldr	r1, [r2, #0]
 8006d22:	1855      	adds	r5, r2, r1
 8006d24:	42a5      	cmp	r5, r4
 8006d26:	d10b      	bne.n	8006d40 <_free_r+0x78>
 8006d28:	6824      	ldr	r4, [r4, #0]
 8006d2a:	4421      	add	r1, r4
 8006d2c:	1854      	adds	r4, r2, r1
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	6011      	str	r1, [r2, #0]
 8006d32:	d1dd      	bne.n	8006cf0 <_free_r+0x28>
 8006d34:	681c      	ldr	r4, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	6053      	str	r3, [r2, #4]
 8006d3a:	4421      	add	r1, r4
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	e7d7      	b.n	8006cf0 <_free_r+0x28>
 8006d40:	d902      	bls.n	8006d48 <_free_r+0x80>
 8006d42:	230c      	movs	r3, #12
 8006d44:	6003      	str	r3, [r0, #0]
 8006d46:	e7d3      	b.n	8006cf0 <_free_r+0x28>
 8006d48:	6825      	ldr	r5, [r4, #0]
 8006d4a:	1961      	adds	r1, r4, r5
 8006d4c:	428b      	cmp	r3, r1
 8006d4e:	bf04      	itt	eq
 8006d50:	6819      	ldreq	r1, [r3, #0]
 8006d52:	685b      	ldreq	r3, [r3, #4]
 8006d54:	6063      	str	r3, [r4, #4]
 8006d56:	bf04      	itt	eq
 8006d58:	1949      	addeq	r1, r1, r5
 8006d5a:	6021      	streq	r1, [r4, #0]
 8006d5c:	6054      	str	r4, [r2, #4]
 8006d5e:	e7c7      	b.n	8006cf0 <_free_r+0x28>
 8006d60:	b003      	add	sp, #12
 8006d62:	bd30      	pop	{r4, r5, pc}
 8006d64:	20000248 	.word	0x20000248

08006d68 <_malloc_r>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	1ccd      	adds	r5, r1, #3
 8006d6c:	f025 0503 	bic.w	r5, r5, #3
 8006d70:	3508      	adds	r5, #8
 8006d72:	2d0c      	cmp	r5, #12
 8006d74:	bf38      	it	cc
 8006d76:	250c      	movcc	r5, #12
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	db01      	blt.n	8006d82 <_malloc_r+0x1a>
 8006d7e:	42a9      	cmp	r1, r5
 8006d80:	d903      	bls.n	8006d8a <_malloc_r+0x22>
 8006d82:	230c      	movs	r3, #12
 8006d84:	6033      	str	r3, [r6, #0]
 8006d86:	2000      	movs	r0, #0
 8006d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d8a:	f000 fa0f 	bl	80071ac <__malloc_lock>
 8006d8e:	4921      	ldr	r1, [pc, #132]	; (8006e14 <_malloc_r+0xac>)
 8006d90:	680a      	ldr	r2, [r1, #0]
 8006d92:	4614      	mov	r4, r2
 8006d94:	b99c      	cbnz	r4, 8006dbe <_malloc_r+0x56>
 8006d96:	4f20      	ldr	r7, [pc, #128]	; (8006e18 <_malloc_r+0xb0>)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	b923      	cbnz	r3, 8006da6 <_malloc_r+0x3e>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f000 f998 	bl	80070d4 <_sbrk_r>
 8006da4:	6038      	str	r0, [r7, #0]
 8006da6:	4629      	mov	r1, r5
 8006da8:	4630      	mov	r0, r6
 8006daa:	f000 f993 	bl	80070d4 <_sbrk_r>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d123      	bne.n	8006dfa <_malloc_r+0x92>
 8006db2:	230c      	movs	r3, #12
 8006db4:	6033      	str	r3, [r6, #0]
 8006db6:	4630      	mov	r0, r6
 8006db8:	f000 f9fe 	bl	80071b8 <__malloc_unlock>
 8006dbc:	e7e3      	b.n	8006d86 <_malloc_r+0x1e>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	1b5b      	subs	r3, r3, r5
 8006dc2:	d417      	bmi.n	8006df4 <_malloc_r+0x8c>
 8006dc4:	2b0b      	cmp	r3, #11
 8006dc6:	d903      	bls.n	8006dd0 <_malloc_r+0x68>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	441c      	add	r4, r3
 8006dcc:	6025      	str	r5, [r4, #0]
 8006dce:	e004      	b.n	8006dda <_malloc_r+0x72>
 8006dd0:	6863      	ldr	r3, [r4, #4]
 8006dd2:	42a2      	cmp	r2, r4
 8006dd4:	bf0c      	ite	eq
 8006dd6:	600b      	streq	r3, [r1, #0]
 8006dd8:	6053      	strne	r3, [r2, #4]
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f000 f9ec 	bl	80071b8 <__malloc_unlock>
 8006de0:	f104 000b 	add.w	r0, r4, #11
 8006de4:	1d23      	adds	r3, r4, #4
 8006de6:	f020 0007 	bic.w	r0, r0, #7
 8006dea:	1ac2      	subs	r2, r0, r3
 8006dec:	d0cc      	beq.n	8006d88 <_malloc_r+0x20>
 8006dee:	1a1b      	subs	r3, r3, r0
 8006df0:	50a3      	str	r3, [r4, r2]
 8006df2:	e7c9      	b.n	8006d88 <_malloc_r+0x20>
 8006df4:	4622      	mov	r2, r4
 8006df6:	6864      	ldr	r4, [r4, #4]
 8006df8:	e7cc      	b.n	8006d94 <_malloc_r+0x2c>
 8006dfa:	1cc4      	adds	r4, r0, #3
 8006dfc:	f024 0403 	bic.w	r4, r4, #3
 8006e00:	42a0      	cmp	r0, r4
 8006e02:	d0e3      	beq.n	8006dcc <_malloc_r+0x64>
 8006e04:	1a21      	subs	r1, r4, r0
 8006e06:	4630      	mov	r0, r6
 8006e08:	f000 f964 	bl	80070d4 <_sbrk_r>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d1dd      	bne.n	8006dcc <_malloc_r+0x64>
 8006e10:	e7cf      	b.n	8006db2 <_malloc_r+0x4a>
 8006e12:	bf00      	nop
 8006e14:	20000248 	.word	0x20000248
 8006e18:	2000024c 	.word	0x2000024c

08006e1c <__ssputs_r>:
 8006e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e20:	688e      	ldr	r6, [r1, #8]
 8006e22:	429e      	cmp	r6, r3
 8006e24:	4682      	mov	sl, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	4690      	mov	r8, r2
 8006e2a:	461f      	mov	r7, r3
 8006e2c:	d838      	bhi.n	8006ea0 <__ssputs_r+0x84>
 8006e2e:	898a      	ldrh	r2, [r1, #12]
 8006e30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e34:	d032      	beq.n	8006e9c <__ssputs_r+0x80>
 8006e36:	6825      	ldr	r5, [r4, #0]
 8006e38:	6909      	ldr	r1, [r1, #16]
 8006e3a:	eba5 0901 	sub.w	r9, r5, r1
 8006e3e:	6965      	ldr	r5, [r4, #20]
 8006e40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e48:	3301      	adds	r3, #1
 8006e4a:	444b      	add	r3, r9
 8006e4c:	106d      	asrs	r5, r5, #1
 8006e4e:	429d      	cmp	r5, r3
 8006e50:	bf38      	it	cc
 8006e52:	461d      	movcc	r5, r3
 8006e54:	0553      	lsls	r3, r2, #21
 8006e56:	d531      	bpl.n	8006ebc <__ssputs_r+0xa0>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7ff ff85 	bl	8006d68 <_malloc_r>
 8006e5e:	4606      	mov	r6, r0
 8006e60:	b950      	cbnz	r0, 8006e78 <__ssputs_r+0x5c>
 8006e62:	230c      	movs	r3, #12
 8006e64:	f8ca 3000 	str.w	r3, [sl]
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e78:	6921      	ldr	r1, [r4, #16]
 8006e7a:	464a      	mov	r2, r9
 8006e7c:	f7ff fb88 	bl	8006590 <memcpy>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	6126      	str	r6, [r4, #16]
 8006e8e:	6165      	str	r5, [r4, #20]
 8006e90:	444e      	add	r6, r9
 8006e92:	eba5 0509 	sub.w	r5, r5, r9
 8006e96:	6026      	str	r6, [r4, #0]
 8006e98:	60a5      	str	r5, [r4, #8]
 8006e9a:	463e      	mov	r6, r7
 8006e9c:	42be      	cmp	r6, r7
 8006e9e:	d900      	bls.n	8006ea2 <__ssputs_r+0x86>
 8006ea0:	463e      	mov	r6, r7
 8006ea2:	4632      	mov	r2, r6
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	f000 f966 	bl	8007178 <memmove>
 8006eac:	68a3      	ldr	r3, [r4, #8]
 8006eae:	6822      	ldr	r2, [r4, #0]
 8006eb0:	1b9b      	subs	r3, r3, r6
 8006eb2:	4432      	add	r2, r6
 8006eb4:	60a3      	str	r3, [r4, #8]
 8006eb6:	6022      	str	r2, [r4, #0]
 8006eb8:	2000      	movs	r0, #0
 8006eba:	e7db      	b.n	8006e74 <__ssputs_r+0x58>
 8006ebc:	462a      	mov	r2, r5
 8006ebe:	f000 f981 	bl	80071c4 <_realloc_r>
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d1e1      	bne.n	8006e8c <__ssputs_r+0x70>
 8006ec8:	6921      	ldr	r1, [r4, #16]
 8006eca:	4650      	mov	r0, sl
 8006ecc:	f7ff fefc 	bl	8006cc8 <_free_r>
 8006ed0:	e7c7      	b.n	8006e62 <__ssputs_r+0x46>
	...

08006ed4 <_svfiprintf_r>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	4698      	mov	r8, r3
 8006eda:	898b      	ldrh	r3, [r1, #12]
 8006edc:	061b      	lsls	r3, r3, #24
 8006ede:	b09d      	sub	sp, #116	; 0x74
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	460d      	mov	r5, r1
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	d50e      	bpl.n	8006f06 <_svfiprintf_r+0x32>
 8006ee8:	690b      	ldr	r3, [r1, #16]
 8006eea:	b963      	cbnz	r3, 8006f06 <_svfiprintf_r+0x32>
 8006eec:	2140      	movs	r1, #64	; 0x40
 8006eee:	f7ff ff3b 	bl	8006d68 <_malloc_r>
 8006ef2:	6028      	str	r0, [r5, #0]
 8006ef4:	6128      	str	r0, [r5, #16]
 8006ef6:	b920      	cbnz	r0, 8006f02 <_svfiprintf_r+0x2e>
 8006ef8:	230c      	movs	r3, #12
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	e0d1      	b.n	80070a6 <_svfiprintf_r+0x1d2>
 8006f02:	2340      	movs	r3, #64	; 0x40
 8006f04:	616b      	str	r3, [r5, #20]
 8006f06:	2300      	movs	r3, #0
 8006f08:	9309      	str	r3, [sp, #36]	; 0x24
 8006f0a:	2320      	movs	r3, #32
 8006f0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f14:	2330      	movs	r3, #48	; 0x30
 8006f16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070c0 <_svfiprintf_r+0x1ec>
 8006f1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f1e:	f04f 0901 	mov.w	r9, #1
 8006f22:	4623      	mov	r3, r4
 8006f24:	469a      	mov	sl, r3
 8006f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f2a:	b10a      	cbz	r2, 8006f30 <_svfiprintf_r+0x5c>
 8006f2c:	2a25      	cmp	r2, #37	; 0x25
 8006f2e:	d1f9      	bne.n	8006f24 <_svfiprintf_r+0x50>
 8006f30:	ebba 0b04 	subs.w	fp, sl, r4
 8006f34:	d00b      	beq.n	8006f4e <_svfiprintf_r+0x7a>
 8006f36:	465b      	mov	r3, fp
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f7ff ff6d 	bl	8006e1c <__ssputs_r>
 8006f42:	3001      	adds	r0, #1
 8006f44:	f000 80aa 	beq.w	800709c <_svfiprintf_r+0x1c8>
 8006f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f4a:	445a      	add	r2, fp
 8006f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80a2 	beq.w	800709c <_svfiprintf_r+0x1c8>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f62:	f10a 0a01 	add.w	sl, sl, #1
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	9307      	str	r3, [sp, #28]
 8006f6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f6e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f70:	4654      	mov	r4, sl
 8006f72:	2205      	movs	r2, #5
 8006f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f78:	4851      	ldr	r0, [pc, #324]	; (80070c0 <_svfiprintf_r+0x1ec>)
 8006f7a:	f7f9 f939 	bl	80001f0 <memchr>
 8006f7e:	9a04      	ldr	r2, [sp, #16]
 8006f80:	b9d8      	cbnz	r0, 8006fba <_svfiprintf_r+0xe6>
 8006f82:	06d0      	lsls	r0, r2, #27
 8006f84:	bf44      	itt	mi
 8006f86:	2320      	movmi	r3, #32
 8006f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f8c:	0711      	lsls	r1, r2, #28
 8006f8e:	bf44      	itt	mi
 8006f90:	232b      	movmi	r3, #43	; 0x2b
 8006f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f96:	f89a 3000 	ldrb.w	r3, [sl]
 8006f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f9c:	d015      	beq.n	8006fca <_svfiprintf_r+0xf6>
 8006f9e:	9a07      	ldr	r2, [sp, #28]
 8006fa0:	4654      	mov	r4, sl
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	f04f 0c0a 	mov.w	ip, #10
 8006fa8:	4621      	mov	r1, r4
 8006faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fae:	3b30      	subs	r3, #48	; 0x30
 8006fb0:	2b09      	cmp	r3, #9
 8006fb2:	d94e      	bls.n	8007052 <_svfiprintf_r+0x17e>
 8006fb4:	b1b0      	cbz	r0, 8006fe4 <_svfiprintf_r+0x110>
 8006fb6:	9207      	str	r2, [sp, #28]
 8006fb8:	e014      	b.n	8006fe4 <_svfiprintf_r+0x110>
 8006fba:	eba0 0308 	sub.w	r3, r0, r8
 8006fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	46a2      	mov	sl, r4
 8006fc8:	e7d2      	b.n	8006f70 <_svfiprintf_r+0x9c>
 8006fca:	9b03      	ldr	r3, [sp, #12]
 8006fcc:	1d19      	adds	r1, r3, #4
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	9103      	str	r1, [sp, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bfbb      	ittet	lt
 8006fd6:	425b      	neglt	r3, r3
 8006fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8006fdc:	9307      	strge	r3, [sp, #28]
 8006fde:	9307      	strlt	r3, [sp, #28]
 8006fe0:	bfb8      	it	lt
 8006fe2:	9204      	strlt	r2, [sp, #16]
 8006fe4:	7823      	ldrb	r3, [r4, #0]
 8006fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fe8:	d10c      	bne.n	8007004 <_svfiprintf_r+0x130>
 8006fea:	7863      	ldrb	r3, [r4, #1]
 8006fec:	2b2a      	cmp	r3, #42	; 0x2a
 8006fee:	d135      	bne.n	800705c <_svfiprintf_r+0x188>
 8006ff0:	9b03      	ldr	r3, [sp, #12]
 8006ff2:	1d1a      	adds	r2, r3, #4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	9203      	str	r2, [sp, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bfb8      	it	lt
 8006ffc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007000:	3402      	adds	r4, #2
 8007002:	9305      	str	r3, [sp, #20]
 8007004:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070d0 <_svfiprintf_r+0x1fc>
 8007008:	7821      	ldrb	r1, [r4, #0]
 800700a:	2203      	movs	r2, #3
 800700c:	4650      	mov	r0, sl
 800700e:	f7f9 f8ef 	bl	80001f0 <memchr>
 8007012:	b140      	cbz	r0, 8007026 <_svfiprintf_r+0x152>
 8007014:	2340      	movs	r3, #64	; 0x40
 8007016:	eba0 000a 	sub.w	r0, r0, sl
 800701a:	fa03 f000 	lsl.w	r0, r3, r0
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	4303      	orrs	r3, r0
 8007022:	3401      	adds	r4, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800702a:	4826      	ldr	r0, [pc, #152]	; (80070c4 <_svfiprintf_r+0x1f0>)
 800702c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007030:	2206      	movs	r2, #6
 8007032:	f7f9 f8dd 	bl	80001f0 <memchr>
 8007036:	2800      	cmp	r0, #0
 8007038:	d038      	beq.n	80070ac <_svfiprintf_r+0x1d8>
 800703a:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <_svfiprintf_r+0x1f4>)
 800703c:	bb1b      	cbnz	r3, 8007086 <_svfiprintf_r+0x1b2>
 800703e:	9b03      	ldr	r3, [sp, #12]
 8007040:	3307      	adds	r3, #7
 8007042:	f023 0307 	bic.w	r3, r3, #7
 8007046:	3308      	adds	r3, #8
 8007048:	9303      	str	r3, [sp, #12]
 800704a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704c:	4433      	add	r3, r6
 800704e:	9309      	str	r3, [sp, #36]	; 0x24
 8007050:	e767      	b.n	8006f22 <_svfiprintf_r+0x4e>
 8007052:	fb0c 3202 	mla	r2, ip, r2, r3
 8007056:	460c      	mov	r4, r1
 8007058:	2001      	movs	r0, #1
 800705a:	e7a5      	b.n	8006fa8 <_svfiprintf_r+0xd4>
 800705c:	2300      	movs	r3, #0
 800705e:	3401      	adds	r4, #1
 8007060:	9305      	str	r3, [sp, #20]
 8007062:	4619      	mov	r1, r3
 8007064:	f04f 0c0a 	mov.w	ip, #10
 8007068:	4620      	mov	r0, r4
 800706a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800706e:	3a30      	subs	r2, #48	; 0x30
 8007070:	2a09      	cmp	r2, #9
 8007072:	d903      	bls.n	800707c <_svfiprintf_r+0x1a8>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0c5      	beq.n	8007004 <_svfiprintf_r+0x130>
 8007078:	9105      	str	r1, [sp, #20]
 800707a:	e7c3      	b.n	8007004 <_svfiprintf_r+0x130>
 800707c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007080:	4604      	mov	r4, r0
 8007082:	2301      	movs	r3, #1
 8007084:	e7f0      	b.n	8007068 <_svfiprintf_r+0x194>
 8007086:	ab03      	add	r3, sp, #12
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	462a      	mov	r2, r5
 800708c:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <_svfiprintf_r+0x1f8>)
 800708e:	a904      	add	r1, sp, #16
 8007090:	4638      	mov	r0, r7
 8007092:	f7fe f80f 	bl	80050b4 <_printf_float>
 8007096:	1c42      	adds	r2, r0, #1
 8007098:	4606      	mov	r6, r0
 800709a:	d1d6      	bne.n	800704a <_svfiprintf_r+0x176>
 800709c:	89ab      	ldrh	r3, [r5, #12]
 800709e:	065b      	lsls	r3, r3, #25
 80070a0:	f53f af2c 	bmi.w	8006efc <_svfiprintf_r+0x28>
 80070a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070a6:	b01d      	add	sp, #116	; 0x74
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	ab03      	add	r3, sp, #12
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	462a      	mov	r2, r5
 80070b2:	4b06      	ldr	r3, [pc, #24]	; (80070cc <_svfiprintf_r+0x1f8>)
 80070b4:	a904      	add	r1, sp, #16
 80070b6:	4638      	mov	r0, r7
 80070b8:	f7fe faa0 	bl	80055fc <_printf_i>
 80070bc:	e7eb      	b.n	8007096 <_svfiprintf_r+0x1c2>
 80070be:	bf00      	nop
 80070c0:	08007f1c 	.word	0x08007f1c
 80070c4:	08007f26 	.word	0x08007f26
 80070c8:	080050b5 	.word	0x080050b5
 80070cc:	08006e1d 	.word	0x08006e1d
 80070d0:	08007f22 	.word	0x08007f22

080070d4 <_sbrk_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d06      	ldr	r5, [pc, #24]	; (80070f0 <_sbrk_r+0x1c>)
 80070d8:	2300      	movs	r3, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	f7fa fe58 	bl	8001d94 <_sbrk>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_sbrk_r+0x1a>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_sbrk_r+0x1a>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	2000037c 	.word	0x2000037c

080070f4 <__assert_func>:
 80070f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070f6:	4614      	mov	r4, r2
 80070f8:	461a      	mov	r2, r3
 80070fa:	4b09      	ldr	r3, [pc, #36]	; (8007120 <__assert_func+0x2c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4605      	mov	r5, r0
 8007100:	68d8      	ldr	r0, [r3, #12]
 8007102:	b14c      	cbz	r4, 8007118 <__assert_func+0x24>
 8007104:	4b07      	ldr	r3, [pc, #28]	; (8007124 <__assert_func+0x30>)
 8007106:	9100      	str	r1, [sp, #0]
 8007108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800710c:	4906      	ldr	r1, [pc, #24]	; (8007128 <__assert_func+0x34>)
 800710e:	462b      	mov	r3, r5
 8007110:	f000 f80e 	bl	8007130 <fiprintf>
 8007114:	f000 faa4 	bl	8007660 <abort>
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <__assert_func+0x38>)
 800711a:	461c      	mov	r4, r3
 800711c:	e7f3      	b.n	8007106 <__assert_func+0x12>
 800711e:	bf00      	nop
 8007120:	2000000c 	.word	0x2000000c
 8007124:	08007f2d 	.word	0x08007f2d
 8007128:	08007f3a 	.word	0x08007f3a
 800712c:	08007f68 	.word	0x08007f68

08007130 <fiprintf>:
 8007130:	b40e      	push	{r1, r2, r3}
 8007132:	b503      	push	{r0, r1, lr}
 8007134:	4601      	mov	r1, r0
 8007136:	ab03      	add	r3, sp, #12
 8007138:	4805      	ldr	r0, [pc, #20]	; (8007150 <fiprintf+0x20>)
 800713a:	f853 2b04 	ldr.w	r2, [r3], #4
 800713e:	6800      	ldr	r0, [r0, #0]
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	f000 f88f 	bl	8007264 <_vfiprintf_r>
 8007146:	b002      	add	sp, #8
 8007148:	f85d eb04 	ldr.w	lr, [sp], #4
 800714c:	b003      	add	sp, #12
 800714e:	4770      	bx	lr
 8007150:	2000000c 	.word	0x2000000c

08007154 <__ascii_mbtowc>:
 8007154:	b082      	sub	sp, #8
 8007156:	b901      	cbnz	r1, 800715a <__ascii_mbtowc+0x6>
 8007158:	a901      	add	r1, sp, #4
 800715a:	b142      	cbz	r2, 800716e <__ascii_mbtowc+0x1a>
 800715c:	b14b      	cbz	r3, 8007172 <__ascii_mbtowc+0x1e>
 800715e:	7813      	ldrb	r3, [r2, #0]
 8007160:	600b      	str	r3, [r1, #0]
 8007162:	7812      	ldrb	r2, [r2, #0]
 8007164:	1e10      	subs	r0, r2, #0
 8007166:	bf18      	it	ne
 8007168:	2001      	movne	r0, #1
 800716a:	b002      	add	sp, #8
 800716c:	4770      	bx	lr
 800716e:	4610      	mov	r0, r2
 8007170:	e7fb      	b.n	800716a <__ascii_mbtowc+0x16>
 8007172:	f06f 0001 	mvn.w	r0, #1
 8007176:	e7f8      	b.n	800716a <__ascii_mbtowc+0x16>

08007178 <memmove>:
 8007178:	4288      	cmp	r0, r1
 800717a:	b510      	push	{r4, lr}
 800717c:	eb01 0402 	add.w	r4, r1, r2
 8007180:	d902      	bls.n	8007188 <memmove+0x10>
 8007182:	4284      	cmp	r4, r0
 8007184:	4623      	mov	r3, r4
 8007186:	d807      	bhi.n	8007198 <memmove+0x20>
 8007188:	1e43      	subs	r3, r0, #1
 800718a:	42a1      	cmp	r1, r4
 800718c:	d008      	beq.n	80071a0 <memmove+0x28>
 800718e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007196:	e7f8      	b.n	800718a <memmove+0x12>
 8007198:	4402      	add	r2, r0
 800719a:	4601      	mov	r1, r0
 800719c:	428a      	cmp	r2, r1
 800719e:	d100      	bne.n	80071a2 <memmove+0x2a>
 80071a0:	bd10      	pop	{r4, pc}
 80071a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071aa:	e7f7      	b.n	800719c <memmove+0x24>

080071ac <__malloc_lock>:
 80071ac:	4801      	ldr	r0, [pc, #4]	; (80071b4 <__malloc_lock+0x8>)
 80071ae:	f000 bc17 	b.w	80079e0 <__retarget_lock_acquire_recursive>
 80071b2:	bf00      	nop
 80071b4:	20000384 	.word	0x20000384

080071b8 <__malloc_unlock>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__malloc_unlock+0x8>)
 80071ba:	f000 bc12 	b.w	80079e2 <__retarget_lock_release_recursive>
 80071be:	bf00      	nop
 80071c0:	20000384 	.word	0x20000384

080071c4 <_realloc_r>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	4607      	mov	r7, r0
 80071c8:	4614      	mov	r4, r2
 80071ca:	460e      	mov	r6, r1
 80071cc:	b921      	cbnz	r1, 80071d8 <_realloc_r+0x14>
 80071ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071d2:	4611      	mov	r1, r2
 80071d4:	f7ff bdc8 	b.w	8006d68 <_malloc_r>
 80071d8:	b922      	cbnz	r2, 80071e4 <_realloc_r+0x20>
 80071da:	f7ff fd75 	bl	8006cc8 <_free_r>
 80071de:	4625      	mov	r5, r4
 80071e0:	4628      	mov	r0, r5
 80071e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e4:	f000 fc62 	bl	8007aac <_malloc_usable_size_r>
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d20f      	bcs.n	800720c <_realloc_r+0x48>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff fdba 	bl	8006d68 <_malloc_r>
 80071f4:	4605      	mov	r5, r0
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d0f2      	beq.n	80071e0 <_realloc_r+0x1c>
 80071fa:	4631      	mov	r1, r6
 80071fc:	4622      	mov	r2, r4
 80071fe:	f7ff f9c7 	bl	8006590 <memcpy>
 8007202:	4631      	mov	r1, r6
 8007204:	4638      	mov	r0, r7
 8007206:	f7ff fd5f 	bl	8006cc8 <_free_r>
 800720a:	e7e9      	b.n	80071e0 <_realloc_r+0x1c>
 800720c:	4635      	mov	r5, r6
 800720e:	e7e7      	b.n	80071e0 <_realloc_r+0x1c>

08007210 <__sfputc_r>:
 8007210:	6893      	ldr	r3, [r2, #8]
 8007212:	3b01      	subs	r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	b410      	push	{r4}
 8007218:	6093      	str	r3, [r2, #8]
 800721a:	da08      	bge.n	800722e <__sfputc_r+0x1e>
 800721c:	6994      	ldr	r4, [r2, #24]
 800721e:	42a3      	cmp	r3, r4
 8007220:	db01      	blt.n	8007226 <__sfputc_r+0x16>
 8007222:	290a      	cmp	r1, #10
 8007224:	d103      	bne.n	800722e <__sfputc_r+0x1e>
 8007226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800722a:	f000 b94b 	b.w	80074c4 <__swbuf_r>
 800722e:	6813      	ldr	r3, [r2, #0]
 8007230:	1c58      	adds	r0, r3, #1
 8007232:	6010      	str	r0, [r2, #0]
 8007234:	7019      	strb	r1, [r3, #0]
 8007236:	4608      	mov	r0, r1
 8007238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800723c:	4770      	bx	lr

0800723e <__sfputs_r>:
 800723e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007240:	4606      	mov	r6, r0
 8007242:	460f      	mov	r7, r1
 8007244:	4614      	mov	r4, r2
 8007246:	18d5      	adds	r5, r2, r3
 8007248:	42ac      	cmp	r4, r5
 800724a:	d101      	bne.n	8007250 <__sfputs_r+0x12>
 800724c:	2000      	movs	r0, #0
 800724e:	e007      	b.n	8007260 <__sfputs_r+0x22>
 8007250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007254:	463a      	mov	r2, r7
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff ffda 	bl	8007210 <__sfputc_r>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d1f3      	bne.n	8007248 <__sfputs_r+0xa>
 8007260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007264 <_vfiprintf_r>:
 8007264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	460d      	mov	r5, r1
 800726a:	b09d      	sub	sp, #116	; 0x74
 800726c:	4614      	mov	r4, r2
 800726e:	4698      	mov	r8, r3
 8007270:	4606      	mov	r6, r0
 8007272:	b118      	cbz	r0, 800727c <_vfiprintf_r+0x18>
 8007274:	6983      	ldr	r3, [r0, #24]
 8007276:	b90b      	cbnz	r3, 800727c <_vfiprintf_r+0x18>
 8007278:	f000 fb14 	bl	80078a4 <__sinit>
 800727c:	4b89      	ldr	r3, [pc, #548]	; (80074a4 <_vfiprintf_r+0x240>)
 800727e:	429d      	cmp	r5, r3
 8007280:	d11b      	bne.n	80072ba <_vfiprintf_r+0x56>
 8007282:	6875      	ldr	r5, [r6, #4]
 8007284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007286:	07d9      	lsls	r1, r3, #31
 8007288:	d405      	bmi.n	8007296 <_vfiprintf_r+0x32>
 800728a:	89ab      	ldrh	r3, [r5, #12]
 800728c:	059a      	lsls	r2, r3, #22
 800728e:	d402      	bmi.n	8007296 <_vfiprintf_r+0x32>
 8007290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007292:	f000 fba5 	bl	80079e0 <__retarget_lock_acquire_recursive>
 8007296:	89ab      	ldrh	r3, [r5, #12]
 8007298:	071b      	lsls	r3, r3, #28
 800729a:	d501      	bpl.n	80072a0 <_vfiprintf_r+0x3c>
 800729c:	692b      	ldr	r3, [r5, #16]
 800729e:	b9eb      	cbnz	r3, 80072dc <_vfiprintf_r+0x78>
 80072a0:	4629      	mov	r1, r5
 80072a2:	4630      	mov	r0, r6
 80072a4:	f000 f96e 	bl	8007584 <__swsetup_r>
 80072a8:	b1c0      	cbz	r0, 80072dc <_vfiprintf_r+0x78>
 80072aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ac:	07dc      	lsls	r4, r3, #31
 80072ae:	d50e      	bpl.n	80072ce <_vfiprintf_r+0x6a>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	b01d      	add	sp, #116	; 0x74
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	4b7b      	ldr	r3, [pc, #492]	; (80074a8 <_vfiprintf_r+0x244>)
 80072bc:	429d      	cmp	r5, r3
 80072be:	d101      	bne.n	80072c4 <_vfiprintf_r+0x60>
 80072c0:	68b5      	ldr	r5, [r6, #8]
 80072c2:	e7df      	b.n	8007284 <_vfiprintf_r+0x20>
 80072c4:	4b79      	ldr	r3, [pc, #484]	; (80074ac <_vfiprintf_r+0x248>)
 80072c6:	429d      	cmp	r5, r3
 80072c8:	bf08      	it	eq
 80072ca:	68f5      	ldreq	r5, [r6, #12]
 80072cc:	e7da      	b.n	8007284 <_vfiprintf_r+0x20>
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	0598      	lsls	r0, r3, #22
 80072d2:	d4ed      	bmi.n	80072b0 <_vfiprintf_r+0x4c>
 80072d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072d6:	f000 fb84 	bl	80079e2 <__retarget_lock_release_recursive>
 80072da:	e7e9      	b.n	80072b0 <_vfiprintf_r+0x4c>
 80072dc:	2300      	movs	r3, #0
 80072de:	9309      	str	r3, [sp, #36]	; 0x24
 80072e0:	2320      	movs	r3, #32
 80072e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ea:	2330      	movs	r3, #48	; 0x30
 80072ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074b0 <_vfiprintf_r+0x24c>
 80072f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072f4:	f04f 0901 	mov.w	r9, #1
 80072f8:	4623      	mov	r3, r4
 80072fa:	469a      	mov	sl, r3
 80072fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007300:	b10a      	cbz	r2, 8007306 <_vfiprintf_r+0xa2>
 8007302:	2a25      	cmp	r2, #37	; 0x25
 8007304:	d1f9      	bne.n	80072fa <_vfiprintf_r+0x96>
 8007306:	ebba 0b04 	subs.w	fp, sl, r4
 800730a:	d00b      	beq.n	8007324 <_vfiprintf_r+0xc0>
 800730c:	465b      	mov	r3, fp
 800730e:	4622      	mov	r2, r4
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ff93 	bl	800723e <__sfputs_r>
 8007318:	3001      	adds	r0, #1
 800731a:	f000 80aa 	beq.w	8007472 <_vfiprintf_r+0x20e>
 800731e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007320:	445a      	add	r2, fp
 8007322:	9209      	str	r2, [sp, #36]	; 0x24
 8007324:	f89a 3000 	ldrb.w	r3, [sl]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 80a2 	beq.w	8007472 <_vfiprintf_r+0x20e>
 800732e:	2300      	movs	r3, #0
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007338:	f10a 0a01 	add.w	sl, sl, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007344:	931a      	str	r3, [sp, #104]	; 0x68
 8007346:	4654      	mov	r4, sl
 8007348:	2205      	movs	r2, #5
 800734a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800734e:	4858      	ldr	r0, [pc, #352]	; (80074b0 <_vfiprintf_r+0x24c>)
 8007350:	f7f8 ff4e 	bl	80001f0 <memchr>
 8007354:	9a04      	ldr	r2, [sp, #16]
 8007356:	b9d8      	cbnz	r0, 8007390 <_vfiprintf_r+0x12c>
 8007358:	06d1      	lsls	r1, r2, #27
 800735a:	bf44      	itt	mi
 800735c:	2320      	movmi	r3, #32
 800735e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007362:	0713      	lsls	r3, r2, #28
 8007364:	bf44      	itt	mi
 8007366:	232b      	movmi	r3, #43	; 0x2b
 8007368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800736c:	f89a 3000 	ldrb.w	r3, [sl]
 8007370:	2b2a      	cmp	r3, #42	; 0x2a
 8007372:	d015      	beq.n	80073a0 <_vfiprintf_r+0x13c>
 8007374:	9a07      	ldr	r2, [sp, #28]
 8007376:	4654      	mov	r4, sl
 8007378:	2000      	movs	r0, #0
 800737a:	f04f 0c0a 	mov.w	ip, #10
 800737e:	4621      	mov	r1, r4
 8007380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007384:	3b30      	subs	r3, #48	; 0x30
 8007386:	2b09      	cmp	r3, #9
 8007388:	d94e      	bls.n	8007428 <_vfiprintf_r+0x1c4>
 800738a:	b1b0      	cbz	r0, 80073ba <_vfiprintf_r+0x156>
 800738c:	9207      	str	r2, [sp, #28]
 800738e:	e014      	b.n	80073ba <_vfiprintf_r+0x156>
 8007390:	eba0 0308 	sub.w	r3, r0, r8
 8007394:	fa09 f303 	lsl.w	r3, r9, r3
 8007398:	4313      	orrs	r3, r2
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	46a2      	mov	sl, r4
 800739e:	e7d2      	b.n	8007346 <_vfiprintf_r+0xe2>
 80073a0:	9b03      	ldr	r3, [sp, #12]
 80073a2:	1d19      	adds	r1, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	9103      	str	r1, [sp, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bfbb      	ittet	lt
 80073ac:	425b      	neglt	r3, r3
 80073ae:	f042 0202 	orrlt.w	r2, r2, #2
 80073b2:	9307      	strge	r3, [sp, #28]
 80073b4:	9307      	strlt	r3, [sp, #28]
 80073b6:	bfb8      	it	lt
 80073b8:	9204      	strlt	r2, [sp, #16]
 80073ba:	7823      	ldrb	r3, [r4, #0]
 80073bc:	2b2e      	cmp	r3, #46	; 0x2e
 80073be:	d10c      	bne.n	80073da <_vfiprintf_r+0x176>
 80073c0:	7863      	ldrb	r3, [r4, #1]
 80073c2:	2b2a      	cmp	r3, #42	; 0x2a
 80073c4:	d135      	bne.n	8007432 <_vfiprintf_r+0x1ce>
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	1d1a      	adds	r2, r3, #4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	9203      	str	r2, [sp, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bfb8      	it	lt
 80073d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80073d6:	3402      	adds	r4, #2
 80073d8:	9305      	str	r3, [sp, #20]
 80073da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074c0 <_vfiprintf_r+0x25c>
 80073de:	7821      	ldrb	r1, [r4, #0]
 80073e0:	2203      	movs	r2, #3
 80073e2:	4650      	mov	r0, sl
 80073e4:	f7f8 ff04 	bl	80001f0 <memchr>
 80073e8:	b140      	cbz	r0, 80073fc <_vfiprintf_r+0x198>
 80073ea:	2340      	movs	r3, #64	; 0x40
 80073ec:	eba0 000a 	sub.w	r0, r0, sl
 80073f0:	fa03 f000 	lsl.w	r0, r3, r0
 80073f4:	9b04      	ldr	r3, [sp, #16]
 80073f6:	4303      	orrs	r3, r0
 80073f8:	3401      	adds	r4, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007400:	482c      	ldr	r0, [pc, #176]	; (80074b4 <_vfiprintf_r+0x250>)
 8007402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007406:	2206      	movs	r2, #6
 8007408:	f7f8 fef2 	bl	80001f0 <memchr>
 800740c:	2800      	cmp	r0, #0
 800740e:	d03f      	beq.n	8007490 <_vfiprintf_r+0x22c>
 8007410:	4b29      	ldr	r3, [pc, #164]	; (80074b8 <_vfiprintf_r+0x254>)
 8007412:	bb1b      	cbnz	r3, 800745c <_vfiprintf_r+0x1f8>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	3307      	adds	r3, #7
 8007418:	f023 0307 	bic.w	r3, r3, #7
 800741c:	3308      	adds	r3, #8
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007422:	443b      	add	r3, r7
 8007424:	9309      	str	r3, [sp, #36]	; 0x24
 8007426:	e767      	b.n	80072f8 <_vfiprintf_r+0x94>
 8007428:	fb0c 3202 	mla	r2, ip, r2, r3
 800742c:	460c      	mov	r4, r1
 800742e:	2001      	movs	r0, #1
 8007430:	e7a5      	b.n	800737e <_vfiprintf_r+0x11a>
 8007432:	2300      	movs	r3, #0
 8007434:	3401      	adds	r4, #1
 8007436:	9305      	str	r3, [sp, #20]
 8007438:	4619      	mov	r1, r3
 800743a:	f04f 0c0a 	mov.w	ip, #10
 800743e:	4620      	mov	r0, r4
 8007440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007444:	3a30      	subs	r2, #48	; 0x30
 8007446:	2a09      	cmp	r2, #9
 8007448:	d903      	bls.n	8007452 <_vfiprintf_r+0x1ee>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0c5      	beq.n	80073da <_vfiprintf_r+0x176>
 800744e:	9105      	str	r1, [sp, #20]
 8007450:	e7c3      	b.n	80073da <_vfiprintf_r+0x176>
 8007452:	fb0c 2101 	mla	r1, ip, r1, r2
 8007456:	4604      	mov	r4, r0
 8007458:	2301      	movs	r3, #1
 800745a:	e7f0      	b.n	800743e <_vfiprintf_r+0x1da>
 800745c:	ab03      	add	r3, sp, #12
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	462a      	mov	r2, r5
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <_vfiprintf_r+0x258>)
 8007464:	a904      	add	r1, sp, #16
 8007466:	4630      	mov	r0, r6
 8007468:	f7fd fe24 	bl	80050b4 <_printf_float>
 800746c:	4607      	mov	r7, r0
 800746e:	1c78      	adds	r0, r7, #1
 8007470:	d1d6      	bne.n	8007420 <_vfiprintf_r+0x1bc>
 8007472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007474:	07d9      	lsls	r1, r3, #31
 8007476:	d405      	bmi.n	8007484 <_vfiprintf_r+0x220>
 8007478:	89ab      	ldrh	r3, [r5, #12]
 800747a:	059a      	lsls	r2, r3, #22
 800747c:	d402      	bmi.n	8007484 <_vfiprintf_r+0x220>
 800747e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007480:	f000 faaf 	bl	80079e2 <__retarget_lock_release_recursive>
 8007484:	89ab      	ldrh	r3, [r5, #12]
 8007486:	065b      	lsls	r3, r3, #25
 8007488:	f53f af12 	bmi.w	80072b0 <_vfiprintf_r+0x4c>
 800748c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800748e:	e711      	b.n	80072b4 <_vfiprintf_r+0x50>
 8007490:	ab03      	add	r3, sp, #12
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	462a      	mov	r2, r5
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <_vfiprintf_r+0x258>)
 8007498:	a904      	add	r1, sp, #16
 800749a:	4630      	mov	r0, r6
 800749c:	f7fe f8ae 	bl	80055fc <_printf_i>
 80074a0:	e7e4      	b.n	800746c <_vfiprintf_r+0x208>
 80074a2:	bf00      	nop
 80074a4:	08008094 	.word	0x08008094
 80074a8:	080080b4 	.word	0x080080b4
 80074ac:	08008074 	.word	0x08008074
 80074b0:	08007f1c 	.word	0x08007f1c
 80074b4:	08007f26 	.word	0x08007f26
 80074b8:	080050b5 	.word	0x080050b5
 80074bc:	0800723f 	.word	0x0800723f
 80074c0:	08007f22 	.word	0x08007f22

080074c4 <__swbuf_r>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	460e      	mov	r6, r1
 80074c8:	4614      	mov	r4, r2
 80074ca:	4605      	mov	r5, r0
 80074cc:	b118      	cbz	r0, 80074d6 <__swbuf_r+0x12>
 80074ce:	6983      	ldr	r3, [r0, #24]
 80074d0:	b90b      	cbnz	r3, 80074d6 <__swbuf_r+0x12>
 80074d2:	f000 f9e7 	bl	80078a4 <__sinit>
 80074d6:	4b21      	ldr	r3, [pc, #132]	; (800755c <__swbuf_r+0x98>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	d12b      	bne.n	8007534 <__swbuf_r+0x70>
 80074dc:	686c      	ldr	r4, [r5, #4]
 80074de:	69a3      	ldr	r3, [r4, #24]
 80074e0:	60a3      	str	r3, [r4, #8]
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	071a      	lsls	r2, r3, #28
 80074e6:	d52f      	bpl.n	8007548 <__swbuf_r+0x84>
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	b36b      	cbz	r3, 8007548 <__swbuf_r+0x84>
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	1ac0      	subs	r0, r0, r3
 80074f2:	6963      	ldr	r3, [r4, #20]
 80074f4:	b2f6      	uxtb	r6, r6
 80074f6:	4283      	cmp	r3, r0
 80074f8:	4637      	mov	r7, r6
 80074fa:	dc04      	bgt.n	8007506 <__swbuf_r+0x42>
 80074fc:	4621      	mov	r1, r4
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 f93c 	bl	800777c <_fflush_r>
 8007504:	bb30      	cbnz	r0, 8007554 <__swbuf_r+0x90>
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	3b01      	subs	r3, #1
 800750a:	60a3      	str	r3, [r4, #8]
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	701e      	strb	r6, [r3, #0]
 8007514:	6963      	ldr	r3, [r4, #20]
 8007516:	3001      	adds	r0, #1
 8007518:	4283      	cmp	r3, r0
 800751a:	d004      	beq.n	8007526 <__swbuf_r+0x62>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	07db      	lsls	r3, r3, #31
 8007520:	d506      	bpl.n	8007530 <__swbuf_r+0x6c>
 8007522:	2e0a      	cmp	r6, #10
 8007524:	d104      	bne.n	8007530 <__swbuf_r+0x6c>
 8007526:	4621      	mov	r1, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f927 	bl	800777c <_fflush_r>
 800752e:	b988      	cbnz	r0, 8007554 <__swbuf_r+0x90>
 8007530:	4638      	mov	r0, r7
 8007532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <__swbuf_r+0x9c>)
 8007536:	429c      	cmp	r4, r3
 8007538:	d101      	bne.n	800753e <__swbuf_r+0x7a>
 800753a:	68ac      	ldr	r4, [r5, #8]
 800753c:	e7cf      	b.n	80074de <__swbuf_r+0x1a>
 800753e:	4b09      	ldr	r3, [pc, #36]	; (8007564 <__swbuf_r+0xa0>)
 8007540:	429c      	cmp	r4, r3
 8007542:	bf08      	it	eq
 8007544:	68ec      	ldreq	r4, [r5, #12]
 8007546:	e7ca      	b.n	80074de <__swbuf_r+0x1a>
 8007548:	4621      	mov	r1, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f000 f81a 	bl	8007584 <__swsetup_r>
 8007550:	2800      	cmp	r0, #0
 8007552:	d0cb      	beq.n	80074ec <__swbuf_r+0x28>
 8007554:	f04f 37ff 	mov.w	r7, #4294967295
 8007558:	e7ea      	b.n	8007530 <__swbuf_r+0x6c>
 800755a:	bf00      	nop
 800755c:	08008094 	.word	0x08008094
 8007560:	080080b4 	.word	0x080080b4
 8007564:	08008074 	.word	0x08008074

08007568 <__ascii_wctomb>:
 8007568:	b149      	cbz	r1, 800757e <__ascii_wctomb+0x16>
 800756a:	2aff      	cmp	r2, #255	; 0xff
 800756c:	bf85      	ittet	hi
 800756e:	238a      	movhi	r3, #138	; 0x8a
 8007570:	6003      	strhi	r3, [r0, #0]
 8007572:	700a      	strbls	r2, [r1, #0]
 8007574:	f04f 30ff 	movhi.w	r0, #4294967295
 8007578:	bf98      	it	ls
 800757a:	2001      	movls	r0, #1
 800757c:	4770      	bx	lr
 800757e:	4608      	mov	r0, r1
 8007580:	4770      	bx	lr
	...

08007584 <__swsetup_r>:
 8007584:	4b32      	ldr	r3, [pc, #200]	; (8007650 <__swsetup_r+0xcc>)
 8007586:	b570      	push	{r4, r5, r6, lr}
 8007588:	681d      	ldr	r5, [r3, #0]
 800758a:	4606      	mov	r6, r0
 800758c:	460c      	mov	r4, r1
 800758e:	b125      	cbz	r5, 800759a <__swsetup_r+0x16>
 8007590:	69ab      	ldr	r3, [r5, #24]
 8007592:	b913      	cbnz	r3, 800759a <__swsetup_r+0x16>
 8007594:	4628      	mov	r0, r5
 8007596:	f000 f985 	bl	80078a4 <__sinit>
 800759a:	4b2e      	ldr	r3, [pc, #184]	; (8007654 <__swsetup_r+0xd0>)
 800759c:	429c      	cmp	r4, r3
 800759e:	d10f      	bne.n	80075c0 <__swsetup_r+0x3c>
 80075a0:	686c      	ldr	r4, [r5, #4]
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a8:	0719      	lsls	r1, r3, #28
 80075aa:	d42c      	bmi.n	8007606 <__swsetup_r+0x82>
 80075ac:	06dd      	lsls	r5, r3, #27
 80075ae:	d411      	bmi.n	80075d4 <__swsetup_r+0x50>
 80075b0:	2309      	movs	r3, #9
 80075b2:	6033      	str	r3, [r6, #0]
 80075b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075b8:	81a3      	strh	r3, [r4, #12]
 80075ba:	f04f 30ff 	mov.w	r0, #4294967295
 80075be:	e03e      	b.n	800763e <__swsetup_r+0xba>
 80075c0:	4b25      	ldr	r3, [pc, #148]	; (8007658 <__swsetup_r+0xd4>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d101      	bne.n	80075ca <__swsetup_r+0x46>
 80075c6:	68ac      	ldr	r4, [r5, #8]
 80075c8:	e7eb      	b.n	80075a2 <__swsetup_r+0x1e>
 80075ca:	4b24      	ldr	r3, [pc, #144]	; (800765c <__swsetup_r+0xd8>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	bf08      	it	eq
 80075d0:	68ec      	ldreq	r4, [r5, #12]
 80075d2:	e7e6      	b.n	80075a2 <__swsetup_r+0x1e>
 80075d4:	0758      	lsls	r0, r3, #29
 80075d6:	d512      	bpl.n	80075fe <__swsetup_r+0x7a>
 80075d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075da:	b141      	cbz	r1, 80075ee <__swsetup_r+0x6a>
 80075dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e0:	4299      	cmp	r1, r3
 80075e2:	d002      	beq.n	80075ea <__swsetup_r+0x66>
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff fb6f 	bl	8006cc8 <_free_r>
 80075ea:	2300      	movs	r3, #0
 80075ec:	6363      	str	r3, [r4, #52]	; 0x34
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	2300      	movs	r3, #0
 80075f8:	6063      	str	r3, [r4, #4]
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f043 0308 	orr.w	r3, r3, #8
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	b94b      	cbnz	r3, 800761e <__swsetup_r+0x9a>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007614:	d003      	beq.n	800761e <__swsetup_r+0x9a>
 8007616:	4621      	mov	r1, r4
 8007618:	4630      	mov	r0, r6
 800761a:	f000 fa07 	bl	8007a2c <__smakebuf_r>
 800761e:	89a0      	ldrh	r0, [r4, #12]
 8007620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007624:	f010 0301 	ands.w	r3, r0, #1
 8007628:	d00a      	beq.n	8007640 <__swsetup_r+0xbc>
 800762a:	2300      	movs	r3, #0
 800762c:	60a3      	str	r3, [r4, #8]
 800762e:	6963      	ldr	r3, [r4, #20]
 8007630:	425b      	negs	r3, r3
 8007632:	61a3      	str	r3, [r4, #24]
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	b943      	cbnz	r3, 800764a <__swsetup_r+0xc6>
 8007638:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800763c:	d1ba      	bne.n	80075b4 <__swsetup_r+0x30>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	0781      	lsls	r1, r0, #30
 8007642:	bf58      	it	pl
 8007644:	6963      	ldrpl	r3, [r4, #20]
 8007646:	60a3      	str	r3, [r4, #8]
 8007648:	e7f4      	b.n	8007634 <__swsetup_r+0xb0>
 800764a:	2000      	movs	r0, #0
 800764c:	e7f7      	b.n	800763e <__swsetup_r+0xba>
 800764e:	bf00      	nop
 8007650:	2000000c 	.word	0x2000000c
 8007654:	08008094 	.word	0x08008094
 8007658:	080080b4 	.word	0x080080b4
 800765c:	08008074 	.word	0x08008074

08007660 <abort>:
 8007660:	b508      	push	{r3, lr}
 8007662:	2006      	movs	r0, #6
 8007664:	f000 fa52 	bl	8007b0c <raise>
 8007668:	2001      	movs	r0, #1
 800766a:	f7fa fb1b 	bl	8001ca4 <_exit>
	...

08007670 <__sflush_r>:
 8007670:	898a      	ldrh	r2, [r1, #12]
 8007672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007676:	4605      	mov	r5, r0
 8007678:	0710      	lsls	r0, r2, #28
 800767a:	460c      	mov	r4, r1
 800767c:	d458      	bmi.n	8007730 <__sflush_r+0xc0>
 800767e:	684b      	ldr	r3, [r1, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	dc05      	bgt.n	8007690 <__sflush_r+0x20>
 8007684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	dc02      	bgt.n	8007690 <__sflush_r+0x20>
 800768a:	2000      	movs	r0, #0
 800768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007692:	2e00      	cmp	r6, #0
 8007694:	d0f9      	beq.n	800768a <__sflush_r+0x1a>
 8007696:	2300      	movs	r3, #0
 8007698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800769c:	682f      	ldr	r7, [r5, #0]
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	d032      	beq.n	8007708 <__sflush_r+0x98>
 80076a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	075a      	lsls	r2, r3, #29
 80076a8:	d505      	bpl.n	80076b6 <__sflush_r+0x46>
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	1ac0      	subs	r0, r0, r3
 80076ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076b0:	b10b      	cbz	r3, 80076b6 <__sflush_r+0x46>
 80076b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076b4:	1ac0      	subs	r0, r0, r3
 80076b6:	2300      	movs	r3, #0
 80076b8:	4602      	mov	r2, r0
 80076ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076bc:	6a21      	ldr	r1, [r4, #32]
 80076be:	4628      	mov	r0, r5
 80076c0:	47b0      	blx	r6
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	d106      	bne.n	80076d6 <__sflush_r+0x66>
 80076c8:	6829      	ldr	r1, [r5, #0]
 80076ca:	291d      	cmp	r1, #29
 80076cc:	d82c      	bhi.n	8007728 <__sflush_r+0xb8>
 80076ce:	4a2a      	ldr	r2, [pc, #168]	; (8007778 <__sflush_r+0x108>)
 80076d0:	40ca      	lsrs	r2, r1
 80076d2:	07d6      	lsls	r6, r2, #31
 80076d4:	d528      	bpl.n	8007728 <__sflush_r+0xb8>
 80076d6:	2200      	movs	r2, #0
 80076d8:	6062      	str	r2, [r4, #4]
 80076da:	04d9      	lsls	r1, r3, #19
 80076dc:	6922      	ldr	r2, [r4, #16]
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	d504      	bpl.n	80076ec <__sflush_r+0x7c>
 80076e2:	1c42      	adds	r2, r0, #1
 80076e4:	d101      	bne.n	80076ea <__sflush_r+0x7a>
 80076e6:	682b      	ldr	r3, [r5, #0]
 80076e8:	b903      	cbnz	r3, 80076ec <__sflush_r+0x7c>
 80076ea:	6560      	str	r0, [r4, #84]	; 0x54
 80076ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ee:	602f      	str	r7, [r5, #0]
 80076f0:	2900      	cmp	r1, #0
 80076f2:	d0ca      	beq.n	800768a <__sflush_r+0x1a>
 80076f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076f8:	4299      	cmp	r1, r3
 80076fa:	d002      	beq.n	8007702 <__sflush_r+0x92>
 80076fc:	4628      	mov	r0, r5
 80076fe:	f7ff fae3 	bl	8006cc8 <_free_r>
 8007702:	2000      	movs	r0, #0
 8007704:	6360      	str	r0, [r4, #52]	; 0x34
 8007706:	e7c1      	b.n	800768c <__sflush_r+0x1c>
 8007708:	6a21      	ldr	r1, [r4, #32]
 800770a:	2301      	movs	r3, #1
 800770c:	4628      	mov	r0, r5
 800770e:	47b0      	blx	r6
 8007710:	1c41      	adds	r1, r0, #1
 8007712:	d1c7      	bne.n	80076a4 <__sflush_r+0x34>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0c4      	beq.n	80076a4 <__sflush_r+0x34>
 800771a:	2b1d      	cmp	r3, #29
 800771c:	d001      	beq.n	8007722 <__sflush_r+0xb2>
 800771e:	2b16      	cmp	r3, #22
 8007720:	d101      	bne.n	8007726 <__sflush_r+0xb6>
 8007722:	602f      	str	r7, [r5, #0]
 8007724:	e7b1      	b.n	800768a <__sflush_r+0x1a>
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	e7ad      	b.n	800768c <__sflush_r+0x1c>
 8007730:	690f      	ldr	r7, [r1, #16]
 8007732:	2f00      	cmp	r7, #0
 8007734:	d0a9      	beq.n	800768a <__sflush_r+0x1a>
 8007736:	0793      	lsls	r3, r2, #30
 8007738:	680e      	ldr	r6, [r1, #0]
 800773a:	bf08      	it	eq
 800773c:	694b      	ldreq	r3, [r1, #20]
 800773e:	600f      	str	r7, [r1, #0]
 8007740:	bf18      	it	ne
 8007742:	2300      	movne	r3, #0
 8007744:	eba6 0807 	sub.w	r8, r6, r7
 8007748:	608b      	str	r3, [r1, #8]
 800774a:	f1b8 0f00 	cmp.w	r8, #0
 800774e:	dd9c      	ble.n	800768a <__sflush_r+0x1a>
 8007750:	6a21      	ldr	r1, [r4, #32]
 8007752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007754:	4643      	mov	r3, r8
 8007756:	463a      	mov	r2, r7
 8007758:	4628      	mov	r0, r5
 800775a:	47b0      	blx	r6
 800775c:	2800      	cmp	r0, #0
 800775e:	dc06      	bgt.n	800776e <__sflush_r+0xfe>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	e78e      	b.n	800768c <__sflush_r+0x1c>
 800776e:	4407      	add	r7, r0
 8007770:	eba8 0800 	sub.w	r8, r8, r0
 8007774:	e7e9      	b.n	800774a <__sflush_r+0xda>
 8007776:	bf00      	nop
 8007778:	20400001 	.word	0x20400001

0800777c <_fflush_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	4605      	mov	r5, r0
 8007782:	460c      	mov	r4, r1
 8007784:	b913      	cbnz	r3, 800778c <_fflush_r+0x10>
 8007786:	2500      	movs	r5, #0
 8007788:	4628      	mov	r0, r5
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	b118      	cbz	r0, 8007796 <_fflush_r+0x1a>
 800778e:	6983      	ldr	r3, [r0, #24]
 8007790:	b90b      	cbnz	r3, 8007796 <_fflush_r+0x1a>
 8007792:	f000 f887 	bl	80078a4 <__sinit>
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <_fflush_r+0x6c>)
 8007798:	429c      	cmp	r4, r3
 800779a:	d11b      	bne.n	80077d4 <_fflush_r+0x58>
 800779c:	686c      	ldr	r4, [r5, #4]
 800779e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0ef      	beq.n	8007786 <_fflush_r+0xa>
 80077a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077a8:	07d0      	lsls	r0, r2, #31
 80077aa:	d404      	bmi.n	80077b6 <_fflush_r+0x3a>
 80077ac:	0599      	lsls	r1, r3, #22
 80077ae:	d402      	bmi.n	80077b6 <_fflush_r+0x3a>
 80077b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b2:	f000 f915 	bl	80079e0 <__retarget_lock_acquire_recursive>
 80077b6:	4628      	mov	r0, r5
 80077b8:	4621      	mov	r1, r4
 80077ba:	f7ff ff59 	bl	8007670 <__sflush_r>
 80077be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c0:	07da      	lsls	r2, r3, #31
 80077c2:	4605      	mov	r5, r0
 80077c4:	d4e0      	bmi.n	8007788 <_fflush_r+0xc>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	059b      	lsls	r3, r3, #22
 80077ca:	d4dd      	bmi.n	8007788 <_fflush_r+0xc>
 80077cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ce:	f000 f908 	bl	80079e2 <__retarget_lock_release_recursive>
 80077d2:	e7d9      	b.n	8007788 <_fflush_r+0xc>
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <_fflush_r+0x70>)
 80077d6:	429c      	cmp	r4, r3
 80077d8:	d101      	bne.n	80077de <_fflush_r+0x62>
 80077da:	68ac      	ldr	r4, [r5, #8]
 80077dc:	e7df      	b.n	800779e <_fflush_r+0x22>
 80077de:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <_fflush_r+0x74>)
 80077e0:	429c      	cmp	r4, r3
 80077e2:	bf08      	it	eq
 80077e4:	68ec      	ldreq	r4, [r5, #12]
 80077e6:	e7da      	b.n	800779e <_fflush_r+0x22>
 80077e8:	08008094 	.word	0x08008094
 80077ec:	080080b4 	.word	0x080080b4
 80077f0:	08008074 	.word	0x08008074

080077f4 <std>:
 80077f4:	2300      	movs	r3, #0
 80077f6:	b510      	push	{r4, lr}
 80077f8:	4604      	mov	r4, r0
 80077fa:	e9c0 3300 	strd	r3, r3, [r0]
 80077fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007802:	6083      	str	r3, [r0, #8]
 8007804:	8181      	strh	r1, [r0, #12]
 8007806:	6643      	str	r3, [r0, #100]	; 0x64
 8007808:	81c2      	strh	r2, [r0, #14]
 800780a:	6183      	str	r3, [r0, #24]
 800780c:	4619      	mov	r1, r3
 800780e:	2208      	movs	r2, #8
 8007810:	305c      	adds	r0, #92	; 0x5c
 8007812:	f7fd fba7 	bl	8004f64 <memset>
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <std+0x38>)
 8007818:	6263      	str	r3, [r4, #36]	; 0x24
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <std+0x3c>)
 800781c:	62a3      	str	r3, [r4, #40]	; 0x28
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <std+0x40>)
 8007820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007822:	4b05      	ldr	r3, [pc, #20]	; (8007838 <std+0x44>)
 8007824:	6224      	str	r4, [r4, #32]
 8007826:	6323      	str	r3, [r4, #48]	; 0x30
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	08007b45 	.word	0x08007b45
 8007830:	08007b67 	.word	0x08007b67
 8007834:	08007b9f 	.word	0x08007b9f
 8007838:	08007bc3 	.word	0x08007bc3

0800783c <_cleanup_r>:
 800783c:	4901      	ldr	r1, [pc, #4]	; (8007844 <_cleanup_r+0x8>)
 800783e:	f000 b8af 	b.w	80079a0 <_fwalk_reent>
 8007842:	bf00      	nop
 8007844:	0800777d 	.word	0x0800777d

08007848 <__sfmoreglue>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	1e4a      	subs	r2, r1, #1
 800784c:	2568      	movs	r5, #104	; 0x68
 800784e:	4355      	muls	r5, r2
 8007850:	460e      	mov	r6, r1
 8007852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007856:	f7ff fa87 	bl	8006d68 <_malloc_r>
 800785a:	4604      	mov	r4, r0
 800785c:	b140      	cbz	r0, 8007870 <__sfmoreglue+0x28>
 800785e:	2100      	movs	r1, #0
 8007860:	e9c0 1600 	strd	r1, r6, [r0]
 8007864:	300c      	adds	r0, #12
 8007866:	60a0      	str	r0, [r4, #8]
 8007868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800786c:	f7fd fb7a 	bl	8004f64 <memset>
 8007870:	4620      	mov	r0, r4
 8007872:	bd70      	pop	{r4, r5, r6, pc}

08007874 <__sfp_lock_acquire>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__sfp_lock_acquire+0x8>)
 8007876:	f000 b8b3 	b.w	80079e0 <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	20000388 	.word	0x20000388

08007880 <__sfp_lock_release>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__sfp_lock_release+0x8>)
 8007882:	f000 b8ae 	b.w	80079e2 <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	20000388 	.word	0x20000388

0800788c <__sinit_lock_acquire>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__sinit_lock_acquire+0x8>)
 800788e:	f000 b8a7 	b.w	80079e0 <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	20000383 	.word	0x20000383

08007898 <__sinit_lock_release>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__sinit_lock_release+0x8>)
 800789a:	f000 b8a2 	b.w	80079e2 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	20000383 	.word	0x20000383

080078a4 <__sinit>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	f7ff fff0 	bl	800788c <__sinit_lock_acquire>
 80078ac:	69a3      	ldr	r3, [r4, #24]
 80078ae:	b11b      	cbz	r3, 80078b8 <__sinit+0x14>
 80078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b4:	f7ff bff0 	b.w	8007898 <__sinit_lock_release>
 80078b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078bc:	6523      	str	r3, [r4, #80]	; 0x50
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <__sinit+0x68>)
 80078c0:	4a13      	ldr	r2, [pc, #76]	; (8007910 <__sinit+0x6c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	bf04      	itt	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	61a3      	streq	r3, [r4, #24]
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 f820 	bl	8007914 <__sfp>
 80078d4:	6060      	str	r0, [r4, #4]
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 f81c 	bl	8007914 <__sfp>
 80078dc:	60a0      	str	r0, [r4, #8]
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 f818 	bl	8007914 <__sfp>
 80078e4:	2200      	movs	r2, #0
 80078e6:	60e0      	str	r0, [r4, #12]
 80078e8:	2104      	movs	r1, #4
 80078ea:	6860      	ldr	r0, [r4, #4]
 80078ec:	f7ff ff82 	bl	80077f4 <std>
 80078f0:	68a0      	ldr	r0, [r4, #8]
 80078f2:	2201      	movs	r2, #1
 80078f4:	2109      	movs	r1, #9
 80078f6:	f7ff ff7d 	bl	80077f4 <std>
 80078fa:	68e0      	ldr	r0, [r4, #12]
 80078fc:	2202      	movs	r2, #2
 80078fe:	2112      	movs	r1, #18
 8007900:	f7ff ff78 	bl	80077f4 <std>
 8007904:	2301      	movs	r3, #1
 8007906:	61a3      	str	r3, [r4, #24]
 8007908:	e7d2      	b.n	80078b0 <__sinit+0xc>
 800790a:	bf00      	nop
 800790c:	08007cf4 	.word	0x08007cf4
 8007910:	0800783d 	.word	0x0800783d

08007914 <__sfp>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	4607      	mov	r7, r0
 8007918:	f7ff ffac 	bl	8007874 <__sfp_lock_acquire>
 800791c:	4b1e      	ldr	r3, [pc, #120]	; (8007998 <__sfp+0x84>)
 800791e:	681e      	ldr	r6, [r3, #0]
 8007920:	69b3      	ldr	r3, [r6, #24]
 8007922:	b913      	cbnz	r3, 800792a <__sfp+0x16>
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ffbd 	bl	80078a4 <__sinit>
 800792a:	3648      	adds	r6, #72	; 0x48
 800792c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007930:	3b01      	subs	r3, #1
 8007932:	d503      	bpl.n	800793c <__sfp+0x28>
 8007934:	6833      	ldr	r3, [r6, #0]
 8007936:	b30b      	cbz	r3, 800797c <__sfp+0x68>
 8007938:	6836      	ldr	r6, [r6, #0]
 800793a:	e7f7      	b.n	800792c <__sfp+0x18>
 800793c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007940:	b9d5      	cbnz	r5, 8007978 <__sfp+0x64>
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <__sfp+0x88>)
 8007944:	60e3      	str	r3, [r4, #12]
 8007946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800794a:	6665      	str	r5, [r4, #100]	; 0x64
 800794c:	f000 f847 	bl	80079de <__retarget_lock_init_recursive>
 8007950:	f7ff ff96 	bl	8007880 <__sfp_lock_release>
 8007954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800795c:	6025      	str	r5, [r4, #0]
 800795e:	61a5      	str	r5, [r4, #24]
 8007960:	2208      	movs	r2, #8
 8007962:	4629      	mov	r1, r5
 8007964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007968:	f7fd fafc 	bl	8004f64 <memset>
 800796c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007974:	4620      	mov	r0, r4
 8007976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007978:	3468      	adds	r4, #104	; 0x68
 800797a:	e7d9      	b.n	8007930 <__sfp+0x1c>
 800797c:	2104      	movs	r1, #4
 800797e:	4638      	mov	r0, r7
 8007980:	f7ff ff62 	bl	8007848 <__sfmoreglue>
 8007984:	4604      	mov	r4, r0
 8007986:	6030      	str	r0, [r6, #0]
 8007988:	2800      	cmp	r0, #0
 800798a:	d1d5      	bne.n	8007938 <__sfp+0x24>
 800798c:	f7ff ff78 	bl	8007880 <__sfp_lock_release>
 8007990:	230c      	movs	r3, #12
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	e7ee      	b.n	8007974 <__sfp+0x60>
 8007996:	bf00      	nop
 8007998:	08007cf4 	.word	0x08007cf4
 800799c:	ffff0001 	.word	0xffff0001

080079a0 <_fwalk_reent>:
 80079a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a4:	4606      	mov	r6, r0
 80079a6:	4688      	mov	r8, r1
 80079a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079ac:	2700      	movs	r7, #0
 80079ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079b2:	f1b9 0901 	subs.w	r9, r9, #1
 80079b6:	d505      	bpl.n	80079c4 <_fwalk_reent+0x24>
 80079b8:	6824      	ldr	r4, [r4, #0]
 80079ba:	2c00      	cmp	r4, #0
 80079bc:	d1f7      	bne.n	80079ae <_fwalk_reent+0xe>
 80079be:	4638      	mov	r0, r7
 80079c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c4:	89ab      	ldrh	r3, [r5, #12]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d907      	bls.n	80079da <_fwalk_reent+0x3a>
 80079ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079ce:	3301      	adds	r3, #1
 80079d0:	d003      	beq.n	80079da <_fwalk_reent+0x3a>
 80079d2:	4629      	mov	r1, r5
 80079d4:	4630      	mov	r0, r6
 80079d6:	47c0      	blx	r8
 80079d8:	4307      	orrs	r7, r0
 80079da:	3568      	adds	r5, #104	; 0x68
 80079dc:	e7e9      	b.n	80079b2 <_fwalk_reent+0x12>

080079de <__retarget_lock_init_recursive>:
 80079de:	4770      	bx	lr

080079e0 <__retarget_lock_acquire_recursive>:
 80079e0:	4770      	bx	lr

080079e2 <__retarget_lock_release_recursive>:
 80079e2:	4770      	bx	lr

080079e4 <__swhatbuf_r>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	460e      	mov	r6, r1
 80079e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ec:	2900      	cmp	r1, #0
 80079ee:	b096      	sub	sp, #88	; 0x58
 80079f0:	4614      	mov	r4, r2
 80079f2:	461d      	mov	r5, r3
 80079f4:	da07      	bge.n	8007a06 <__swhatbuf_r+0x22>
 80079f6:	2300      	movs	r3, #0
 80079f8:	602b      	str	r3, [r5, #0]
 80079fa:	89b3      	ldrh	r3, [r6, #12]
 80079fc:	061a      	lsls	r2, r3, #24
 80079fe:	d410      	bmi.n	8007a22 <__swhatbuf_r+0x3e>
 8007a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a04:	e00e      	b.n	8007a24 <__swhatbuf_r+0x40>
 8007a06:	466a      	mov	r2, sp
 8007a08:	f000 f902 	bl	8007c10 <_fstat_r>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	dbf2      	blt.n	80079f6 <__swhatbuf_r+0x12>
 8007a10:	9a01      	ldr	r2, [sp, #4]
 8007a12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a1a:	425a      	negs	r2, r3
 8007a1c:	415a      	adcs	r2, r3
 8007a1e:	602a      	str	r2, [r5, #0]
 8007a20:	e7ee      	b.n	8007a00 <__swhatbuf_r+0x1c>
 8007a22:	2340      	movs	r3, #64	; 0x40
 8007a24:	2000      	movs	r0, #0
 8007a26:	6023      	str	r3, [r4, #0]
 8007a28:	b016      	add	sp, #88	; 0x58
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}

08007a2c <__smakebuf_r>:
 8007a2c:	898b      	ldrh	r3, [r1, #12]
 8007a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a30:	079d      	lsls	r5, r3, #30
 8007a32:	4606      	mov	r6, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	d507      	bpl.n	8007a48 <__smakebuf_r+0x1c>
 8007a38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	2301      	movs	r3, #1
 8007a42:	6163      	str	r3, [r4, #20]
 8007a44:	b002      	add	sp, #8
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	ab01      	add	r3, sp, #4
 8007a4a:	466a      	mov	r2, sp
 8007a4c:	f7ff ffca 	bl	80079e4 <__swhatbuf_r>
 8007a50:	9900      	ldr	r1, [sp, #0]
 8007a52:	4605      	mov	r5, r0
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7ff f987 	bl	8006d68 <_malloc_r>
 8007a5a:	b948      	cbnz	r0, 8007a70 <__smakebuf_r+0x44>
 8007a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a60:	059a      	lsls	r2, r3, #22
 8007a62:	d4ef      	bmi.n	8007a44 <__smakebuf_r+0x18>
 8007a64:	f023 0303 	bic.w	r3, r3, #3
 8007a68:	f043 0302 	orr.w	r3, r3, #2
 8007a6c:	81a3      	strh	r3, [r4, #12]
 8007a6e:	e7e3      	b.n	8007a38 <__smakebuf_r+0xc>
 8007a70:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <__smakebuf_r+0x7c>)
 8007a72:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	6020      	str	r0, [r4, #0]
 8007a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	6163      	str	r3, [r4, #20]
 8007a82:	9b01      	ldr	r3, [sp, #4]
 8007a84:	6120      	str	r0, [r4, #16]
 8007a86:	b15b      	cbz	r3, 8007aa0 <__smakebuf_r+0x74>
 8007a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f000 f8d1 	bl	8007c34 <_isatty_r>
 8007a92:	b128      	cbz	r0, 8007aa0 <__smakebuf_r+0x74>
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	89a0      	ldrh	r0, [r4, #12]
 8007aa2:	4305      	orrs	r5, r0
 8007aa4:	81a5      	strh	r5, [r4, #12]
 8007aa6:	e7cd      	b.n	8007a44 <__smakebuf_r+0x18>
 8007aa8:	0800783d 	.word	0x0800783d

08007aac <_malloc_usable_size_r>:
 8007aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab0:	1f18      	subs	r0, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	bfbc      	itt	lt
 8007ab6:	580b      	ldrlt	r3, [r1, r0]
 8007ab8:	18c0      	addlt	r0, r0, r3
 8007aba:	4770      	bx	lr

08007abc <_raise_r>:
 8007abc:	291f      	cmp	r1, #31
 8007abe:	b538      	push	{r3, r4, r5, lr}
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	460d      	mov	r5, r1
 8007ac4:	d904      	bls.n	8007ad0 <_raise_r+0x14>
 8007ac6:	2316      	movs	r3, #22
 8007ac8:	6003      	str	r3, [r0, #0]
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ad2:	b112      	cbz	r2, 8007ada <_raise_r+0x1e>
 8007ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ad8:	b94b      	cbnz	r3, 8007aee <_raise_r+0x32>
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 f830 	bl	8007b40 <_getpid_r>
 8007ae0:	462a      	mov	r2, r5
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aea:	f000 b817 	b.w	8007b1c <_kill_r>
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d00a      	beq.n	8007b08 <_raise_r+0x4c>
 8007af2:	1c59      	adds	r1, r3, #1
 8007af4:	d103      	bne.n	8007afe <_raise_r+0x42>
 8007af6:	2316      	movs	r3, #22
 8007af8:	6003      	str	r3, [r0, #0]
 8007afa:	2001      	movs	r0, #1
 8007afc:	e7e7      	b.n	8007ace <_raise_r+0x12>
 8007afe:	2400      	movs	r4, #0
 8007b00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b04:	4628      	mov	r0, r5
 8007b06:	4798      	blx	r3
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e7e0      	b.n	8007ace <_raise_r+0x12>

08007b0c <raise>:
 8007b0c:	4b02      	ldr	r3, [pc, #8]	; (8007b18 <raise+0xc>)
 8007b0e:	4601      	mov	r1, r0
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	f7ff bfd3 	b.w	8007abc <_raise_r>
 8007b16:	bf00      	nop
 8007b18:	2000000c 	.word	0x2000000c

08007b1c <_kill_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d07      	ldr	r5, [pc, #28]	; (8007b3c <_kill_r+0x20>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	f7fa f8ab 	bl	8001c84 <_kill>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	d102      	bne.n	8007b38 <_kill_r+0x1c>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b103      	cbz	r3, 8007b38 <_kill_r+0x1c>
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	bf00      	nop
 8007b3c:	2000037c 	.word	0x2000037c

08007b40 <_getpid_r>:
 8007b40:	f7fa b898 	b.w	8001c74 <_getpid>

08007b44 <__sread>:
 8007b44:	b510      	push	{r4, lr}
 8007b46:	460c      	mov	r4, r1
 8007b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4c:	f000 f894 	bl	8007c78 <_read_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	bfab      	itete	ge
 8007b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b56:	89a3      	ldrhlt	r3, [r4, #12]
 8007b58:	181b      	addge	r3, r3, r0
 8007b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b5e:	bfac      	ite	ge
 8007b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b62:	81a3      	strhlt	r3, [r4, #12]
 8007b64:	bd10      	pop	{r4, pc}

08007b66 <__swrite>:
 8007b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6a:	461f      	mov	r7, r3
 8007b6c:	898b      	ldrh	r3, [r1, #12]
 8007b6e:	05db      	lsls	r3, r3, #23
 8007b70:	4605      	mov	r5, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	4616      	mov	r6, r2
 8007b76:	d505      	bpl.n	8007b84 <__swrite+0x1e>
 8007b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f000 f868 	bl	8007c54 <_lseek_r>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	4632      	mov	r2, r6
 8007b92:	463b      	mov	r3, r7
 8007b94:	4628      	mov	r0, r5
 8007b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9a:	f000 b817 	b.w	8007bcc <_write_r>

08007b9e <__sseek>:
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba6:	f000 f855 	bl	8007c54 <_lseek_r>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	bf15      	itete	ne
 8007bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bba:	81a3      	strheq	r3, [r4, #12]
 8007bbc:	bf18      	it	ne
 8007bbe:	81a3      	strhne	r3, [r4, #12]
 8007bc0:	bd10      	pop	{r4, pc}

08007bc2 <__sclose>:
 8007bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc6:	f000 b813 	b.w	8007bf0 <_close_r>
	...

08007bcc <_write_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d07      	ldr	r5, [pc, #28]	; (8007bec <_write_r+0x20>)
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f7fa f889 	bl	8001cf2 <_write>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_write_r+0x1e>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_write_r+0x1e>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	2000037c 	.word	0x2000037c

08007bf0 <_close_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4d06      	ldr	r5, [pc, #24]	; (8007c0c <_close_r+0x1c>)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	602b      	str	r3, [r5, #0]
 8007bfc:	f7fa f895 	bl	8001d2a <_close>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_close_r+0x1a>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_close_r+0x1a>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	2000037c 	.word	0x2000037c

08007c10 <_fstat_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d07      	ldr	r5, [pc, #28]	; (8007c30 <_fstat_r+0x20>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	f7fa f890 	bl	8001d42 <_fstat>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	d102      	bne.n	8007c2c <_fstat_r+0x1c>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	b103      	cbz	r3, 8007c2c <_fstat_r+0x1c>
 8007c2a:	6023      	str	r3, [r4, #0]
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	bf00      	nop
 8007c30:	2000037c 	.word	0x2000037c

08007c34 <_isatty_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4d06      	ldr	r5, [pc, #24]	; (8007c50 <_isatty_r+0x1c>)
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	602b      	str	r3, [r5, #0]
 8007c40:	f7fa f88f 	bl	8001d62 <_isatty>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_isatty_r+0x1a>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_isatty_r+0x1a>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	2000037c 	.word	0x2000037c

08007c54 <_lseek_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d07      	ldr	r5, [pc, #28]	; (8007c74 <_lseek_r+0x20>)
 8007c58:	4604      	mov	r4, r0
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	602a      	str	r2, [r5, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f7fa f888 	bl	8001d78 <_lseek>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_lseek_r+0x1e>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_lseek_r+0x1e>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	2000037c 	.word	0x2000037c

08007c78 <_read_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d07      	ldr	r5, [pc, #28]	; (8007c98 <_read_r+0x20>)
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	4608      	mov	r0, r1
 8007c80:	4611      	mov	r1, r2
 8007c82:	2200      	movs	r2, #0
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f7fa f816 	bl	8001cb8 <_read>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_read_r+0x1e>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_read_r+0x1e>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	2000037c 	.word	0x2000037c

08007c9c <_init>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_fini>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr
