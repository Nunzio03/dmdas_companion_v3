
dmdas_companion_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008324  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080084c8  080084c8  000184c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e4  080088e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080088e4  080088e4  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088ec  080088ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080088f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001dc  08008ad0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08008ad0  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013eb6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b0  00000000  00000000  000340c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00036978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  000379d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179b1  00000000  00000000  00038980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e48  00000000  00000000  00050331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b65  00000000  00000000  00064179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b8  00000000  00000000  000f5d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084ac 	.word	0x080084ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080084ac 	.word	0x080084ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b59      	ldr	r3, [pc, #356]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a58      	ldr	r2, [pc, #352]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b56      	ldr	r3, [pc, #344]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b52      	ldr	r3, [pc, #328]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a51      	ldr	r2, [pc, #324]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <MX_GPIO_Init+0x19c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	; (800112c <MX_GPIO_Init+0x19c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a4a      	ldr	r2, [pc, #296]	; (800112c <MX_GPIO_Init+0x19c>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b48      	ldr	r3, [pc, #288]	; (800112c <MX_GPIO_Init+0x19c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|HCSR_TRIG_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7108 	mov.w	r1, #544	; 0x220
 800101c:	4844      	ldr	r0, [pc, #272]	; (8001130 <MX_GPIO_Init+0x1a0>)
 800101e:	f001 fd69 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIRECTION_GPIO_Port, MOTOR_DIRECTION_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4842      	ldr	r0, [pc, #264]	; (8001134 <MX_GPIO_Init+0x1a4>)
 800102a:	f001 fd63 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	4841      	ldr	r0, [pc, #260]	; (8001138 <MX_GPIO_Init+0x1a8>)
 8001034:	f001 fd5e 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	483c      	ldr	r0, [pc, #240]	; (8001130 <MX_GPIO_Init+0x1a0>)
 8001040:	f001 fd58 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4837      	ldr	r0, [pc, #220]	; (8001138 <MX_GPIO_Init+0x1a8>)
 800105c:	f001 fbae 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|HCSR_TRIG_Pin|MOTOR_ENABLE_Pin;
 8001060:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	482d      	ldr	r0, [pc, #180]	; (8001130 <MX_GPIO_Init+0x1a0>)
 800107a:	f001 fb9f 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_DIRECTION_Pin;
 800107e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4827      	ldr	r0, [pc, #156]	; (8001134 <MX_GPIO_Init+0x1a4>)
 8001098:	f001 fb90 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_GPIO_Init+0x1a8>)
 80010b4:	f001 fb82 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_DIRECTION_Pin;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLC_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <MX_GPIO_Init+0x1a0>)
 80010ce:	f001 fb75 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_EN_MOT_Pin;
 80010d2:	2308      	movs	r3, #8
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLC_EN_MOT_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4813      	ldr	r0, [pc, #76]	; (8001134 <MX_GPIO_Init+0x1a4>)
 80010e6:	f001 fb69 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = END_STOPmin_Pin|END_STOPmax_Pin;
 80010ea:	2330      	movs	r3, #48	; 0x30
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_GPIO_Init+0x1a4>)
 8001100:	f001 fb5c 	bl	80027bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	200a      	movs	r0, #10
 800110a:	f001 fa8e 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800110e:	200a      	movs	r0, #10
 8001110:	f001 faa7 	bl	8002662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2017      	movs	r0, #23
 800111a:	f001 fa86 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800111e:	2017      	movs	r0, #23
 8001120:	f001 fa9f 	bl	8002662 <HAL_NVIC_EnableIRQ>

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800

0800113c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_I2C1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C1_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_I2C1_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_I2C1_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_I2C1_Init+0x50>)
 800117a:	f001 fd07 	bl	8002b8c <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 fcfa 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000250 	.word	0x20000250
 8001190:	40005400 	.word	0x40005400
 8001194:	000186a0 	.word	0x000186a0

08001198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <HAL_I2C_MspInit+0x84>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12c      	bne.n	8001214 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e8:	2304      	movs	r3, #4
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <HAL_I2C_MspInit+0x8c>)
 80011f4:	f001 fae2 	bl	80027bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_I2C_MspInit+0x88>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_I2C_MspInit+0x88>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400

08001228 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t time){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <delay_us+0x30>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3)<time);
 800123a:	bf00      	nop
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <delay_us+0x30>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3f9      	bcc.n	800123c <delay_us+0x14>
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200002ec 	.word	0x200002ec

0800125c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	/* HC_SR04 INTERRUPT*/
	if(htim->Instance == TIM3){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a97      	ldr	r2, [pc, #604]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d16a      	bne.n	8001344 <HAL_TIM_IC_CaptureCallback+0xe8>
		uint16_t val = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4896      	ldr	r0, [pc, #600]	; (80014cc <HAL_TIM_IC_CaptureCallback+0x270>)
 8001272:	f002 ff13 	bl	800409c <HAL_TIM_ReadCapturedValue>
 8001276:	4603      	mov	r3, r0
 8001278:	81fb      	strh	r3, [r7, #14]
		if(!rised_hc){
 800127a:	4b95      	ldr	r3, [pc, #596]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_TIM_IC_CaptureCallback+0x54>
			dist_time1 = val;
 8001282:	4a94      	ldr	r2, [pc, #592]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	8013      	strh	r3, [r2, #0]
			rised_hc = 1;
 8001288:	4b91      	ldr	r3, [pc, #580]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020a 	bic.w	r2, r2, #10
 800129c:	621a      	str	r2, [r3, #32]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0202 	orr.w	r2, r2, #2
 80012ac:	621a      	str	r2, [r3, #32]
 80012ae:	e049      	b.n	8001344 <HAL_TIM_IC_CaptureCallback+0xe8>
		}else{ //falling
			if(val >= dist_time1){
 80012b0:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	89fa      	ldrh	r2, [r7, #14]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d318      	bcc.n	80012ec <HAL_TIM_IC_CaptureCallback+0x90>
				distance = (uint32_t)((val - dist_time1)*100/58.0); // decimi di millimetro
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	4a85      	ldr	r2, [pc, #532]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012be:	8812      	ldrh	r2, [r2, #0]
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	2264      	movs	r2, #100	; 0x64
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f933 	bl	8000534 <__aeabi_i2d>
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80012d4:	f7ff fac2 	bl	800085c <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc6a 	bl	8000bb8 <__aeabi_d2uiz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a7d      	ldr	r2, [pc, #500]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x280>)
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e01a      	b.n	8001322 <HAL_TIM_IC_CaptureCallback+0xc6>
			}else{
				distance = (uint32_t)(((0xffff-dist_time1)+val)*100/58.0);
 80012ec:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80012f4:	33ff      	adds	r3, #255	; 0xff
 80012f6:	89fa      	ldrh	r2, [r7, #14]
 80012f8:	4413      	add	r3, r2
 80012fa:	2264      	movs	r2, #100	; 0x64
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f917 	bl	8000534 <__aeabi_i2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800130c:	f7ff faa6 	bl	800085c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc4e 	bl	8000bb8 <__aeabi_d2uiz>
 800131c:	4603      	mov	r3, r0
 800131e:	4a6f      	ldr	r2, [pc, #444]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x280>)
 8001320:	6013      	str	r3, [r2, #0]
			}
			rised_hc = 0;
 8001322:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a1a      	ldr	r2, [r3, #32]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 020a 	bic.w	r2, r2, #10
 8001336:	621a      	str	r2, [r3, #32]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6a12      	ldr	r2, [r2, #32]
 8001342:	621a      	str	r2, [r3, #32]
		}

	}
	/*CUSTOM PROTOCOL INTERRUPT*/
	if(htim->Instance == TIM4){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a65      	ldr	r2, [pc, #404]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0x284>)
 800134a:	4293      	cmp	r3, r2
 800134c:	f040 80b7 	bne.w	80014be <HAL_TIM_IC_CaptureCallback+0x262>

		uint16_t val = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001350:	2100      	movs	r1, #0
 8001352:	4864      	ldr	r0, [pc, #400]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001354:	f002 fea2 	bl	800409c <HAL_TIM_ReadCapturedValue>
 8001358:	4603      	mov	r3, r0
 800135a:	81bb      	strh	r3, [r7, #12]
		if(first_wave_rec==0){
 800135c:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d145      	bne.n	80013f0 <HAL_TIM_IC_CaptureCallback+0x194>

			if(!rised_plc){
 8001364:	4b61      	ldr	r3, [pc, #388]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d116      	bne.n	800139a <HAL_TIM_IC_CaptureCallback+0x13e>

				dur_time1 = val;
 800136c:	4a60      	ldr	r2, [pc, #384]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	8013      	strh	r3, [r2, #0]
				rised_plc = 1;
 8001372:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 020a 	bic.w	r2, r2, #10
 8001386:	621a      	str	r2, [r3, #32]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a1a      	ldr	r2, [r3, #32]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0202 	orr.w	r2, r2, #2
 8001396:	621a      	str	r2, [r3, #32]
		}


	}

}
 8001398:	e091      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
					if(val>=dur_time1){
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	89ba      	ldrh	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d307      	bcc.n	80013b4 <HAL_TIM_IC_CaptureCallback+0x158>
						dur1= val-dur_time1;
 80013a4:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	89ba      	ldrh	r2, [r7, #12]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	e008      	b.n	80013c6 <HAL_TIM_IC_CaptureCallback+0x16a>
						dur1= (0xffff-dur_time1)+val;
 80013b4:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	89ba      	ldrh	r2, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3b01      	subs	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013c4:	801a      	strh	r2, [r3, #0]
					rised_plc=0;
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a1a      	ldr	r2, [r3, #32]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 020a 	bic.w	r2, r2, #10
 80013da:	621a      	str	r2, [r3, #32]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a12      	ldr	r2, [r2, #32]
 80013e6:	621a      	str	r2, [r3, #32]
					first_wave_rec=1;
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	e066      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
				if(!rised_plc){
 80013f0:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d116      	bne.n	8001426 <HAL_TIM_IC_CaptureCallback+0x1ca>
					dur_time1 = val;
 80013f8:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	8013      	strh	r3, [r2, #0]
					rised_plc = 1;
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020a 	bic.w	r2, r2, #10
 8001412:	621a      	str	r2, [r3, #32]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a1a      	ldr	r2, [r3, #32]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0202 	orr.w	r2, r2, #2
 8001422:	621a      	str	r2, [r3, #32]
}
 8001424:	e04b      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
						if(val>=dur_time1){
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	89ba      	ldrh	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d307      	bcc.n	8001440 <HAL_TIM_IC_CaptureCallback+0x1e4>
							dur2= val-dur_time1;
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	89ba      	ldrh	r2, [r7, #12]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	e008      	b.n	8001452 <HAL_TIM_IC_CaptureCallback+0x1f6>
							dur2= (0xffff-dur_time1)+val;
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	89ba      	ldrh	r2, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001450:	801a      	strh	r2, [r3, #0]
						rised_plc=0;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 020a 	bic.w	r2, r2, #10
 8001466:	621a      	str	r2, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a12      	ldr	r2, [r2, #32]
 8001472:	621a      	str	r2, [r3, #32]
						first_wave_rec=0;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
						dur1 = (dur1/15)-15;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b0f      	subs	r3, #15
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 800148e:	801a      	strh	r2, [r3, #0]
						dur2 = (dur2/15)-15;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b0f      	subs	r3, #15
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014a4:	801a      	strh	r2, [r3, #0]
						magic_number = (dur1<<5)|dur2;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80014bc:	801a      	strh	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40000400 	.word	0x40000400
 80014cc:	200002ec 	.word	0x200002ec
 80014d0:	200001f8 	.word	0x200001f8
 80014d4:	200001fa 	.word	0x200001fa
 80014d8:	404d0000 	.word	0x404d0000
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	40000800 	.word	0x40000800
 80014e4:	200002a4 	.word	0x200002a4
 80014e8:	20000201 	.word	0x20000201
 80014ec:	20000200 	.word	0x20000200
 80014f0:	20000206 	.word	0x20000206
 80014f4:	20000202 	.word	0x20000202
 80014f8:	20000204 	.word	0x20000204
 80014fc:	88888889 	.word	0x88888889
 8001500:	20000208 	.word	0x20000208

08001504 <HCSR04_trigger>:

void HCSR04_trigger(){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HCSR_TRIG_GPIO_Port, HCSR_TRIG_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <HCSR04_trigger+0x28>)
 8001510:	f001 faf0 	bl	8002af4 <HAL_GPIO_WritePin>
	delay_us(10);
 8001514:	200a      	movs	r0, #10
 8001516:	f7ff fe87 	bl	8001228 <delay_us>
	HAL_GPIO_WritePin(HCSR_TRIG_GPIO_Port, HCSR_TRIG_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <HCSR04_trigger+0x28>)
 8001522:	f001 fae7 	bl	8002af4 <HAL_GPIO_WritePin>

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020000 	.word	0x40020000

08001530 <move_stepper>:


void move_stepper(uint32_t steps){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_DIRECTION_GPIO_Port, MOTOR_DIRECTION_Pin,direction );
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <move_stepper+0x98>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001542:	4822      	ldr	r0, [pc, #136]	; (80015cc <move_stepper+0x9c>)
 8001544:	f001 fad6 	bl	8002af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4820      	ldr	r0, [pc, #128]	; (80015d0 <move_stepper+0xa0>)
 8001550:	f001 fad0 	bl	8002af4 <HAL_GPIO_WritePin>
	 for (int i = 0; i <steps ; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e028      	b.n	80015ac <move_stepper+0x7c>
	  {
		 if(((direction == 1) && HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin))||
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <move_stepper+0x98>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d106      	bne.n	8001570 <move_stepper+0x40>
 8001562:	2110      	movs	r1, #16
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <move_stepper+0x9c>)
 8001566:	f001 faad 	bl	8002ac4 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d121      	bne.n	80015b4 <move_stepper+0x84>
				 ((direction == 0)&& HAL_GPIO_ReadPin(END_STOPmax_GPIO_Port, END_STOPmax_Pin))){
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <move_stepper+0x98>)
 8001572:	781b      	ldrb	r3, [r3, #0]
		 if(((direction == 1) && HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin))||
 8001574:	2b00      	cmp	r3, #0
 8001576:	d106      	bne.n	8001586 <move_stepper+0x56>
				 ((direction == 0)&& HAL_GPIO_ReadPin(END_STOPmax_GPIO_Port, END_STOPmax_Pin))){
 8001578:	2120      	movs	r1, #32
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <move_stepper+0x9c>)
 800157c:	f001 faa2 	bl	8002ac4 <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <move_stepper+0x84>

			 break;
		 }

		 HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <move_stepper+0xa4>)
 800158c:	f001 fab2 	bl	8002af4 <HAL_GPIO_WritePin>
		 delay_us(30);
 8001590:	201e      	movs	r0, #30
 8001592:	f7ff fe49 	bl	8001228 <delay_us>
		 HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <move_stepper+0xa4>)
 800159c:	f001 faaa 	bl	8002af4 <HAL_GPIO_WritePin>
		 delay_us(30);
 80015a0:	201e      	movs	r0, #30
 80015a2:	f7ff fe41 	bl	8001228 <delay_us>
	 for (int i = 0; i <steps ; i++)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8d2      	bhi.n	800155a <move_stepper+0x2a>

	  }
	 HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <move_stepper+0xa0>)
 80015bc:	f001 fa9a 	bl	8002af4 <HAL_GPIO_WritePin>

}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000210 	.word	0x20000210
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020800 	.word	0x40020800

080015d8 <move_stepper_dec_mm>:

void move_stepper_dec_mm(uint32_t dec_mm){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	moving = 1;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <move_stepper_dec_mm+0x80>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
	if(direction){
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <move_stepper_dec_mm+0x84>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <move_stepper_dec_mm+0x2e>
		open_loop_motor_position -= dec_mm;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <move_stepper_dec_mm+0x88>)
 80015f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <move_stepper_dec_mm+0x88>)
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	e00a      	b.n	800161c <move_stepper_dec_mm+0x44>
	}else{

		open_loop_motor_position += dec_mm;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <move_stepper_dec_mm+0x88>)
 800160c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4413      	add	r3, r2
 8001614:	b29b      	uxth	r3, r3
 8001616:	b21a      	sxth	r2, r3
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <move_stepper_dec_mm+0x88>)
 800161a:	801a      	strh	r2, [r3, #0]

	}
	move_stepper((uint32_t)(dec_mm/DMILLIM_USTEP_CONSTANT));
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe ff79 	bl	8000514 <__aeabi_ui2d>
 8001622:	a30b      	add	r3, pc, #44	; (adr r3, 8001650 <move_stepper_dec_mm+0x78>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f918 	bl	800085c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fac0 	bl	8000bb8 <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff78 	bl	8001530 <move_stepper>
	moving = 0;
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <move_stepper_dec_mm+0x80>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	4c327ffc 	.word	0x4c327ffc
 8001654:	3f89a8c1 	.word	0x3f89a8c1
 8001658:	2000020a 	.word	0x2000020a
 800165c:	20000210 	.word	0x20000210
 8001660:	2000020c 	.word	0x2000020c

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001668:	f000 fe6e 	bl	8002348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166c:	f000 f88c 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001670:	f7ff fc8e 	bl	8000f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001674:	f000 fdc4 	bl	8002200 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001678:	f000 fc34 	bl	8001ee4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800167c:	f000 fc86 	bl	8001f8c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001680:	f7ff fd5c 	bl	800113c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001684:	f000 fbd6 	bl	8001e34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001688:	2100      	movs	r1, #0
 800168a:	4831      	ldr	r0, [pc, #196]	; (8001750 <main+0xec>)
 800168c:	f002 f986 	bl	800399c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001690:	2100      	movs	r1, #0
 8001692:	4830      	ldr	r0, [pc, #192]	; (8001754 <main+0xf0>)
 8001694:	f002 f982 	bl	800399c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001698:	2100      	movs	r1, #0
 800169a:	482f      	ldr	r0, [pc, #188]	; (8001758 <main+0xf4>)
 800169c:	f002 f87e 	bl	800379c <HAL_TIM_PWM_Start>


  HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	492e      	ldr	r1, [pc, #184]	; (800175c <main+0xf8>)
 80016a4:	482e      	ldr	r0, [pc, #184]	; (8001760 <main+0xfc>)
 80016a6:	f003 f9bf 	bl	8004a28 <HAL_UART_Receive_IT>
  si5351_setupPLLInt(SI5351_PLL_A, 32);
  si5351_setupMultisynth(0, SI5351_PLL_A, 4, 1000-4, 1);
  si5351_setupRdiv(0, SI5351_R_DIV_8);
  si5351_enableOutputs(0xFF);*/

  if(!HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin)){
 80016aa:	2110      	movs	r1, #16
 80016ac:	482d      	ldr	r0, [pc, #180]	; (8001764 <main+0x100>)
 80016ae:	f001 fa09 	bl	8002ac4 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <main+0x5a>
  		back_movement = 1;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <main+0x104>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 80016be:	2064      	movs	r0, #100	; 0x64
 80016c0:	f000 feb4 	bl	800242c <HAL_Delay>
	  HCSR04_trigger();
 80016c4:	f7ff ff1e 	bl	8001504 <HCSR04_trigger>
	  move_mot = !HAL_GPIO_ReadPin(PLC_EN_MOT_GPIO_Port, PLC_EN_MOT_Pin);
 80016c8:	2108      	movs	r1, #8
 80016ca:	4826      	ldr	r0, [pc, #152]	; (8001764 <main+0x100>)
 80016cc:	f001 f9fa 	bl	8002ac4 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <main+0x108>)
 80016e0:	701a      	strb	r2, [r3, #0]
	  direction = HAL_GPIO_ReadPin(PLC_DIRECTION_GPIO_Port, PLC_DIRECTION_Pin);
 80016e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e6:	4822      	ldr	r0, [pc, #136]	; (8001770 <main+0x10c>)
 80016e8:	f001 f9ec 	bl	8002ac4 <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <main+0x110>)
 80016f2:	701a      	strb	r2, [r3, #0]
	  if(move_mot&&(!motor_moved)){
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <main+0x108>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <main+0xb0>
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <main+0x114>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <main+0xb0>

		  move_stepper_dec_mm(magic_number);
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <main+0x118>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff65 	bl	80015d8 <move_stepper_dec_mm>
		  motor_moved = 1;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <main+0x114>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
	  }

	  if(startup_movement){
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <main+0x11c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <main+0xc6>
		  direction =0;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <main+0x110>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
		  move_stepper(600);
 8001722:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001726:	f7ff ff03 	bl	8001530 <move_stepper>
	  }

	  if(back_movement){
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <main+0x104>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0c5      	beq.n	80016be <main+0x5a>
		  direction = 1;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <main+0x110>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
		  move_stepper(600);
 8001738:	f44f 7016 	mov.w	r0, #600	; 0x258
 800173c:	f7ff fef8 	bl	8001530 <move_stepper>
		  tare_counter += 600;
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <main+0x120>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <main+0x120>)
 800174a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 800174c:	e7b7      	b.n	80016be <main+0x5a>
 800174e:	bf00      	nop
 8001750:	200002ec 	.word	0x200002ec
 8001754:	200002a4 	.word	0x200002a4
 8001758:	20000334 	.word	0x20000334
 800175c:	20000219 	.word	0x20000219
 8001760:	2000037c 	.word	0x2000037c
 8001764:	40020400 	.word	0x40020400
 8001768:	20000218 	.word	0x20000218
 800176c:	2000020e 	.word	0x2000020e
 8001770:	40020000 	.word	0x40020000
 8001774:	20000210 	.word	0x20000210
 8001778:	2000020f 	.word	0x2000020f
 800177c:	20000208 	.word	0x20000208
 8001780:	20000211 	.word	0x20000211
 8001784:	20000214 	.word	0x20000214

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	; 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f003 ffea 	bl	8005770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <SystemClock_Config+0xcc>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <SystemClock_Config+0xcc>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <SystemClock_Config+0xcc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <SystemClock_Config+0xd0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d4:	4a20      	ldr	r2, [pc, #128]	; (8001858 <SystemClock_Config+0xd0>)
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <SystemClock_Config+0xd0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f0:	2310      	movs	r3, #16
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017fc:	2308      	movs	r3, #8
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001800:	233c      	movs	r3, #60	; 0x3c
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001804:	2302      	movs	r3, #2
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001808:	2307      	movs	r3, #7
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f001 faff 	bl	8002e14 <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800181c:	f000 f9ae 	bl	8001b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2101      	movs	r1, #1
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fd61 	bl	8003304 <HAL_RCC_ClockConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001848:	f000 f998 	bl	8001b7c <Error_Handler>
  }
}
 800184c:	bf00      	nop
 800184e:	3750      	adds	r7, #80	; 0x50
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000
 800185c:	00000000 	.word	0x00000000

08001860 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	switch(cmd_char){
 8001868:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <HAL_UART_RxCpltCallback+0x230>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b61      	subs	r3, #97	; 0x61
 8001870:	2b13      	cmp	r3, #19
 8001872:	f200 80f8 	bhi.w	8001a66 <HAL_UART_RxCpltCallback+0x206>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <HAL_UART_RxCpltCallback+0x1c>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	080018cd 	.word	0x080018cd
 8001880:	0800194d 	.word	0x0800194d
 8001884:	08001991 	.word	0x08001991
 8001888:	080019c1 	.word	0x080019c1
 800188c:	08001a67 	.word	0x08001a67
 8001890:	08001a67 	.word	0x08001a67
 8001894:	080019ff 	.word	0x080019ff
 8001898:	08001a67 	.word	0x08001a67
 800189c:	08001a67 	.word	0x08001a67
 80018a0:	08001a67 	.word	0x08001a67
 80018a4:	08001a67 	.word	0x08001a67
 80018a8:	08001a67 	.word	0x08001a67
 80018ac:	08001a67 	.word	0x08001a67
 80018b0:	08001a67 	.word	0x08001a67
 80018b4:	08001a67 	.word	0x08001a67
 80018b8:	08001a67 	.word	0x08001a67
 80018bc:	08001a67 	.word	0x08001a67
 80018c0:	08001a67 	.word	0x08001a67
 80018c4:	08001a67 	.word	0x08001a67
 80018c8:	080019f7 	.word	0x080019f7
	case 'a':
		distance_avg=0;
 80018cc:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <HAL_UART_RxCpltCallback+0x234>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
		for(int k=0; k<10;k++){
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e00b      	b.n	80018f0 <HAL_UART_RxCpltCallback+0x90>
			distance_avg += distance;
 80018d8:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <HAL_UART_RxCpltCallback+0x234>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <HAL_UART_RxCpltCallback+0x238>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_UART_RxCpltCallback+0x234>)
 80018e8:	601a      	str	r2, [r3, #0]
		for(int k=0; k<10;k++){
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3301      	adds	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	ddf0      	ble.n	80018d8 <HAL_UART_RxCpltCallback+0x78>
		}
		buffer[32] = "";
 80018f6:	4b69      	ldr	r3, [pc, #420]	; (8001a9c <HAL_UART_RxCpltCallback+0x23c>)
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b69      	ldr	r3, [pc, #420]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 80018fc:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",(float)(distance_avg/100.0)); //media + conversione in millimetri
 8001900:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <HAL_UART_RxCpltCallback+0x234>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe15 	bl	8000534 <__aeabi_i2d>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <HAL_UART_RxCpltCallback+0x244>)
 8001910:	f7fe ffa4 	bl	800085c <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f96c 	bl	8000bf8 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe18 	bl	8000558 <__aeabi_f2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	495e      	ldr	r1, [pc, #376]	; (8001aa8 <HAL_UART_RxCpltCallback+0x248>)
 800192e:	485c      	ldr	r0, [pc, #368]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001930:	f004 fb90 	bl	8006054 <siprintf>
 8001934:	4603      	mov	r3, r0
 8001936:	4a5d      	ldr	r2, [pc, #372]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 8001938:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4957      	ldr	r1, [pc, #348]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001944:	485a      	ldr	r0, [pc, #360]	; (8001ab0 <HAL_UART_RxCpltCallback+0x250>)
 8001946:	f003 f82a 	bl	800499e <HAL_UART_Transmit_IT>
		//HAL_TIM_Base_Stop_IT(&htim11);
		break;
 800194a:	e091      	b.n	8001a70 <HAL_UART_RxCpltCallback+0x210>
	case 'b':
		buffer[32] = "";
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_UART_RxCpltCallback+0x23c>)
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001952:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",open_loop_motor_position/10.0);
 8001956:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_UART_RxCpltCallback+0x254>)
 8001958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fde9 	bl	8000534 <__aeabi_i2d>
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <HAL_UART_RxCpltCallback+0x258>)
 8001968:	f7fe ff78 	bl	800085c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	494d      	ldr	r1, [pc, #308]	; (8001aa8 <HAL_UART_RxCpltCallback+0x248>)
 8001972:	484b      	ldr	r0, [pc, #300]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001974:	f004 fb6e 	bl	8006054 <siprintf>
 8001978:	4603      	mov	r3, r0
 800197a:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 800197c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800197e:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	4946      	ldr	r1, [pc, #280]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001988:	4849      	ldr	r0, [pc, #292]	; (8001ab0 <HAL_UART_RxCpltCallback+0x250>)
 800198a:	f003 f808 	bl	800499e <HAL_UART_Transmit_IT>
		break;
 800198e:	e06f      	b.n	8001a70 <HAL_UART_RxCpltCallback+0x210>
	case 'c':
		buffer[32] = "";
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_UART_RxCpltCallback+0x23c>)
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001996:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%d\n",moving);
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <HAL_UART_RxCpltCallback+0x25c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4947      	ldr	r1, [pc, #284]	; (8001ac0 <HAL_UART_RxCpltCallback+0x260>)
 80019a2:	483f      	ldr	r0, [pc, #252]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 80019a4:	f004 fb56 	bl	8006054 <siprintf>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a40      	ldr	r2, [pc, #256]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 80019ac:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 80019ae:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	493a      	ldr	r1, [pc, #232]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 80019b8:	483d      	ldr	r0, [pc, #244]	; (8001ab0 <HAL_UART_RxCpltCallback+0x250>)
 80019ba:	f002 fff0 	bl	800499e <HAL_UART_Transmit_IT>
		break;
 80019be:	e057      	b.n	8001a70 <HAL_UART_RxCpltCallback+0x210>
	case 'd':
		buffer[32] = "";
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_UART_RxCpltCallback+0x23c>)
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 80019c6:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%d\n",magic_number);
 80019ca:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <HAL_UART_RxCpltCallback+0x264>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	493b      	ldr	r1, [pc, #236]	; (8001ac0 <HAL_UART_RxCpltCallback+0x260>)
 80019d2:	4833      	ldr	r0, [pc, #204]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 80019d4:	f004 fb3e 	bl	8006054 <siprintf>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a34      	ldr	r2, [pc, #208]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 80019dc:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	492e      	ldr	r1, [pc, #184]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 80019e8:	4831      	ldr	r0, [pc, #196]	; (8001ab0 <HAL_UART_RxCpltCallback+0x250>)
 80019ea:	f002 ffd8 	bl	800499e <HAL_UART_Transmit_IT>
		motor_moved = 0;
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_UART_RxCpltCallback+0x268>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
		break;
 80019f4:	e03c      	b.n	8001a70 <HAL_UART_RxCpltCallback+0x210>
	case 't':
		startup_movement = 1;
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_UART_RxCpltCallback+0x26c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
		break;
 80019fc:	e038      	b.n	8001a70 <HAL_UART_RxCpltCallback+0x210>
	case 'g':
		buffer[32] = "";
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_UART_RxCpltCallback+0x23c>)
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",(float)(tare_counter*DMILLIM_USTEP_CONSTANT/10));
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <HAL_UART_RxCpltCallback+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd81 	bl	8000514 <__aeabi_ui2d>
 8001a12:	a31d      	add	r3, pc, #116	; (adr r3, 8001a88 <HAL_UART_RxCpltCallback+0x228>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fdf6 	bl	8000608 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_UART_RxCpltCallback+0x258>)
 8001a2a:	f7fe ff17 	bl	800085c <__aeabi_ddiv>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff f8df 	bl	8000bf8 <__aeabi_d2f>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd8b 	bl	8000558 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4918      	ldr	r1, [pc, #96]	; (8001aa8 <HAL_UART_RxCpltCallback+0x248>)
 8001a48:	4815      	ldr	r0, [pc, #84]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001a4a:	f004 fb03 	bl	8006054 <siprintf>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a16      	ldr	r2, [pc, #88]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 8001a52:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_UART_RxCpltCallback+0x24c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4910      	ldr	r1, [pc, #64]	; (8001aa0 <HAL_UART_RxCpltCallback+0x240>)
 8001a5e:	4814      	ldr	r0, [pc, #80]	; (8001ab0 <HAL_UART_RxCpltCallback+0x250>)
 8001a60:	f002 ff9d 	bl	800499e <HAL_UART_Transmit_IT>
		break;
 8001a64:	e004      	b.n	8001a70 <HAL_UART_RxCpltCallback+0x210>
	default:

		HAL_UART_Transmit_IT(&huart2, "unknown char\n",13);
 8001a66:	220d      	movs	r2, #13
 8001a68:	491a      	ldr	r1, [pc, #104]	; (8001ad4 <HAL_UART_RxCpltCallback+0x274>)
 8001a6a:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <HAL_UART_RxCpltCallback+0x250>)
 8001a6c:	f002 ff97 	bl	800499e <HAL_UART_Transmit_IT>


	}

	HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 8001a70:	2201      	movs	r2, #1
 8001a72:	4907      	ldr	r1, [pc, #28]	; (8001a90 <HAL_UART_RxCpltCallback+0x230>)
 8001a74:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <HAL_UART_RxCpltCallback+0x250>)
 8001a76:	f002 ffd7 	bl	8004a28 <HAL_UART_Receive_IT>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	f3af 8000 	nop.w
 8001a88:	4c327ffc 	.word	0x4c327ffc
 8001a8c:	3f89a8c1 	.word	0x3f89a8c1
 8001a90:	20000219 	.word	0x20000219
 8001a94:	2000021c 	.word	0x2000021c
 8001a98:	200001fc 	.word	0x200001fc
 8001a9c:	080084c8 	.word	0x080084c8
 8001aa0:	20000220 	.word	0x20000220
 8001aa4:	40590000 	.word	0x40590000
 8001aa8:	080084cc 	.word	0x080084cc
 8001aac:	20000240 	.word	0x20000240
 8001ab0:	2000037c 	.word	0x2000037c
 8001ab4:	2000020c 	.word	0x2000020c
 8001ab8:	40240000 	.word	0x40240000
 8001abc:	2000020a 	.word	0x2000020a
 8001ac0:	080084d0 	.word	0x080084d0
 8001ac4:	20000208 	.word	0x20000208
 8001ac8:	2000020f 	.word	0x2000020f
 8001acc:	20000211 	.word	0x20000211
 8001ad0:	20000214 	.word	0x20000214
 8001ad4:	080084d4 	.word	0x080084d4

08001ad8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11){
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d103      	bne.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001aea:	2120      	movs	r1, #32
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001aee:	f001 f81a 	bl	8002b26 <HAL_GPIO_TogglePin>
	}

}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40014800 	.word	0x40014800
 8001b00:	40020000 	.word	0x40020000

08001b04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == END_STOPmax_Pin){ // quando tocco l'endstop finale
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d115      	bne.n	8001b40 <HAL_GPIO_EXTI_Callback+0x3c>
		startup_movement = 0;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, "9\n",2);
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4911      	ldr	r1, [pc, #68]	; (8001b64 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b1e:	4812      	ldr	r0, [pc, #72]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b20:	f002 ff3d 	bl	800499e <HAL_UART_Transmit_IT>
		if(!HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin)){
 8001b24:	2110      	movs	r1, #16
 8001b26:	4811      	ldr	r0, [pc, #68]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x68>)
 8001b28:	f000 ffcc 	bl	8002ac4 <HAL_GPIO_ReadPin>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_GPIO_EXTI_Callback+0x34>
		  		back_movement = 1;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
		  	}
		tare_counter = 0;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

	}else if(GPIO_Pin==END_STOPmin_Pin){ // quando tocco l'endstop minimo
		back_movement = 0;
		HAL_UART_Transmit_IT(&huart2, "0\n",2);
	}
}
 8001b3e:	e00a      	b.n	8001b56 <HAL_GPIO_EXTI_Callback+0x52>
	}else if(GPIO_Pin==END_STOPmin_Pin){ // quando tocco l'endstop minimo
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d107      	bne.n	8001b56 <HAL_GPIO_EXTI_Callback+0x52>
		back_movement = 0;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, "0\n",2);
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b52:	f002 ff24 	bl	800499e <HAL_UART_Transmit_IT>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000211 	.word	0x20000211
 8001b64:	080084e4 	.word	0x080084e4
 8001b68:	2000037c 	.word	0x2000037c
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	20000218 	.word	0x20000218
 8001b74:	20000214 	.word	0x20000214
 8001b78:	080084e8 	.word	0x080084e8

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001bc6:	2005      	movs	r0, #5
 8001bc8:	f000 fd24 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 fbe2 	bl	80023ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c30:	2010      	movs	r0, #16
 8001c32:	f000 ff93 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c3e:	2020      	movs	r0, #32
 8001c40:	f000 ff8c 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM3_IRQHandler+0x10>)
 8001c4e:	f001 ffbf 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200002ec 	.word	0x200002ec

08001c5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM4_IRQHandler+0x10>)
 8001c62:	f001 ffb5 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200002a4 	.word	0x200002a4

08001c70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <USART2_IRQHandler+0x10>)
 8001c76:	f002 ff07 	bl	8004a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000037c 	.word	0x2000037c

08001c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	return 1;
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_kill>:

int _kill(int pid, int sig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c9e:	f003 fd3d 	bl	800571c <__errno>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2216      	movs	r2, #22
 8001ca6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_exit>:

void _exit (int status)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffe7 	bl	8001c94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cc6:	e7fe      	b.n	8001cc6 <_exit+0x12>

08001cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e00a      	b.n	8001cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cda:	f3af 8000 	nop.w
 8001cde:	4601      	mov	r1, r0
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbf0      	blt.n	8001cda <_read+0x12>
	}

return len;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e009      	b.n	8001d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf1      	blt.n	8001d14 <_write+0x12>
	}
	return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_close>:

int _close(int file)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
	return -1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d62:	605a      	str	r2, [r3, #4]
	return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_isatty>:

int _isatty(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	return 1;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
	return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <_sbrk+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <_sbrk+0x60>)
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <_sbrk+0x64>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <_sbrk+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d207      	bcs.n	8001de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd4:	f003 fca2 	bl	800571c <__errno>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	220c      	movs	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	e009      	b.n	8001df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <_sbrk+0x64>)
 8001df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20018000 	.word	0x20018000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	20000244 	.word	0x20000244
 8001e0c:	200003d8 	.word	0x200003d8

08001e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <SystemInit+0x20>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <SystemInit+0x20>)
 8001e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 290;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001e6c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001e70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e7e:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001e80:	f001 fc3c 	bl	80036fc <HAL_TIM_PWM_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e8a:	f7ff fe77 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e96:	f107 0320 	add.w	r3, r7, #32
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001e9e:	f002 fcaf 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ea8:	f7ff fe68 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eac:	2360      	movs	r3, #96	; 0x60
 8001eae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 146;
 8001eb0:	2392      	movs	r3, #146	; 0x92
 8001eb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001ec4:	f002 f828 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ece:	f7ff fe55 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM2_Init+0xac>)
 8001ed4:	f000 f95c 	bl	8002190 <HAL_TIM_MspPostInit>

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000334 	.word	0x20000334

08001ee4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eea:	f107 0310 	add.w	r3, r7, #16
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f00:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f02:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f08:	223b      	movs	r2, #59	; 0x3b
 8001f0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f26:	4817      	ldr	r0, [pc, #92]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f28:	f001 fce8 	bl	80038fc <HAL_TIM_IC_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001f32:	f7ff fe23 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4619      	mov	r1, r3
 8001f44:	480f      	ldr	r0, [pc, #60]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f46:	f002 fc5b 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f50:	f7ff fe14 	bl	8001b7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f54:	2300      	movs	r3, #0
 8001f56:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <MX_TIM3_Init+0xa0>)
 8001f6c:	f001 ff38 	bl	8003de0 <HAL_TIM_IC_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001f76:	f7ff fe01 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002ec 	.word	0x200002ec
 8001f88:	40000400 	.word	0x40000400

08001f8c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <MX_TIM4_Init+0xa0>)
 8001faa:	4a21      	ldr	r2, [pc, #132]	; (8002030 <MX_TIM4_Init+0xa4>)
 8001fac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59999;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <MX_TIM4_Init+0xa0>)
 8001fb0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001fb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <MX_TIM4_Init+0xa0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <MX_TIM4_Init+0xa0>)
 8001fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <MX_TIM4_Init+0xa0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <MX_TIM4_Init+0xa0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001fd0:	4816      	ldr	r0, [pc, #88]	; (800202c <MX_TIM4_Init+0xa0>)
 8001fd2:	f001 fc93 	bl	80038fc <HAL_TIM_IC_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001fdc:	f7ff fdce 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4619      	mov	r1, r3
 8001fee:	480f      	ldr	r0, [pc, #60]	; (800202c <MX_TIM4_Init+0xa0>)
 8001ff0:	f002 fc06 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001ffa:	f7ff fdbf 	bl	8001b7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ffe:	2300      	movs	r3, #0
 8002000:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002002:	2301      	movs	r3, #1
 8002004:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800200e:	463b      	mov	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_TIM4_Init+0xa0>)
 8002016:	f001 fee3 	bl	8003de0 <HAL_TIM_IC_ConfigChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002020:	f7ff fdac 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200002a4 	.word	0x200002a4
 8002030:	40000800 	.word	0x40000800

08002034 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d10d      	bne.n	8002062 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_TIM_PWM_MspInit+0x3c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_TIM_PWM_MspInit+0x3c>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_TIM_PWM_MspInit+0x3c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3a      	ldr	r2, [pc, #232]	; (800217c <HAL_TIM_IC_MspInit+0x108>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d134      	bne.n	8002100 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a38      	ldr	r2, [pc, #224]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a31      	ldr	r2, [pc, #196]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HCSR_ECHO_Pin;
 80020ce:	2340      	movs	r3, #64	; 0x40
 80020d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020de:	2302      	movs	r3, #2
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HCSR_ECHO_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4619      	mov	r1, r3
 80020e8:	4826      	ldr	r0, [pc, #152]	; (8002184 <HAL_TIM_IC_MspInit+0x110>)
 80020ea:	f000 fb67 	bl	80027bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2101      	movs	r1, #1
 80020f2:	201d      	movs	r0, #29
 80020f4:	f000 fa99 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020f8:	201d      	movs	r0, #29
 80020fa:	f000 fab2 	bl	8002662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020fe:	e038      	b.n	8002172 <HAL_TIM_IC_MspInit+0xfe>
  else if(tim_icHandle->Instance==TIM4)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a20      	ldr	r2, [pc, #128]	; (8002188 <HAL_TIM_IC_MspInit+0x114>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d133      	bne.n	8002172 <HAL_TIM_IC_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_TIM_IC_MspInit+0x10c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PLC_PulsePort_Pin;
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002152:	2302      	movs	r3, #2
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PLC_PulsePort_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	4619      	mov	r1, r3
 800215c:	480b      	ldr	r0, [pc, #44]	; (800218c <HAL_TIM_IC_MspInit+0x118>)
 800215e:	f000 fb2d 	bl	80027bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	201e      	movs	r0, #30
 8002168:	f000 fa5f 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800216c:	201e      	movs	r0, #30
 800216e:	f000 fa78 	bl	8002662 <HAL_NVIC_EnableIRQ>
}
 8002172:	bf00      	nop
 8002174:	3730      	adds	r7, #48	; 0x30
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40000400 	.word	0x40000400
 8002180:	40023800 	.word	0x40023800
 8002184:	40020000 	.word	0x40020000
 8002188:	40000800 	.word	0x40000800
 800218c:	40020400 	.word	0x40020400

08002190 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d11d      	bne.n	80021ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ce:	2301      	movs	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021de:	2301      	movs	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	4619      	mov	r1, r3
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <HAL_TIM_MspPostInit+0x6c>)
 80021ea:	f000 fae7 	bl	80027bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020000 	.word	0x40020000

08002200 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART2_UART_Init+0x4c>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <MX_USART2_UART_Init+0x50>)
 8002208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_USART2_UART_Init+0x4c>)
 800220c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART2_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART2_UART_Init+0x4c>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART2_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART2_UART_Init+0x4c>)
 8002226:	220c      	movs	r2, #12
 8002228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART2_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART2_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_USART2_UART_Init+0x4c>)
 8002238:	f002 fb64 	bl	8004904 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002242:	f7ff fc9b 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000037c 	.word	0x2000037c
 8002250:	40004400 	.word	0x40004400

08002254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_UART_MspInit+0x94>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d133      	bne.n	80022de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_UART_MspInit+0x98>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_UART_MspInit+0x98>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_UART_MspInit+0x98>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_UART_MspInit+0x98>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_UART_MspInit+0x98>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_UART_MspInit+0x98>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022ae:	230c      	movs	r3, #12
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022be:	2307      	movs	r3, #7
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4809      	ldr	r0, [pc, #36]	; (80022f0 <HAL_UART_MspInit+0x9c>)
 80022ca:	f000 fa77 	bl	80027bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80022ce:	2201      	movs	r2, #1
 80022d0:	2101      	movs	r1, #1
 80022d2:	2026      	movs	r0, #38	; 0x26
 80022d4:	f000 f9a9 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022d8:	2026      	movs	r0, #38	; 0x26
 80022da:	f000 f9c2 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40004400 	.word	0x40004400
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000

080022f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800232c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f8:	480d      	ldr	r0, [pc, #52]	; (8002330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022fa:	490e      	ldr	r1, [pc, #56]	; (8002334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022fc:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002300:	e002      	b.n	8002308 <LoopCopyDataInit>

08002302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002306:	3304      	adds	r3, #4

08002308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800230c:	d3f9      	bcc.n	8002302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230e:	4a0b      	ldr	r2, [pc, #44]	; (800233c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002310:	4c0b      	ldr	r4, [pc, #44]	; (8002340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002314:	e001      	b.n	800231a <LoopFillZerobss>

08002316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002318:	3204      	adds	r2, #4

0800231a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800231c:	d3fb      	bcc.n	8002316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800231e:	f7ff fd77 	bl	8001e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002322:	f003 fa01 	bl	8005728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002326:	f7ff f99d 	bl	8001664 <main>
  bx  lr    
 800232a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800232c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002334:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002338:	080088f4 	.word	0x080088f4
  ldr r2, =_sbss
 800233c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002340:	200003d4 	.word	0x200003d4

08002344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002344:	e7fe      	b.n	8002344 <ADC_IRQHandler>
	...

08002348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800234c:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <HAL_Init+0x40>)
 8002352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_Init+0x40>)
 800235e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a07      	ldr	r2, [pc, #28]	; (8002388 <HAL_Init+0x40>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002370:	2003      	movs	r0, #3
 8002372:	f000 f94f 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002376:	2000      	movs	r0, #0
 8002378:	f000 f808 	bl	800238c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800237c:	f7ff fc04 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023c00 	.word	0x40023c00

0800238c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_InitTick+0x54>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_InitTick+0x58>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f967 	bl	800267e <HAL_SYSTICK_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00e      	b.n	80023d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b0f      	cmp	r3, #15
 80023be:	d80a      	bhi.n	80023d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c0:	2200      	movs	r2, #0
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f000 f92f 	bl	800262a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <HAL_InitTick+0x5c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000008 	.word	0x20000008
 80023e8:	20000004 	.word	0x20000004

080023ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_IncTick+0x20>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x24>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_IncTick+0x24>)
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000008 	.word	0x20000008
 8002410:	200003c0 	.word	0x200003c0

08002414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return uwTick;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_GetTick+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200003c0 	.word	0x200003c0

0800242c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff ffee 	bl	8002414 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d005      	beq.n	8002452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_Delay+0x44>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002452:	bf00      	nop
 8002454:	f7ff ffde 	bl	8002414 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d8f7      	bhi.n	8002454 <HAL_Delay+0x28>
  {
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000008 	.word	0x20000008

08002474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800249c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60d3      	str	r3, [r2, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <__NVIC_GetPriorityGrouping+0x18>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0307 	and.w	r3, r3, #7
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db0b      	blt.n	8002502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4907      	ldr	r1, [pc, #28]	; (8002510 <__NVIC_EnableIRQ+0x38>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100

08002514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db0a      	blt.n	800253e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	490c      	ldr	r1, [pc, #48]	; (8002560 <__NVIC_SetPriority+0x4c>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	440b      	add	r3, r1
 8002538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800253c:	e00a      	b.n	8002554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <__NVIC_SetPriority+0x50>)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3b04      	subs	r3, #4
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	440b      	add	r3, r1
 8002552:	761a      	strb	r2, [r3, #24]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f1c3 0307 	rsb	r3, r3, #7
 8002582:	2b04      	cmp	r3, #4
 8002584:	bf28      	it	cs
 8002586:	2304      	movcs	r3, #4
 8002588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3304      	adds	r3, #4
 800258e:	2b06      	cmp	r3, #6
 8002590:	d902      	bls.n	8002598 <NVIC_EncodePriority+0x30>
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3b03      	subs	r3, #3
 8002596:	e000      	b.n	800259a <NVIC_EncodePriority+0x32>
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	f04f 32ff 	mov.w	r2, #4294967295
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43d9      	mvns	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	4313      	orrs	r3, r2
         );
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e0:	d301      	bcc.n	80025e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00f      	b.n	8002606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <SysTick_Config+0x40>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ee:	210f      	movs	r1, #15
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f7ff ff8e 	bl	8002514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <SysTick_Config+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <SysTick_Config+0x40>)
 8002600:	2207      	movs	r2, #7
 8002602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff29 	bl	8002474 <__NVIC_SetPriorityGrouping>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800263c:	f7ff ff3e 	bl	80024bc <__NVIC_GetPriorityGrouping>
 8002640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	6978      	ldr	r0, [r7, #20]
 8002648:	f7ff ff8e 	bl	8002568 <NVIC_EncodePriority>
 800264c:	4602      	mov	r2, r0
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff5d 	bl	8002514 <__NVIC_SetPriority>
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff31 	bl	80024d8 <__NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffa2 	bl	80025d0 <SysTick_Config>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff feb6 	bl	8002414 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d008      	beq.n	80026c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e052      	b.n	800276e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0216 	bic.w	r2, r2, #22
 80026d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <HAL_DMA_Abort+0x62>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0208 	bic.w	r2, r2, #8
 8002706:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002718:	e013      	b.n	8002742 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271a:	f7ff fe7b 	bl	8002414 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b05      	cmp	r3, #5
 8002726:	d90c      	bls.n	8002742 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e015      	b.n	800276e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e4      	bne.n	800271a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	223f      	movs	r2, #63	; 0x3f
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d004      	beq.n	8002794 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e00c      	b.n	80027ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2205      	movs	r2, #5
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e159      	b.n	8002a8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	f040 8148 	bne.w	8002a86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d005      	beq.n	800280e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280a:	2b02      	cmp	r3, #2
 800280c:	d130      	bne.n	8002870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 0201 	and.w	r2, r3, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b03      	cmp	r3, #3
 800287a:	d017      	beq.n	80028ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d123      	bne.n	8002900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	220f      	movs	r2, #15
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0203 	and.w	r2, r3, #3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a2 	beq.w	8002a86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <HAL_GPIO_Init+0x2e8>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4a56      	ldr	r2, [pc, #344]	; (8002aa4 <HAL_GPIO_Init+0x2e8>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <HAL_GPIO_Init+0x2e8>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295e:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_GPIO_Init+0x2ec>)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3302      	adds	r3, #2
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a49      	ldr	r2, [pc, #292]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d019      	beq.n	80029be <HAL_GPIO_Init+0x202>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a48      	ldr	r2, [pc, #288]	; (8002ab0 <HAL_GPIO_Init+0x2f4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_GPIO_Init+0x1fe>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a47      	ldr	r2, [pc, #284]	; (8002ab4 <HAL_GPIO_Init+0x2f8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00d      	beq.n	80029b6 <HAL_GPIO_Init+0x1fa>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a46      	ldr	r2, [pc, #280]	; (8002ab8 <HAL_GPIO_Init+0x2fc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <HAL_GPIO_Init+0x1f6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a45      	ldr	r2, [pc, #276]	; (8002abc <HAL_GPIO_Init+0x300>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_GPIO_Init+0x1f2>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e008      	b.n	80029c0 <HAL_GPIO_Init+0x204>
 80029ae:	2307      	movs	r3, #7
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x204>
 80029b2:	2303      	movs	r3, #3
 80029b4:	e004      	b.n	80029c0 <HAL_GPIO_Init+0x204>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e002      	b.n	80029c0 <HAL_GPIO_Init+0x204>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_GPIO_Init+0x204>
 80029be:	2300      	movs	r3, #0
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f002 0203 	and.w	r2, r2, #3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4093      	lsls	r3, r2
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d0:	4935      	ldr	r1, [pc, #212]	; (8002aa8 <HAL_GPIO_Init+0x2ec>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a02:	4a2f      	ldr	r2, [pc, #188]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2c:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a80:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_GPIO_Init+0x304>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	f67f aea2 	bls.w	80027d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40013c00 	.word	0x40013c00

08002ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e001      	b.n	8002ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b38:	887a      	ldrh	r2, [r7, #2]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	041a      	lsls	r2, r3, #16
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43d9      	mvns	r1, r3
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	400b      	ands	r3, r1
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe ffc2 	bl	8001b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e12b      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe faf0 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f000 fd5c 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a81      	ldr	r2, [pc, #516]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d807      	bhi.n	8002c10 <HAL_I2C_Init+0x84>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a80      	ldr	r2, [pc, #512]	; (8002e04 <HAL_I2C_Init+0x278>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e006      	b.n	8002c1e <HAL_I2C_Init+0x92>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a7d      	ldr	r2, [pc, #500]	; (8002e08 <HAL_I2C_Init+0x27c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bf94      	ite	ls
 8002c18:	2301      	movls	r3, #1
 8002c1a:	2300      	movhi	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0e7      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a78      	ldr	r2, [pc, #480]	; (8002e0c <HAL_I2C_Init+0x280>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a6a      	ldr	r2, [pc, #424]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d802      	bhi.n	8002c60 <HAL_I2C_Init+0xd4>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	e009      	b.n	8002c74 <HAL_I2C_Init+0xe8>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	4a69      	ldr	r2, [pc, #420]	; (8002e10 <HAL_I2C_Init+0x284>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	3301      	adds	r3, #1
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	495c      	ldr	r1, [pc, #368]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d819      	bhi.n	8002cc8 <HAL_I2C_Init+0x13c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e59      	subs	r1, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ca8:	400b      	ands	r3, r1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_I2C_Init+0x138>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e59      	subs	r1, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc2:	e051      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e04f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d111      	bne.n	8002cf4 <HAL_I2C_Init+0x168>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e58      	subs	r0, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e012      	b.n	8002d1a <HAL_I2C_Init+0x18e>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	0099      	lsls	r1, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Init+0x196>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e022      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10e      	bne.n	8002d48 <HAL_I2C_Init+0x1bc>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1e58      	subs	r0, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	440b      	add	r3, r1
 8002d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	0099      	lsls	r1, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	6809      	ldr	r1, [r1, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6911      	ldr	r1, [r2, #16]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	000186a0 	.word	0x000186a0
 8002e04:	001e847f 	.word	0x001e847f
 8002e08:	003d08ff 	.word	0x003d08ff
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e264      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d075      	beq.n	8002f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e32:	4ba3      	ldr	r3, [pc, #652]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d00c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3e:	4ba0      	ldr	r3, [pc, #640]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d112      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4b9d      	ldr	r3, [pc, #628]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	4b99      	ldr	r3, [pc, #612]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d05b      	beq.n	8002f1c <HAL_RCC_OscConfig+0x108>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d157      	bne.n	8002f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e23f      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x74>
 8002e7a:	4b91      	ldr	r3, [pc, #580]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a90      	ldr	r2, [pc, #576]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e01d      	b.n	8002ec4 <HAL_RCC_OscConfig+0xb0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0x98>
 8002e92:	4b8b      	ldr	r3, [pc, #556]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a8a      	ldr	r2, [pc, #552]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a87      	ldr	r2, [pc, #540]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xb0>
 8002eac:	4b84      	ldr	r3, [pc, #528]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a83      	ldr	r2, [pc, #524]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7ff faa2 	bl	8002414 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7ff fa9e 	bl	8002414 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e204      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xc0>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff fa8e 	bl	8002414 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7ff fa8a 	bl	8002414 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1f0      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	4b6c      	ldr	r3, [pc, #432]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0xe8>
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d063      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f2a:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f36:	4b62      	ldr	r3, [pc, #392]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d11c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	4b5c      	ldr	r3, [pc, #368]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x152>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e1c4      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4952      	ldr	r1, [pc, #328]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e03a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f84:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_RCC_OscConfig+0x2b0>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7ff fa43 	bl	8002414 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f92:	f7ff fa3f 	bl	8002414 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e1a5      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4940      	ldr	r1, [pc, #256]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc6:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_OscConfig+0x2b0>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7ff fa22 	bl	8002414 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7ff fa1e 	bl	8002414 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e184      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d030      	beq.n	8003060 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCC_OscConfig+0x2b4>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7ff fa02 	bl	8002414 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003014:	f7ff f9fe 	bl	8002414 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e164      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x200>
 8003032:	e015      	b.n	8003060 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x2b4>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7ff f9eb 	bl	8002414 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003042:	f7ff f9e7 	bl	8002414 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e14d      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a0 	beq.w	80031ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10f      	bne.n	800309e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_OscConfig+0x2b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d121      	bne.n	80030ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCC_OscConfig+0x2b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <HAL_RCC_OscConfig+0x2b8>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b6:	f7ff f9ad 	bl	8002414 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	e011      	b.n	80030e2 <HAL_RCC_OscConfig+0x2ce>
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
 80030cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d0:	f7ff f9a0 	bl	8002414 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e106      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b85      	ldr	r3, [pc, #532]	; (80032f8 <HAL_RCC_OscConfig+0x4e4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d106      	bne.n	8003104 <HAL_RCC_OscConfig+0x2f0>
 80030f6:	4b81      	ldr	r3, [pc, #516]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a80      	ldr	r2, [pc, #512]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	e01c      	b.n	800313e <HAL_RCC_OscConfig+0x32a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b05      	cmp	r3, #5
 800310a:	d10c      	bne.n	8003126 <HAL_RCC_OscConfig+0x312>
 800310c:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a7a      	ldr	r2, [pc, #488]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	4b78      	ldr	r3, [pc, #480]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4a77      	ldr	r2, [pc, #476]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6713      	str	r3, [r2, #112]	; 0x70
 8003124:	e00b      	b.n	800313e <HAL_RCC_OscConfig+0x32a>
 8003126:	4b75      	ldr	r3, [pc, #468]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a74      	ldr	r2, [pc, #464]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
 8003132:	4b72      	ldr	r3, [pc, #456]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a71      	ldr	r2, [pc, #452]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d015      	beq.n	8003172 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003146:	f7ff f965 	bl	8002414 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7ff f961 	bl	8002414 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	; 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0c5      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	4b65      	ldr	r3, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ee      	beq.n	800314e <HAL_RCC_OscConfig+0x33a>
 8003170:	e014      	b.n	800319c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7ff f94f 	bl	8002414 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7ff f94b 	bl	8002414 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0af      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ee      	bne.n	800317a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b56      	ldr	r3, [pc, #344]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a55      	ldr	r2, [pc, #340]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 809b 	beq.w	80032ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d05c      	beq.n	800327e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d141      	bne.n	8003250 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <HAL_RCC_OscConfig+0x4ec>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7ff f91f 	bl	8002414 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7ff f91b 	bl	8002414 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e081      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ec:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	019b      	lsls	r3, r3, #6
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	3b01      	subs	r3, #1
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	4937      	ldr	r1, [pc, #220]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <HAL_RCC_OscConfig+0x4ec>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7ff f8f4 	bl	8002414 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7ff f8f0 	bl	8002414 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e056      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x41c>
 800324e:	e04e      	b.n	80032ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003250:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <HAL_RCC_OscConfig+0x4ec>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7ff f8dd 	bl	8002414 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325e:	f7ff f8d9 	bl	8002414 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e03f      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f0      	bne.n	800325e <HAL_RCC_OscConfig+0x44a>
 800327c:	e037      	b.n	80032ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e032      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <HAL_RCC_OscConfig+0x4e8>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d028      	beq.n	80032ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d121      	bne.n	80032ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d11a      	bne.n	80032ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ba:	4013      	ands	r3, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d111      	bne.n	80032ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	3b01      	subs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40007000 	.word	0x40007000
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470060 	.word	0x42470060

08003304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0cc      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b68      	ldr	r3, [pc, #416]	; (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d90c      	bls.n	8003340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b65      	ldr	r3, [pc, #404]	; (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b63      	ldr	r3, [pc, #396]	; (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0b8      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d020      	beq.n	800338e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003358:	4b59      	ldr	r3, [pc, #356]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003362:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003370:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800337a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	4b50      	ldr	r3, [pc, #320]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	494d      	ldr	r1, [pc, #308]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d044      	beq.n	8003424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d119      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e07f      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d003      	beq.n	80033c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c2:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e06f      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e067      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f023 0203 	bic.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4934      	ldr	r1, [pc, #208]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f4:	f7ff f80e 	bl	8002414 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7ff f80a 	bl	8002414 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e04f      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 020c 	and.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	429a      	cmp	r2, r3
 8003422:	d1eb      	bne.n	80033fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003424:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d20c      	bcs.n	800344c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e032      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4916      	ldr	r1, [pc, #88]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	490e      	ldr	r1, [pc, #56]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800348a:	f000 f821 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800348e:	4602      	mov	r2, r0
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	490a      	ldr	r1, [pc, #40]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe ff6e 	bl	800238c <HAL_InitTick>

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40023c00 	.word	0x40023c00
 80034c0:	40023800 	.word	0x40023800
 80034c4:	080084ec 	.word	0x080084ec
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004

080034d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	2300      	movs	r3, #0
 80034e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e8:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d00d      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x40>
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	f200 80bd 	bhi.w	8003674 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x34>
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d003      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x3a>
 8003502:	e0b7      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003506:	60bb      	str	r3, [r7, #8]
       break;
 8003508:	e0b7      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800350a:	4b61      	ldr	r3, [pc, #388]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800350c:	60bb      	str	r3, [r7, #8]
      break;
 800350e:	e0b4      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003510:	4b5d      	ldr	r3, [pc, #372]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003518:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d04d      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003526:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	099b      	lsrs	r3, r3, #6
 800352c:	461a      	mov	r2, r3
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003536:	f04f 0100 	mov.w	r1, #0
 800353a:	ea02 0800 	and.w	r8, r2, r0
 800353e:	ea03 0901 	and.w	r9, r3, r1
 8003542:	4640      	mov	r0, r8
 8003544:	4649      	mov	r1, r9
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	014b      	lsls	r3, r1, #5
 8003550:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003554:	0142      	lsls	r2, r0, #5
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	ebb0 0008 	subs.w	r0, r0, r8
 800355e:	eb61 0109 	sbc.w	r1, r1, r9
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	018b      	lsls	r3, r1, #6
 800356c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003570:	0182      	lsls	r2, r0, #6
 8003572:	1a12      	subs	r2, r2, r0
 8003574:	eb63 0301 	sbc.w	r3, r3, r1
 8003578:	f04f 0000 	mov.w	r0, #0
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	00d9      	lsls	r1, r3, #3
 8003582:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003586:	00d0      	lsls	r0, r2, #3
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	eb12 0208 	adds.w	r2, r2, r8
 8003590:	eb43 0309 	adc.w	r3, r3, r9
 8003594:	f04f 0000 	mov.w	r0, #0
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	0259      	lsls	r1, r3, #9
 800359e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035a2:	0250      	lsls	r0, r2, #9
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	f7fd fb70 	bl	8000c98 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e04a      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c2:	4b31      	ldr	r3, [pc, #196]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	099b      	lsrs	r3, r3, #6
 80035c8:	461a      	mov	r2, r3
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035d2:	f04f 0100 	mov.w	r1, #0
 80035d6:	ea02 0400 	and.w	r4, r2, r0
 80035da:	ea03 0501 	and.w	r5, r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	014b      	lsls	r3, r1, #5
 80035ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035f0:	0142      	lsls	r2, r0, #5
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	1b00      	subs	r0, r0, r4
 80035f8:	eb61 0105 	sbc.w	r1, r1, r5
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	018b      	lsls	r3, r1, #6
 8003606:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800360a:	0182      	lsls	r2, r0, #6
 800360c:	1a12      	subs	r2, r2, r0
 800360e:	eb63 0301 	sbc.w	r3, r3, r1
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	00d9      	lsls	r1, r3, #3
 800361c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003620:	00d0      	lsls	r0, r2, #3
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	1912      	adds	r2, r2, r4
 8003628:	eb45 0303 	adc.w	r3, r5, r3
 800362c:	f04f 0000 	mov.w	r0, #0
 8003630:	f04f 0100 	mov.w	r1, #0
 8003634:	0299      	lsls	r1, r3, #10
 8003636:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800363a:	0290      	lsls	r0, r2, #10
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	461a      	mov	r2, r3
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	f7fd fb24 	bl	8000c98 <__aeabi_uldivmod>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4613      	mov	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	60bb      	str	r3, [r7, #8]
      break;
 8003672:	e002      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003676:	60bb      	str	r3, [r7, #8]
      break;
 8003678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367a:	68bb      	ldr	r3, [r7, #8]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	00f42400 	.word	0x00f42400
 8003690:	007a1200 	.word	0x007a1200

08003694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000000 	.word	0x20000000

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	080084fc 	.word	0x080084fc

080036d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036d8:	f7ff ffdc 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0b5b      	lsrs	r3, r3, #13
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	080084fc 	.word	0x080084fc

080036fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e041      	b.n	8003792 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fc86 	bl	8002034 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 fd10 	bl	8004160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_TIM_PWM_Start+0x24>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e022      	b.n	8003806 <HAL_TIM_PWM_Start+0x6a>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d109      	bne.n	80037da <HAL_TIM_PWM_Start+0x3e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	bf14      	ite	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2300      	moveq	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	e015      	b.n	8003806 <HAL_TIM_PWM_Start+0x6a>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d109      	bne.n	80037f4 <HAL_TIM_PWM_Start+0x58>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e008      	b.n	8003806 <HAL_TIM_PWM_Start+0x6a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e068      	b.n	80038e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <HAL_TIM_PWM_Start+0x82>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800381c:	e013      	b.n	8003846 <HAL_TIM_PWM_Start+0xaa>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d104      	bne.n	800382e <HAL_TIM_PWM_Start+0x92>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800382c:	e00b      	b.n	8003846 <HAL_TIM_PWM_Start+0xaa>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d104      	bne.n	800383e <HAL_TIM_PWM_Start+0xa2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	e003      	b.n	8003846 <HAL_TIM_PWM_Start+0xaa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	6839      	ldr	r1, [r7, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 ffb0 	bl	80047b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_TIM_PWM_Start+0x14c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d107      	bne.n	800386e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_TIM_PWM_Start+0x14c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d018      	beq.n	80038aa <HAL_TIM_PWM_Start+0x10e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003880:	d013      	beq.n	80038aa <HAL_TIM_PWM_Start+0x10e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a19      	ldr	r2, [pc, #100]	; (80038ec <HAL_TIM_PWM_Start+0x150>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00e      	beq.n	80038aa <HAL_TIM_PWM_Start+0x10e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <HAL_TIM_PWM_Start+0x154>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_TIM_PWM_Start+0x10e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <HAL_TIM_PWM_Start+0x158>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_TIM_PWM_Start+0x10e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <HAL_TIM_PWM_Start+0x15c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d111      	bne.n	80038ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b06      	cmp	r3, #6
 80038ba:	d010      	beq.n	80038de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038cc:	e007      	b.n	80038de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40014000 	.word	0x40014000

080038fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e041      	b.n	8003992 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fe fba6 	bl	8002074 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 fc10 	bl	8004160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0x1e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	e013      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x46>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start_IT+0x2e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e00b      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x46>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d104      	bne.n	80039da <HAL_TIM_IC_Start_IT+0x3e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e003      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x46>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_TIM_IC_Start_IT+0x58>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e013      	b.n	8003a1c <HAL_TIM_IC_Start_IT+0x80>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d104      	bne.n	8003a04 <HAL_TIM_IC_Start_IT+0x68>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e00b      	b.n	8003a1c <HAL_TIM_IC_Start_IT+0x80>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d104      	bne.n	8003a14 <HAL_TIM_IC_Start_IT+0x78>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e003      	b.n	8003a1c <HAL_TIM_IC_Start_IT+0x80>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a1e:	7bbb      	ldrb	r3, [r7, #14]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a24:	7b7b      	ldrb	r3, [r7, #13]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0c2      	b.n	8003bb4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_IC_Start_IT+0xa2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a3c:	e013      	b.n	8003a66 <HAL_TIM_IC_Start_IT+0xca>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_IC_Start_IT+0xb2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a4c:	e00b      	b.n	8003a66 <HAL_TIM_IC_Start_IT+0xca>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_IC_Start_IT+0xc2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5c:	e003      	b.n	8003a66 <HAL_TIM_IC_Start_IT+0xca>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_IC_Start_IT+0xda>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a74:	e013      	b.n	8003a9e <HAL_TIM_IC_Start_IT+0x102>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_IC_Start_IT+0xea>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a84:	e00b      	b.n	8003a9e <HAL_TIM_IC_Start_IT+0x102>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_IC_Start_IT+0xfa>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	e003      	b.n	8003a9e <HAL_TIM_IC_Start_IT+0x102>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	d841      	bhi.n	8003b28 <HAL_TIM_IC_Start_IT+0x18c>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <HAL_TIM_IC_Start_IT+0x110>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003b29 	.word	0x08003b29
 8003ab4:	08003b29 	.word	0x08003b29
 8003ab8:	08003b29 	.word	0x08003b29
 8003abc:	08003af3 	.word	0x08003af3
 8003ac0:	08003b29 	.word	0x08003b29
 8003ac4:	08003b29 	.word	0x08003b29
 8003ac8:	08003b29 	.word	0x08003b29
 8003acc:	08003b05 	.word	0x08003b05
 8003ad0:	08003b29 	.word	0x08003b29
 8003ad4:	08003b29 	.word	0x08003b29
 8003ad8:	08003b29 	.word	0x08003b29
 8003adc:	08003b17 	.word	0x08003b17
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0202 	orr.w	r2, r2, #2
 8003aee:	60da      	str	r2, [r3, #12]
      break;
 8003af0:	e01d      	b.n	8003b2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0204 	orr.w	r2, r2, #4
 8003b00:	60da      	str	r2, [r3, #12]
      break;
 8003b02:	e014      	b.n	8003b2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0208 	orr.w	r2, r2, #8
 8003b12:	60da      	str	r2, [r3, #12]
      break;
 8003b14:	e00b      	b.n	8003b2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0210 	orr.w	r2, r2, #16
 8003b24:	60da      	str	r2, [r3, #12]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d13e      	bne.n	8003bb2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fe39 	bl	80047b4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <HAL_TIM_IC_Start_IT+0x220>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d013      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_TIM_IC_Start_IT+0x224>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <HAL_TIM_IC_Start_IT+0x228>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIM_IC_Start_IT+0x1e2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <HAL_TIM_IC_Start_IT+0x230>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d111      	bne.n	8003ba2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b06      	cmp	r3, #6
 8003b8e:	d010      	beq.n	8003bb2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba0:	e007      	b.n	8003bb2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40000c00 	.word	0x40000c00
 8003bcc:	40014000 	.word	0x40014000

08003bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0202 	mvn.w	r2, #2
 8003bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fb22 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa82 	bl	8004124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa89 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0204 	mvn.w	r2, #4
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd faf8 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa58 	bl	8004124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fa5f 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0208 	mvn.w	r2, #8
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd face 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa2e 	bl	8004124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fa35 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0210 	mvn.w	r2, #16
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd faa4 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa04 	bl	8004124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa0b 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0201 	mvn.w	r2, #1
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fec2 	bl	8001ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fdb8 	bl	80048f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9d0 	bl	800414c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0220 	mvn.w	r2, #32
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fd82 	bl	80048dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e088      	b.n	8003f10 <HAL_TIM_IC_ConfigChannel+0x130>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f000 fbac 	bl	8004578 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 020c 	bic.w	r2, r2, #12
 8003e2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	619a      	str	r2, [r3, #24]
 8003e42:	e060      	b.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d11c      	bne.n	8003e84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6819      	ldr	r1, [r3, #0]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f000 fbf5 	bl	8004648 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6999      	ldr	r1, [r3, #24]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	021a      	lsls	r2, r3, #8
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	619a      	str	r2, [r3, #24]
 8003e82:	e040      	b.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d11b      	bne.n	8003ec2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f000 fc12 	bl	80046c2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 020c 	bic.w	r2, r2, #12
 8003eac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69d9      	ldr	r1, [r3, #28]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	61da      	str	r2, [r3, #28]
 8003ec0:	e021      	b.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d11c      	bne.n	8003f02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f000 fc2f 	bl	800473a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003eea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69d9      	ldr	r1, [r3, #28]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	61da      	str	r2, [r3, #28]
 8003f00:	e001      	b.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e0ae      	b.n	8004094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	f200 809f 	bhi.w	8004084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08004085 	.word	0x08004085
 8003f54:	08004085 	.word	0x08004085
 8003f58:	08004085 	.word	0x08004085
 8003f5c:	08003fc1 	.word	0x08003fc1
 8003f60:	08004085 	.word	0x08004085
 8003f64:	08004085 	.word	0x08004085
 8003f68:	08004085 	.word	0x08004085
 8003f6c:	08004003 	.word	0x08004003
 8003f70:	08004085 	.word	0x08004085
 8003f74:	08004085 	.word	0x08004085
 8003f78:	08004085 	.word	0x08004085
 8003f7c:	08004043 	.word	0x08004043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f96a 	bl	8004260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0204 	bic.w	r2, r2, #4
 8003faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6999      	ldr	r1, [r3, #24]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	619a      	str	r2, [r3, #24]
      break;
 8003fbe:	e064      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f9b0 	bl	800432c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6999      	ldr	r1, [r3, #24]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	021a      	lsls	r2, r3, #8
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	619a      	str	r2, [r3, #24]
      break;
 8004000:	e043      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f9fb 	bl	8004404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0208 	orr.w	r2, r2, #8
 800401c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0204 	bic.w	r2, r2, #4
 800402c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69d9      	ldr	r1, [r3, #28]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	61da      	str	r2, [r3, #28]
      break;
 8004040:	e023      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fa45 	bl	80044d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69d9      	ldr	r1, [r3, #28]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	021a      	lsls	r2, r3, #8
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	61da      	str	r2, [r3, #28]
      break;
 8004082:	e002      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	75fb      	strb	r3, [r7, #23]
      break;
 8004088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	d831      	bhi.n	8004114 <HAL_TIM_ReadCapturedValue+0x78>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	08004115 	.word	0x08004115
 80040c0:	08004115 	.word	0x08004115
 80040c4:	08004115 	.word	0x08004115
 80040c8:	080040f7 	.word	0x080040f7
 80040cc:	08004115 	.word	0x08004115
 80040d0:	08004115 	.word	0x08004115
 80040d4:	08004115 	.word	0x08004115
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004115 	.word	0x08004115
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004115 	.word	0x08004115
 80040e8:	0800410b 	.word	0x0800410b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	60fb      	str	r3, [r7, #12]

      break;
 80040f4:	e00f      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	60fb      	str	r3, [r7, #12]

      break;
 80040fe:	e00a      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	60fb      	str	r3, [r7, #12]

      break;
 8004108:	e005      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	60fb      	str	r3, [r7, #12]

      break;
 8004112:	e000      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004114:	bf00      	nop
  }

  return tmpreg;
 8004116:	68fb      	ldr	r3, [r7, #12]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a34      	ldr	r2, [pc, #208]	; (8004244 <TIM_Base_SetConfig+0xe4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00f      	beq.n	8004198 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417e:	d00b      	beq.n	8004198 <TIM_Base_SetConfig+0x38>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a31      	ldr	r2, [pc, #196]	; (8004248 <TIM_Base_SetConfig+0xe8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d007      	beq.n	8004198 <TIM_Base_SetConfig+0x38>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a30      	ldr	r2, [pc, #192]	; (800424c <TIM_Base_SetConfig+0xec>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_Base_SetConfig+0x38>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a2f      	ldr	r2, [pc, #188]	; (8004250 <TIM_Base_SetConfig+0xf0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d108      	bne.n	80041aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a25      	ldr	r2, [pc, #148]	; (8004244 <TIM_Base_SetConfig+0xe4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01b      	beq.n	80041ea <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d017      	beq.n	80041ea <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a22      	ldr	r2, [pc, #136]	; (8004248 <TIM_Base_SetConfig+0xe8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <TIM_Base_SetConfig+0xec>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00f      	beq.n	80041ea <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a20      	ldr	r2, [pc, #128]	; (8004250 <TIM_Base_SetConfig+0xf0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00b      	beq.n	80041ea <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <TIM_Base_SetConfig+0xf4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d007      	beq.n	80041ea <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <TIM_Base_SetConfig+0xf8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_Base_SetConfig+0x8a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <TIM_Base_SetConfig+0xfc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d108      	bne.n	80041fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a08      	ldr	r2, [pc, #32]	; (8004244 <TIM_Base_SetConfig+0xe4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d103      	bne.n	8004230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	615a      	str	r2, [r3, #20]
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800

08004260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f023 0201 	bic.w	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0303 	bic.w	r3, r3, #3
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f023 0302 	bic.w	r3, r3, #2
 80042a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <TIM_OC1_SetConfig+0xc8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d10c      	bne.n	80042d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f023 0308 	bic.w	r3, r3, #8
 80042c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a13      	ldr	r2, [pc, #76]	; (8004328 <TIM_OC1_SetConfig+0xc8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d111      	bne.n	8004302 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	621a      	str	r2, [r3, #32]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40010000 	.word	0x40010000

0800432c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0210 	bic.w	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0320 	bic.w	r3, r3, #32
 8004376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a1e      	ldr	r2, [pc, #120]	; (8004400 <TIM_OC2_SetConfig+0xd4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10d      	bne.n	80043a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a15      	ldr	r2, [pc, #84]	; (8004400 <TIM_OC2_SetConfig+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d113      	bne.n	80043d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000

08004404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <TIM_OC3_SetConfig+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10d      	bne.n	800447e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800447c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <TIM_OC3_SetConfig+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d113      	bne.n	80044ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800448c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	621a      	str	r2, [r3, #32]
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40010000 	.word	0x40010000

080044d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <TIM_OC4_SetConfig+0x9c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d109      	bne.n	800454c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800453e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010000 	.word	0x40010000

08004578 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a24      	ldr	r2, [pc, #144]	; (8004634 <TIM_TI1_SetConfig+0xbc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d00f      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a21      	ldr	r2, [pc, #132]	; (8004638 <TIM_TI1_SetConfig+0xc0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a20      	ldr	r2, [pc, #128]	; (800463c <TIM_TI1_SetConfig+0xc4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <TIM_TI1_SetConfig+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <TIM_TI1_SetConfig+0xcc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <TIM_TI1_SetConfig+0x5a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <TIM_TI1_SetConfig+0x5c>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e003      	b.n	80045f2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f023 030a 	bic.w	r3, r3, #10
 800460c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 030a 	and.w	r3, r3, #10
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40014000 	.word	0x40014000

08004648 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0210 	bic.w	r2, r3, #16
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	031b      	lsls	r3, r3, #12
 800468c:	b29b      	uxth	r3, r3
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800469a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b087      	sub	sp, #28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	b2db      	uxtb	r3, r3
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004712:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800473a:	b480      	push	{r7}
 800473c:	b087      	sub	sp, #28
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004778:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	031b      	lsls	r3, r3, #12
 800477e:	b29b      	uxth	r3, r3
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800478c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2201      	movs	r2, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	401a      	ands	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e050      	b.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004864:	d013      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a16      	ldr	r2, [pc, #88]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10c      	bne.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40014000 	.word	0x40014000

080048dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e03f      	b.n	8004996 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd fc92 	bl	8002254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fd1f 	bl	800538c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800495c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695a      	ldr	r2, [r3, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800496c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800497c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	4613      	mov	r3, r2
 80049aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d130      	bne.n	8004a1a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_UART_Transmit_IT+0x26>
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e029      	b.n	8004a1c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Transmit_IT+0x38>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e022      	b.n	8004a1c <HAL_UART_Transmit_IT+0x7e>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2221      	movs	r2, #33	; 0x21
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a14:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d11d      	bne.n	8004a7e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_UART_Receive_IT+0x26>
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e016      	b.n	8004a80 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_UART_Receive_IT+0x38>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e00f      	b.n	8004a80 <HAL_UART_Receive_IT+0x58>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	461a      	mov	r2, r3
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fab5 	bl	8004fe4 <UART_Start_Receive_IT>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	e000      	b.n	8004a80 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b0ba      	sub	sp, #232	; 0xe8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_UART_IRQHandler+0x66>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fb95 	bl	8005216 <UART_Receive_IT>
      return;
 8004aec:	e256      	b.n	8004f9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80de 	beq.w	8004cb4 <HAL_UART_IRQHandler+0x22c>
 8004af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80d1 	beq.w	8004cb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_UART_IRQHandler+0xae>
 8004b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f043 0201 	orr.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_UART_IRQHandler+0xd2>
 8004b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f043 0202 	orr.w	r2, r3, #2
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_UART_IRQHandler+0xf6>
 8004b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d011      	beq.n	8004bae <HAL_UART_IRQHandler+0x126>
 8004b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f043 0208 	orr.w	r2, r3, #8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 81ed 	beq.w	8004f92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x14e>
 8004bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fb20 	bl	8005216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <HAL_UART_IRQHandler+0x17a>
 8004bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d04f      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa28 	bl	8005058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d141      	bne.n	8004c9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3314      	adds	r3, #20
 8004c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1d9      	bne.n	8004c16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d013      	beq.n	8004c92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	4a7d      	ldr	r2, [pc, #500]	; (8004e64 <HAL_UART_IRQHandler+0x3dc>)
 8004c70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd fd7d 	bl	8002776 <HAL_DMA_Abort_IT>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	e00e      	b.n	8004cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f990 	bl	8004fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c98:	e00a      	b.n	8004cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f98c 	bl	8004fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	e006      	b.n	8004cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f988 	bl	8004fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cae:	e170      	b.n	8004f92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	bf00      	nop
    return;
 8004cb2:	e16e      	b.n	8004f92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f040 814a 	bne.w	8004f52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8143 	beq.w	8004f52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 813c 	beq.w	8004f52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	f040 80b4 	bne.w	8004e68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8140 	beq.w	8004f96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	f080 8139 	bcs.w	8004f96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d36:	f000 8088 	beq.w	8004e4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1d9      	bne.n	8004d3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3314      	adds	r3, #20
 8004da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004daa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e1      	bne.n	8004d86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3314      	adds	r3, #20
 8004dc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3314      	adds	r3, #20
 8004de2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004de8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e3      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1a:	f023 0310 	bic.w	r3, r3, #16
 8004e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e3      	bne.n	8004e08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fd fc26 	bl	8002696 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f8b6 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e60:	e099      	b.n	8004f96 <HAL_UART_IRQHandler+0x50e>
 8004e62:	bf00      	nop
 8004e64:	0800511f 	.word	0x0800511f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 808b 	beq.w	8004f9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8086 	beq.w	8004f9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004eb2:	647a      	str	r2, [r7, #68]	; 0x44
 8004eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e3      	bne.n	8004e8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eea:	633a      	str	r2, [r7, #48]	; 0x30
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e3      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0310 	bic.w	r3, r3, #16
 8004f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f30:	61fa      	str	r2, [r7, #28]
 8004f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	69b9      	ldr	r1, [r7, #24]
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e3      	bne.n	8004f0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f83e 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f50:	e023      	b.n	8004f9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_UART_IRQHandler+0x4ea>
 8004f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8eb 	bl	8005146 <UART_Transmit_IT>
    return;
 8004f70:	e014      	b.n	8004f9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00e      	beq.n	8004f9c <HAL_UART_IRQHandler+0x514>
 8004f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d008      	beq.n	8004f9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f92b 	bl	80051e6 <UART_EndTransmit_IT>
    return;
 8004f90:	e004      	b.n	8004f9c <HAL_UART_IRQHandler+0x514>
    return;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <HAL_UART_IRQHandler+0x514>
      return;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_UART_IRQHandler+0x514>
      return;
 8004f9a:	bf00      	nop
  }
}
 8004f9c:	37e8      	adds	r7, #232	; 0xe8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop

08004fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2222      	movs	r2, #34	; 0x22
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005028:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0220 	orr.w	r2, r2, #32
 8005048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b095      	sub	sp, #84	; 0x54
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005080:	643a      	str	r2, [r7, #64]	; 0x40
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e5      	bne.n	8005060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d119      	bne.n	8005104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0310 	bic.w	r3, r3, #16
 80050e6:	647b      	str	r3, [r7, #68]	; 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f0:	61ba      	str	r2, [r7, #24]
 80050f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6979      	ldr	r1, [r7, #20]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	613b      	str	r3, [r7, #16]
   return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005112:	bf00      	nop
 8005114:	3754      	adds	r7, #84	; 0x54
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff ff3d 	bl	8004fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b21      	cmp	r3, #33	; 0x21
 8005158:	d13e      	bne.n	80051d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d114      	bne.n	800518e <UART_Transmit_IT+0x48>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d110      	bne.n	800518e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]
 800518c:	e008      	b.n	80051a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6211      	str	r1, [r2, #32]
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4619      	mov	r1, r3
 80051ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10f      	bne.n	80051d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e000      	b.n	80051da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fecc 	bl	8004fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b08c      	sub	sp, #48	; 0x30
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b22      	cmp	r3, #34	; 0x22
 8005228:	f040 80ab 	bne.w	8005382 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d117      	bne.n	8005266 <UART_Receive_IT+0x50>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d113      	bne.n	8005266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005254:	b29a      	uxth	r2, r3
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	1c9a      	adds	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28
 8005264:	e026      	b.n	80052b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d007      	beq.n	800528a <UART_Receive_IT+0x74>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <UART_Receive_IT+0x82>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e008      	b.n	80052aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29b      	uxth	r3, r3
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4619      	mov	r1, r3
 80052c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d15a      	bne.n	800537e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0220 	bic.w	r2, r2, #32
 80052d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0201 	bic.w	r2, r2, #1
 80052f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d135      	bne.n	8005374 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	613b      	str	r3, [r7, #16]
   return(result);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	623a      	str	r2, [r7, #32]
 8005330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	61bb      	str	r3, [r7, #24]
   return(result);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d10a      	bne.n	8005366 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fe2d 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
 8005372:	e002      	b.n	800537a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fc fa73 	bl	8001860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e002      	b.n	8005384 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e000      	b.n	8005384 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	3730      	adds	r7, #48	; 0x30
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	b09f      	sub	sp, #124	; 0x7c
 8005392:	af00      	add	r7, sp, #0
 8005394:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	68d9      	ldr	r1, [r3, #12]
 80053a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	ea40 0301 	orr.w	r3, r0, r1
 80053ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	431a      	orrs	r2, r3
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053d0:	f021 010c 	bic.w	r1, r1, #12
 80053d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053da:	430b      	orrs	r3, r1
 80053dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ea:	6999      	ldr	r1, [r3, #24]
 80053ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	ea40 0301 	orr.w	r3, r0, r1
 80053f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4bc5      	ldr	r3, [pc, #788]	; (8005710 <UART_SetConfig+0x384>)
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d004      	beq.n	800540a <UART_SetConfig+0x7e>
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4bc3      	ldr	r3, [pc, #780]	; (8005714 <UART_SetConfig+0x388>)
 8005406:	429a      	cmp	r2, r3
 8005408:	d103      	bne.n	8005412 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800540a:	f7fe f963 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 800540e:	6778      	str	r0, [r7, #116]	; 0x74
 8005410:	e002      	b.n	8005418 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005412:	f7fe f94b 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8005416:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	f040 80b6 	bne.w	8005590 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005426:	461c      	mov	r4, r3
 8005428:	f04f 0500 	mov.w	r5, #0
 800542c:	4622      	mov	r2, r4
 800542e:	462b      	mov	r3, r5
 8005430:	1891      	adds	r1, r2, r2
 8005432:	6439      	str	r1, [r7, #64]	; 0x40
 8005434:	415b      	adcs	r3, r3
 8005436:	647b      	str	r3, [r7, #68]	; 0x44
 8005438:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800543c:	1912      	adds	r2, r2, r4
 800543e:	eb45 0303 	adc.w	r3, r5, r3
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	00d9      	lsls	r1, r3, #3
 800544c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005450:	00d0      	lsls	r0, r2, #3
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	1911      	adds	r1, r2, r4
 8005458:	6639      	str	r1, [r7, #96]	; 0x60
 800545a:	416b      	adcs	r3, r5
 800545c:	667b      	str	r3, [r7, #100]	; 0x64
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	1891      	adds	r1, r2, r2
 800546a:	63b9      	str	r1, [r7, #56]	; 0x38
 800546c:	415b      	adcs	r3, r3
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005474:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005478:	f7fb fc0e 	bl	8000c98 <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4ba5      	ldr	r3, [pc, #660]	; (8005718 <UART_SetConfig+0x38c>)
 8005482:	fba3 2302 	umull	r2, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	011e      	lsls	r6, r3, #4
 800548a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548c:	461c      	mov	r4, r3
 800548e:	f04f 0500 	mov.w	r5, #0
 8005492:	4622      	mov	r2, r4
 8005494:	462b      	mov	r3, r5
 8005496:	1891      	adds	r1, r2, r2
 8005498:	6339      	str	r1, [r7, #48]	; 0x30
 800549a:	415b      	adcs	r3, r3
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
 800549e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054a2:	1912      	adds	r2, r2, r4
 80054a4:	eb45 0303 	adc.w	r3, r5, r3
 80054a8:	f04f 0000 	mov.w	r0, #0
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	00d9      	lsls	r1, r3, #3
 80054b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b6:	00d0      	lsls	r0, r2, #3
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	1911      	adds	r1, r2, r4
 80054be:	65b9      	str	r1, [r7, #88]	; 0x58
 80054c0:	416b      	adcs	r3, r5
 80054c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	461a      	mov	r2, r3
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	1891      	adds	r1, r2, r2
 80054d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80054d2:	415b      	adcs	r3, r3
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054de:	f7fb fbdb 	bl	8000c98 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4b8c      	ldr	r3, [pc, #560]	; (8005718 <UART_SetConfig+0x38c>)
 80054e8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	2164      	movs	r1, #100	; 0x64
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	3332      	adds	r3, #50	; 0x32
 80054fa:	4a87      	ldr	r2, [pc, #540]	; (8005718 <UART_SetConfig+0x38c>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005508:	441e      	add	r6, r3
 800550a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550c:	4618      	mov	r0, r3
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	1894      	adds	r4, r2, r2
 8005518:	623c      	str	r4, [r7, #32]
 800551a:	415b      	adcs	r3, r3
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005522:	1812      	adds	r2, r2, r0
 8005524:	eb41 0303 	adc.w	r3, r1, r3
 8005528:	f04f 0400 	mov.w	r4, #0
 800552c:	f04f 0500 	mov.w	r5, #0
 8005530:	00dd      	lsls	r5, r3, #3
 8005532:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005536:	00d4      	lsls	r4, r2, #3
 8005538:	4622      	mov	r2, r4
 800553a:	462b      	mov	r3, r5
 800553c:	1814      	adds	r4, r2, r0
 800553e:	653c      	str	r4, [r7, #80]	; 0x50
 8005540:	414b      	adcs	r3, r1
 8005542:	657b      	str	r3, [r7, #84]	; 0x54
 8005544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	461a      	mov	r2, r3
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	1891      	adds	r1, r2, r2
 8005550:	61b9      	str	r1, [r7, #24]
 8005552:	415b      	adcs	r3, r3
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800555a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800555e:	f7fb fb9b 	bl	8000c98 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <UART_SetConfig+0x38c>)
 8005568:	fba3 1302 	umull	r1, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	2164      	movs	r1, #100	; 0x64
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	3332      	adds	r3, #50	; 0x32
 800557a:	4a67      	ldr	r2, [pc, #412]	; (8005718 <UART_SetConfig+0x38c>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	f003 0207 	and.w	r2, r3, #7
 8005586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4432      	add	r2, r6
 800558c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800558e:	e0b9      	b.n	8005704 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005592:	461c      	mov	r4, r3
 8005594:	f04f 0500 	mov.w	r5, #0
 8005598:	4622      	mov	r2, r4
 800559a:	462b      	mov	r3, r5
 800559c:	1891      	adds	r1, r2, r2
 800559e:	6139      	str	r1, [r7, #16]
 80055a0:	415b      	adcs	r3, r3
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055a8:	1912      	adds	r2, r2, r4
 80055aa:	eb45 0303 	adc.w	r3, r5, r3
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	00d9      	lsls	r1, r3, #3
 80055b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055bc:	00d0      	lsls	r0, r2, #3
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	eb12 0804 	adds.w	r8, r2, r4
 80055c6:	eb43 0905 	adc.w	r9, r3, r5
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	008b      	lsls	r3, r1, #2
 80055de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055e2:	0082      	lsls	r2, r0, #2
 80055e4:	4640      	mov	r0, r8
 80055e6:	4649      	mov	r1, r9
 80055e8:	f7fb fb56 	bl	8000c98 <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <UART_SetConfig+0x38c>)
 80055f2:	fba3 2302 	umull	r2, r3, r3, r2
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	011e      	lsls	r6, r3, #4
 80055fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fc:	4618      	mov	r0, r3
 80055fe:	f04f 0100 	mov.w	r1, #0
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	1894      	adds	r4, r2, r2
 8005608:	60bc      	str	r4, [r7, #8]
 800560a:	415b      	adcs	r3, r3
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005612:	1812      	adds	r2, r2, r0
 8005614:	eb41 0303 	adc.w	r3, r1, r3
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	f04f 0500 	mov.w	r5, #0
 8005620:	00dd      	lsls	r5, r3, #3
 8005622:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005626:	00d4      	lsls	r4, r2, #3
 8005628:	4622      	mov	r2, r4
 800562a:	462b      	mov	r3, r5
 800562c:	1814      	adds	r4, r2, r0
 800562e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005630:	414b      	adcs	r3, r1
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4618      	mov	r0, r3
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	008b      	lsls	r3, r1, #2
 8005648:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800564c:	0082      	lsls	r2, r0, #2
 800564e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005652:	f7fb fb21 	bl	8000c98 <__aeabi_uldivmod>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4b2f      	ldr	r3, [pc, #188]	; (8005718 <UART_SetConfig+0x38c>)
 800565c:	fba3 1302 	umull	r1, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	2164      	movs	r1, #100	; 0x64
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	3332      	adds	r3, #50	; 0x32
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <UART_SetConfig+0x38c>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800567a:	441e      	add	r6, r3
 800567c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800567e:	4618      	mov	r0, r3
 8005680:	f04f 0100 	mov.w	r1, #0
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	1894      	adds	r4, r2, r2
 800568a:	603c      	str	r4, [r7, #0]
 800568c:	415b      	adcs	r3, r3
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005694:	1812      	adds	r2, r2, r0
 8005696:	eb41 0303 	adc.w	r3, r1, r3
 800569a:	f04f 0400 	mov.w	r4, #0
 800569e:	f04f 0500 	mov.w	r5, #0
 80056a2:	00dd      	lsls	r5, r3, #3
 80056a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056a8:	00d4      	lsls	r4, r2, #3
 80056aa:	4622      	mov	r2, r4
 80056ac:	462b      	mov	r3, r5
 80056ae:	eb12 0a00 	adds.w	sl, r2, r0
 80056b2:	eb43 0b01 	adc.w	fp, r3, r1
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f04f 0100 	mov.w	r1, #0
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	008b      	lsls	r3, r1, #2
 80056ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056ce:	0082      	lsls	r2, r0, #2
 80056d0:	4650      	mov	r0, sl
 80056d2:	4659      	mov	r1, fp
 80056d4:	f7fb fae0 	bl	8000c98 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <UART_SetConfig+0x38c>)
 80056de:	fba3 1302 	umull	r1, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2164      	movs	r1, #100	; 0x64
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	3332      	adds	r3, #50	; 0x32
 80056f0:	4a09      	ldr	r2, [pc, #36]	; (8005718 <UART_SetConfig+0x38c>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4432      	add	r2, r6
 8005702:	609a      	str	r2, [r3, #8]
}
 8005704:	bf00      	nop
 8005706:	377c      	adds	r7, #124	; 0x7c
 8005708:	46bd      	mov	sp, r7
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	bf00      	nop
 8005710:	40011000 	.word	0x40011000
 8005714:	40011400 	.word	0x40011400
 8005718:	51eb851f 	.word	0x51eb851f

0800571c <__errno>:
 800571c:	4b01      	ldr	r3, [pc, #4]	; (8005724 <__errno+0x8>)
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	2000000c 	.word	0x2000000c

08005728 <__libc_init_array>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	4d0d      	ldr	r5, [pc, #52]	; (8005760 <__libc_init_array+0x38>)
 800572c:	4c0d      	ldr	r4, [pc, #52]	; (8005764 <__libc_init_array+0x3c>)
 800572e:	1b64      	subs	r4, r4, r5
 8005730:	10a4      	asrs	r4, r4, #2
 8005732:	2600      	movs	r6, #0
 8005734:	42a6      	cmp	r6, r4
 8005736:	d109      	bne.n	800574c <__libc_init_array+0x24>
 8005738:	4d0b      	ldr	r5, [pc, #44]	; (8005768 <__libc_init_array+0x40>)
 800573a:	4c0c      	ldr	r4, [pc, #48]	; (800576c <__libc_init_array+0x44>)
 800573c:	f002 feb6 	bl	80084ac <_init>
 8005740:	1b64      	subs	r4, r4, r5
 8005742:	10a4      	asrs	r4, r4, #2
 8005744:	2600      	movs	r6, #0
 8005746:	42a6      	cmp	r6, r4
 8005748:	d105      	bne.n	8005756 <__libc_init_array+0x2e>
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005750:	4798      	blx	r3
 8005752:	3601      	adds	r6, #1
 8005754:	e7ee      	b.n	8005734 <__libc_init_array+0xc>
 8005756:	f855 3b04 	ldr.w	r3, [r5], #4
 800575a:	4798      	blx	r3
 800575c:	3601      	adds	r6, #1
 800575e:	e7f2      	b.n	8005746 <__libc_init_array+0x1e>
 8005760:	080088ec 	.word	0x080088ec
 8005764:	080088ec 	.word	0x080088ec
 8005768:	080088ec 	.word	0x080088ec
 800576c:	080088f0 	.word	0x080088f0

08005770 <memset>:
 8005770:	4402      	add	r2, r0
 8005772:	4603      	mov	r3, r0
 8005774:	4293      	cmp	r3, r2
 8005776:	d100      	bne.n	800577a <memset+0xa>
 8005778:	4770      	bx	lr
 800577a:	f803 1b01 	strb.w	r1, [r3], #1
 800577e:	e7f9      	b.n	8005774 <memset+0x4>

08005780 <__cvt>:
 8005780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	ec55 4b10 	vmov	r4, r5, d0
 8005788:	2d00      	cmp	r5, #0
 800578a:	460e      	mov	r6, r1
 800578c:	4619      	mov	r1, r3
 800578e:	462b      	mov	r3, r5
 8005790:	bfbb      	ittet	lt
 8005792:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005796:	461d      	movlt	r5, r3
 8005798:	2300      	movge	r3, #0
 800579a:	232d      	movlt	r3, #45	; 0x2d
 800579c:	700b      	strb	r3, [r1, #0]
 800579e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057a4:	4691      	mov	r9, r2
 80057a6:	f023 0820 	bic.w	r8, r3, #32
 80057aa:	bfbc      	itt	lt
 80057ac:	4622      	movlt	r2, r4
 80057ae:	4614      	movlt	r4, r2
 80057b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057b4:	d005      	beq.n	80057c2 <__cvt+0x42>
 80057b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057ba:	d100      	bne.n	80057be <__cvt+0x3e>
 80057bc:	3601      	adds	r6, #1
 80057be:	2102      	movs	r1, #2
 80057c0:	e000      	b.n	80057c4 <__cvt+0x44>
 80057c2:	2103      	movs	r1, #3
 80057c4:	ab03      	add	r3, sp, #12
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	ab02      	add	r3, sp, #8
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	ec45 4b10 	vmov	d0, r4, r5
 80057d0:	4653      	mov	r3, sl
 80057d2:	4632      	mov	r2, r6
 80057d4:	f000 fcec 	bl	80061b0 <_dtoa_r>
 80057d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057dc:	4607      	mov	r7, r0
 80057de:	d102      	bne.n	80057e6 <__cvt+0x66>
 80057e0:	f019 0f01 	tst.w	r9, #1
 80057e4:	d022      	beq.n	800582c <__cvt+0xac>
 80057e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057ea:	eb07 0906 	add.w	r9, r7, r6
 80057ee:	d110      	bne.n	8005812 <__cvt+0x92>
 80057f0:	783b      	ldrb	r3, [r7, #0]
 80057f2:	2b30      	cmp	r3, #48	; 0x30
 80057f4:	d10a      	bne.n	800580c <__cvt+0x8c>
 80057f6:	2200      	movs	r2, #0
 80057f8:	2300      	movs	r3, #0
 80057fa:	4620      	mov	r0, r4
 80057fc:	4629      	mov	r1, r5
 80057fe:	f7fb f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005802:	b918      	cbnz	r0, 800580c <__cvt+0x8c>
 8005804:	f1c6 0601 	rsb	r6, r6, #1
 8005808:	f8ca 6000 	str.w	r6, [sl]
 800580c:	f8da 3000 	ldr.w	r3, [sl]
 8005810:	4499      	add	r9, r3
 8005812:	2200      	movs	r2, #0
 8005814:	2300      	movs	r3, #0
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fb f95d 	bl	8000ad8 <__aeabi_dcmpeq>
 800581e:	b108      	cbz	r0, 8005824 <__cvt+0xa4>
 8005820:	f8cd 900c 	str.w	r9, [sp, #12]
 8005824:	2230      	movs	r2, #48	; 0x30
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	454b      	cmp	r3, r9
 800582a:	d307      	bcc.n	800583c <__cvt+0xbc>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005830:	1bdb      	subs	r3, r3, r7
 8005832:	4638      	mov	r0, r7
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	b004      	add	sp, #16
 8005838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583c:	1c59      	adds	r1, r3, #1
 800583e:	9103      	str	r1, [sp, #12]
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	e7f0      	b.n	8005826 <__cvt+0xa6>

08005844 <__exponent>:
 8005844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005846:	4603      	mov	r3, r0
 8005848:	2900      	cmp	r1, #0
 800584a:	bfb8      	it	lt
 800584c:	4249      	neglt	r1, r1
 800584e:	f803 2b02 	strb.w	r2, [r3], #2
 8005852:	bfb4      	ite	lt
 8005854:	222d      	movlt	r2, #45	; 0x2d
 8005856:	222b      	movge	r2, #43	; 0x2b
 8005858:	2909      	cmp	r1, #9
 800585a:	7042      	strb	r2, [r0, #1]
 800585c:	dd2a      	ble.n	80058b4 <__exponent+0x70>
 800585e:	f10d 0407 	add.w	r4, sp, #7
 8005862:	46a4      	mov	ip, r4
 8005864:	270a      	movs	r7, #10
 8005866:	46a6      	mov	lr, r4
 8005868:	460a      	mov	r2, r1
 800586a:	fb91 f6f7 	sdiv	r6, r1, r7
 800586e:	fb07 1516 	mls	r5, r7, r6, r1
 8005872:	3530      	adds	r5, #48	; 0x30
 8005874:	2a63      	cmp	r2, #99	; 0x63
 8005876:	f104 34ff 	add.w	r4, r4, #4294967295
 800587a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800587e:	4631      	mov	r1, r6
 8005880:	dcf1      	bgt.n	8005866 <__exponent+0x22>
 8005882:	3130      	adds	r1, #48	; 0x30
 8005884:	f1ae 0502 	sub.w	r5, lr, #2
 8005888:	f804 1c01 	strb.w	r1, [r4, #-1]
 800588c:	1c44      	adds	r4, r0, #1
 800588e:	4629      	mov	r1, r5
 8005890:	4561      	cmp	r1, ip
 8005892:	d30a      	bcc.n	80058aa <__exponent+0x66>
 8005894:	f10d 0209 	add.w	r2, sp, #9
 8005898:	eba2 020e 	sub.w	r2, r2, lr
 800589c:	4565      	cmp	r5, ip
 800589e:	bf88      	it	hi
 80058a0:	2200      	movhi	r2, #0
 80058a2:	4413      	add	r3, r2
 80058a4:	1a18      	subs	r0, r3, r0
 80058a6:	b003      	add	sp, #12
 80058a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058b2:	e7ed      	b.n	8005890 <__exponent+0x4c>
 80058b4:	2330      	movs	r3, #48	; 0x30
 80058b6:	3130      	adds	r1, #48	; 0x30
 80058b8:	7083      	strb	r3, [r0, #2]
 80058ba:	70c1      	strb	r1, [r0, #3]
 80058bc:	1d03      	adds	r3, r0, #4
 80058be:	e7f1      	b.n	80058a4 <__exponent+0x60>

080058c0 <_printf_float>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	ed2d 8b02 	vpush	{d8}
 80058c8:	b08d      	sub	sp, #52	; 0x34
 80058ca:	460c      	mov	r4, r1
 80058cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058d0:	4616      	mov	r6, r2
 80058d2:	461f      	mov	r7, r3
 80058d4:	4605      	mov	r5, r0
 80058d6:	f001 fa57 	bl	8006d88 <_localeconv_r>
 80058da:	f8d0 a000 	ldr.w	sl, [r0]
 80058de:	4650      	mov	r0, sl
 80058e0:	f7fa fc7e 	bl	80001e0 <strlen>
 80058e4:	2300      	movs	r3, #0
 80058e6:	930a      	str	r3, [sp, #40]	; 0x28
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	9305      	str	r3, [sp, #20]
 80058ec:	f8d8 3000 	ldr.w	r3, [r8]
 80058f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058f4:	3307      	adds	r3, #7
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	f103 0208 	add.w	r2, r3, #8
 80058fe:	f8c8 2000 	str.w	r2, [r8]
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800590a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800590e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005912:	9307      	str	r3, [sp, #28]
 8005914:	f8cd 8018 	str.w	r8, [sp, #24]
 8005918:	ee08 0a10 	vmov	s16, r0
 800591c:	4b9f      	ldr	r3, [pc, #636]	; (8005b9c <_printf_float+0x2dc>)
 800591e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	f7fb f909 	bl	8000b3c <__aeabi_dcmpun>
 800592a:	bb88      	cbnz	r0, 8005990 <_printf_float+0xd0>
 800592c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005930:	4b9a      	ldr	r3, [pc, #616]	; (8005b9c <_printf_float+0x2dc>)
 8005932:	f04f 32ff 	mov.w	r2, #4294967295
 8005936:	f7fb f8e3 	bl	8000b00 <__aeabi_dcmple>
 800593a:	bb48      	cbnz	r0, 8005990 <_printf_float+0xd0>
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	4640      	mov	r0, r8
 8005942:	4649      	mov	r1, r9
 8005944:	f7fb f8d2 	bl	8000aec <__aeabi_dcmplt>
 8005948:	b110      	cbz	r0, 8005950 <_printf_float+0x90>
 800594a:	232d      	movs	r3, #45	; 0x2d
 800594c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005950:	4b93      	ldr	r3, [pc, #588]	; (8005ba0 <_printf_float+0x2e0>)
 8005952:	4894      	ldr	r0, [pc, #592]	; (8005ba4 <_printf_float+0x2e4>)
 8005954:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005958:	bf94      	ite	ls
 800595a:	4698      	movls	r8, r3
 800595c:	4680      	movhi	r8, r0
 800595e:	2303      	movs	r3, #3
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	9b05      	ldr	r3, [sp, #20]
 8005964:	f023 0204 	bic.w	r2, r3, #4
 8005968:	6022      	str	r2, [r4, #0]
 800596a:	f04f 0900 	mov.w	r9, #0
 800596e:	9700      	str	r7, [sp, #0]
 8005970:	4633      	mov	r3, r6
 8005972:	aa0b      	add	r2, sp, #44	; 0x2c
 8005974:	4621      	mov	r1, r4
 8005976:	4628      	mov	r0, r5
 8005978:	f000 f9d8 	bl	8005d2c <_printf_common>
 800597c:	3001      	adds	r0, #1
 800597e:	f040 8090 	bne.w	8005aa2 <_printf_float+0x1e2>
 8005982:	f04f 30ff 	mov.w	r0, #4294967295
 8005986:	b00d      	add	sp, #52	; 0x34
 8005988:	ecbd 8b02 	vpop	{d8}
 800598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	4640      	mov	r0, r8
 8005996:	4649      	mov	r1, r9
 8005998:	f7fb f8d0 	bl	8000b3c <__aeabi_dcmpun>
 800599c:	b140      	cbz	r0, 80059b0 <_printf_float+0xf0>
 800599e:	464b      	mov	r3, r9
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bfbc      	itt	lt
 80059a4:	232d      	movlt	r3, #45	; 0x2d
 80059a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059aa:	487f      	ldr	r0, [pc, #508]	; (8005ba8 <_printf_float+0x2e8>)
 80059ac:	4b7f      	ldr	r3, [pc, #508]	; (8005bac <_printf_float+0x2ec>)
 80059ae:	e7d1      	b.n	8005954 <_printf_float+0x94>
 80059b0:	6863      	ldr	r3, [r4, #4]
 80059b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059b6:	9206      	str	r2, [sp, #24]
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	d13f      	bne.n	8005a3c <_printf_float+0x17c>
 80059bc:	2306      	movs	r3, #6
 80059be:	6063      	str	r3, [r4, #4]
 80059c0:	9b05      	ldr	r3, [sp, #20]
 80059c2:	6861      	ldr	r1, [r4, #4]
 80059c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059c8:	2300      	movs	r3, #0
 80059ca:	9303      	str	r3, [sp, #12]
 80059cc:	ab0a      	add	r3, sp, #40	; 0x28
 80059ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059d2:	ab09      	add	r3, sp, #36	; 0x24
 80059d4:	ec49 8b10 	vmov	d0, r8, r9
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	6022      	str	r2, [r4, #0]
 80059dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059e0:	4628      	mov	r0, r5
 80059e2:	f7ff fecd 	bl	8005780 <__cvt>
 80059e6:	9b06      	ldr	r3, [sp, #24]
 80059e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059ea:	2b47      	cmp	r3, #71	; 0x47
 80059ec:	4680      	mov	r8, r0
 80059ee:	d108      	bne.n	8005a02 <_printf_float+0x142>
 80059f0:	1cc8      	adds	r0, r1, #3
 80059f2:	db02      	blt.n	80059fa <_printf_float+0x13a>
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	4299      	cmp	r1, r3
 80059f8:	dd41      	ble.n	8005a7e <_printf_float+0x1be>
 80059fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80059fe:	fa5f fb8b 	uxtb.w	fp, fp
 8005a02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a06:	d820      	bhi.n	8005a4a <_printf_float+0x18a>
 8005a08:	3901      	subs	r1, #1
 8005a0a:	465a      	mov	r2, fp
 8005a0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a10:	9109      	str	r1, [sp, #36]	; 0x24
 8005a12:	f7ff ff17 	bl	8005844 <__exponent>
 8005a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a18:	1813      	adds	r3, r2, r0
 8005a1a:	2a01      	cmp	r2, #1
 8005a1c:	4681      	mov	r9, r0
 8005a1e:	6123      	str	r3, [r4, #16]
 8005a20:	dc02      	bgt.n	8005a28 <_printf_float+0x168>
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	07d2      	lsls	r2, r2, #31
 8005a26:	d501      	bpl.n	8005a2c <_printf_float+0x16c>
 8005a28:	3301      	adds	r3, #1
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d09c      	beq.n	800596e <_printf_float+0xae>
 8005a34:	232d      	movs	r3, #45	; 0x2d
 8005a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a3a:	e798      	b.n	800596e <_printf_float+0xae>
 8005a3c:	9a06      	ldr	r2, [sp, #24]
 8005a3e:	2a47      	cmp	r2, #71	; 0x47
 8005a40:	d1be      	bne.n	80059c0 <_printf_float+0x100>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1bc      	bne.n	80059c0 <_printf_float+0x100>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e7b9      	b.n	80059be <_printf_float+0xfe>
 8005a4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a4e:	d118      	bne.n	8005a82 <_printf_float+0x1c2>
 8005a50:	2900      	cmp	r1, #0
 8005a52:	6863      	ldr	r3, [r4, #4]
 8005a54:	dd0b      	ble.n	8005a6e <_printf_float+0x1ae>
 8005a56:	6121      	str	r1, [r4, #16]
 8005a58:	b913      	cbnz	r3, 8005a60 <_printf_float+0x1a0>
 8005a5a:	6822      	ldr	r2, [r4, #0]
 8005a5c:	07d0      	lsls	r0, r2, #31
 8005a5e:	d502      	bpl.n	8005a66 <_printf_float+0x1a6>
 8005a60:	3301      	adds	r3, #1
 8005a62:	440b      	add	r3, r1
 8005a64:	6123      	str	r3, [r4, #16]
 8005a66:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a68:	f04f 0900 	mov.w	r9, #0
 8005a6c:	e7de      	b.n	8005a2c <_printf_float+0x16c>
 8005a6e:	b913      	cbnz	r3, 8005a76 <_printf_float+0x1b6>
 8005a70:	6822      	ldr	r2, [r4, #0]
 8005a72:	07d2      	lsls	r2, r2, #31
 8005a74:	d501      	bpl.n	8005a7a <_printf_float+0x1ba>
 8005a76:	3302      	adds	r3, #2
 8005a78:	e7f4      	b.n	8005a64 <_printf_float+0x1a4>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e7f2      	b.n	8005a64 <_printf_float+0x1a4>
 8005a7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a84:	4299      	cmp	r1, r3
 8005a86:	db05      	blt.n	8005a94 <_printf_float+0x1d4>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	6121      	str	r1, [r4, #16]
 8005a8c:	07d8      	lsls	r0, r3, #31
 8005a8e:	d5ea      	bpl.n	8005a66 <_printf_float+0x1a6>
 8005a90:	1c4b      	adds	r3, r1, #1
 8005a92:	e7e7      	b.n	8005a64 <_printf_float+0x1a4>
 8005a94:	2900      	cmp	r1, #0
 8005a96:	bfd4      	ite	le
 8005a98:	f1c1 0202 	rsble	r2, r1, #2
 8005a9c:	2201      	movgt	r2, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	e7e0      	b.n	8005a64 <_printf_float+0x1a4>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	055a      	lsls	r2, r3, #21
 8005aa6:	d407      	bmi.n	8005ab8 <_printf_float+0x1f8>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	4642      	mov	r2, r8
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d12c      	bne.n	8005b10 <_printf_float+0x250>
 8005ab6:	e764      	b.n	8005982 <_printf_float+0xc2>
 8005ab8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005abc:	f240 80e0 	bls.w	8005c80 <_printf_float+0x3c0>
 8005ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f7fb f806 	bl	8000ad8 <__aeabi_dcmpeq>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d034      	beq.n	8005b3a <_printf_float+0x27a>
 8005ad0:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <_printf_float+0x2f0>)
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	f43f af51 	beq.w	8005982 <_printf_float+0xc2>
 8005ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	db02      	blt.n	8005aee <_printf_float+0x22e>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	07d8      	lsls	r0, r3, #31
 8005aec:	d510      	bpl.n	8005b10 <_printf_float+0x250>
 8005aee:	ee18 3a10 	vmov	r3, s16
 8005af2:	4652      	mov	r2, sl
 8005af4:	4631      	mov	r1, r6
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b8      	blx	r7
 8005afa:	3001      	adds	r0, #1
 8005afc:	f43f af41 	beq.w	8005982 <_printf_float+0xc2>
 8005b00:	f04f 0800 	mov.w	r8, #0
 8005b04:	f104 091a 	add.w	r9, r4, #26
 8005b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	4543      	cmp	r3, r8
 8005b0e:	dc09      	bgt.n	8005b24 <_printf_float+0x264>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	079b      	lsls	r3, r3, #30
 8005b14:	f100 8105 	bmi.w	8005d22 <_printf_float+0x462>
 8005b18:	68e0      	ldr	r0, [r4, #12]
 8005b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b1c:	4298      	cmp	r0, r3
 8005b1e:	bfb8      	it	lt
 8005b20:	4618      	movlt	r0, r3
 8005b22:	e730      	b.n	8005986 <_printf_float+0xc6>
 8005b24:	2301      	movs	r3, #1
 8005b26:	464a      	mov	r2, r9
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f43f af27 	beq.w	8005982 <_printf_float+0xc2>
 8005b34:	f108 0801 	add.w	r8, r8, #1
 8005b38:	e7e6      	b.n	8005b08 <_printf_float+0x248>
 8005b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	dc39      	bgt.n	8005bb4 <_printf_float+0x2f4>
 8005b40:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <_printf_float+0x2f0>)
 8005b42:	2301      	movs	r3, #1
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f43f af19 	beq.w	8005982 <_printf_float+0xc2>
 8005b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b54:	4313      	orrs	r3, r2
 8005b56:	d102      	bne.n	8005b5e <_printf_float+0x29e>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	07d9      	lsls	r1, r3, #31
 8005b5c:	d5d8      	bpl.n	8005b10 <_printf_float+0x250>
 8005b5e:	ee18 3a10 	vmov	r3, s16
 8005b62:	4652      	mov	r2, sl
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f af09 	beq.w	8005982 <_printf_float+0xc2>
 8005b70:	f04f 0900 	mov.w	r9, #0
 8005b74:	f104 0a1a 	add.w	sl, r4, #26
 8005b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7a:	425b      	negs	r3, r3
 8005b7c:	454b      	cmp	r3, r9
 8005b7e:	dc01      	bgt.n	8005b84 <_printf_float+0x2c4>
 8005b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b82:	e792      	b.n	8005aaa <_printf_float+0x1ea>
 8005b84:	2301      	movs	r3, #1
 8005b86:	4652      	mov	r2, sl
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f aef7 	beq.w	8005982 <_printf_float+0xc2>
 8005b94:	f109 0901 	add.w	r9, r9, #1
 8005b98:	e7ee      	b.n	8005b78 <_printf_float+0x2b8>
 8005b9a:	bf00      	nop
 8005b9c:	7fefffff 	.word	0x7fefffff
 8005ba0:	08008508 	.word	0x08008508
 8005ba4:	0800850c 	.word	0x0800850c
 8005ba8:	08008514 	.word	0x08008514
 8005bac:	08008510 	.word	0x08008510
 8005bb0:	08008518 	.word	0x08008518
 8005bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	bfa8      	it	ge
 8005bbc:	461a      	movge	r2, r3
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	4691      	mov	r9, r2
 8005bc2:	dc37      	bgt.n	8005c34 <_printf_float+0x374>
 8005bc4:	f04f 0b00 	mov.w	fp, #0
 8005bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bcc:	f104 021a 	add.w	r2, r4, #26
 8005bd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bd2:	9305      	str	r3, [sp, #20]
 8005bd4:	eba3 0309 	sub.w	r3, r3, r9
 8005bd8:	455b      	cmp	r3, fp
 8005bda:	dc33      	bgt.n	8005c44 <_printf_float+0x384>
 8005bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005be0:	429a      	cmp	r2, r3
 8005be2:	db3b      	blt.n	8005c5c <_printf_float+0x39c>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	07da      	lsls	r2, r3, #31
 8005be8:	d438      	bmi.n	8005c5c <_printf_float+0x39c>
 8005bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bec:	9b05      	ldr	r3, [sp, #20]
 8005bee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	eba2 0901 	sub.w	r9, r2, r1
 8005bf6:	4599      	cmp	r9, r3
 8005bf8:	bfa8      	it	ge
 8005bfa:	4699      	movge	r9, r3
 8005bfc:	f1b9 0f00 	cmp.w	r9, #0
 8005c00:	dc35      	bgt.n	8005c6e <_printf_float+0x3ae>
 8005c02:	f04f 0800 	mov.w	r8, #0
 8005c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c0a:	f104 0a1a 	add.w	sl, r4, #26
 8005c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c12:	1a9b      	subs	r3, r3, r2
 8005c14:	eba3 0309 	sub.w	r3, r3, r9
 8005c18:	4543      	cmp	r3, r8
 8005c1a:	f77f af79 	ble.w	8005b10 <_printf_float+0x250>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4652      	mov	r2, sl
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f aeaa 	beq.w	8005982 <_printf_float+0xc2>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	e7ec      	b.n	8005c0e <_printf_float+0x34e>
 8005c34:	4613      	mov	r3, r2
 8005c36:	4631      	mov	r1, r6
 8005c38:	4642      	mov	r2, r8
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d1c0      	bne.n	8005bc4 <_printf_float+0x304>
 8005c42:	e69e      	b.n	8005982 <_printf_float+0xc2>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	9205      	str	r2, [sp, #20]
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f43f ae97 	beq.w	8005982 <_printf_float+0xc2>
 8005c54:	9a05      	ldr	r2, [sp, #20]
 8005c56:	f10b 0b01 	add.w	fp, fp, #1
 8005c5a:	e7b9      	b.n	8005bd0 <_printf_float+0x310>
 8005c5c:	ee18 3a10 	vmov	r3, s16
 8005c60:	4652      	mov	r2, sl
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d1be      	bne.n	8005bea <_printf_float+0x32a>
 8005c6c:	e689      	b.n	8005982 <_printf_float+0xc2>
 8005c6e:	9a05      	ldr	r2, [sp, #20]
 8005c70:	464b      	mov	r3, r9
 8005c72:	4442      	add	r2, r8
 8005c74:	4631      	mov	r1, r6
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d1c1      	bne.n	8005c02 <_printf_float+0x342>
 8005c7e:	e680      	b.n	8005982 <_printf_float+0xc2>
 8005c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c82:	2a01      	cmp	r2, #1
 8005c84:	dc01      	bgt.n	8005c8a <_printf_float+0x3ca>
 8005c86:	07db      	lsls	r3, r3, #31
 8005c88:	d538      	bpl.n	8005cfc <_printf_float+0x43c>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4642      	mov	r2, r8
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	f43f ae74 	beq.w	8005982 <_printf_float+0xc2>
 8005c9a:	ee18 3a10 	vmov	r3, s16
 8005c9e:	4652      	mov	r2, sl
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f43f ae6b 	beq.w	8005982 <_printf_float+0xc2>
 8005cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f7fa ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cb8:	b9d8      	cbnz	r0, 8005cf2 <_printf_float+0x432>
 8005cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cbc:	f108 0201 	add.w	r2, r8, #1
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d10e      	bne.n	8005cea <_printf_float+0x42a>
 8005ccc:	e659      	b.n	8005982 <_printf_float+0xc2>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f43f ae52 	beq.w	8005982 <_printf_float+0xc2>
 8005cde:	f108 0801 	add.w	r8, r8, #1
 8005ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	4543      	cmp	r3, r8
 8005ce8:	dcf1      	bgt.n	8005cce <_printf_float+0x40e>
 8005cea:	464b      	mov	r3, r9
 8005cec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cf0:	e6dc      	b.n	8005aac <_printf_float+0x1ec>
 8005cf2:	f04f 0800 	mov.w	r8, #0
 8005cf6:	f104 0a1a 	add.w	sl, r4, #26
 8005cfa:	e7f2      	b.n	8005ce2 <_printf_float+0x422>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4642      	mov	r2, r8
 8005d00:	e7df      	b.n	8005cc2 <_printf_float+0x402>
 8005d02:	2301      	movs	r3, #1
 8005d04:	464a      	mov	r2, r9
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f43f ae38 	beq.w	8005982 <_printf_float+0xc2>
 8005d12:	f108 0801 	add.w	r8, r8, #1
 8005d16:	68e3      	ldr	r3, [r4, #12]
 8005d18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d1a:	1a5b      	subs	r3, r3, r1
 8005d1c:	4543      	cmp	r3, r8
 8005d1e:	dcf0      	bgt.n	8005d02 <_printf_float+0x442>
 8005d20:	e6fa      	b.n	8005b18 <_printf_float+0x258>
 8005d22:	f04f 0800 	mov.w	r8, #0
 8005d26:	f104 0919 	add.w	r9, r4, #25
 8005d2a:	e7f4      	b.n	8005d16 <_printf_float+0x456>

08005d2c <_printf_common>:
 8005d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	4616      	mov	r6, r2
 8005d32:	4699      	mov	r9, r3
 8005d34:	688a      	ldr	r2, [r1, #8]
 8005d36:	690b      	ldr	r3, [r1, #16]
 8005d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	bfb8      	it	lt
 8005d40:	4613      	movlt	r3, r2
 8005d42:	6033      	str	r3, [r6, #0]
 8005d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d48:	4607      	mov	r7, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	b10a      	cbz	r2, 8005d52 <_printf_common+0x26>
 8005d4e:	3301      	adds	r3, #1
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	0699      	lsls	r1, r3, #26
 8005d56:	bf42      	ittt	mi
 8005d58:	6833      	ldrmi	r3, [r6, #0]
 8005d5a:	3302      	addmi	r3, #2
 8005d5c:	6033      	strmi	r3, [r6, #0]
 8005d5e:	6825      	ldr	r5, [r4, #0]
 8005d60:	f015 0506 	ands.w	r5, r5, #6
 8005d64:	d106      	bne.n	8005d74 <_printf_common+0x48>
 8005d66:	f104 0a19 	add.w	sl, r4, #25
 8005d6a:	68e3      	ldr	r3, [r4, #12]
 8005d6c:	6832      	ldr	r2, [r6, #0]
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	42ab      	cmp	r3, r5
 8005d72:	dc26      	bgt.n	8005dc2 <_printf_common+0x96>
 8005d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d78:	1e13      	subs	r3, r2, #0
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	bf18      	it	ne
 8005d7e:	2301      	movne	r3, #1
 8005d80:	0692      	lsls	r2, r2, #26
 8005d82:	d42b      	bmi.n	8005ddc <_printf_common+0xb0>
 8005d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d88:	4649      	mov	r1, r9
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	47c0      	blx	r8
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d01e      	beq.n	8005dd0 <_printf_common+0xa4>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	68e5      	ldr	r5, [r4, #12]
 8005d96:	6832      	ldr	r2, [r6, #0]
 8005d98:	f003 0306 	and.w	r3, r3, #6
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	bf08      	it	eq
 8005da0:	1aad      	subeq	r5, r5, r2
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	6922      	ldr	r2, [r4, #16]
 8005da6:	bf0c      	ite	eq
 8005da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dac:	2500      	movne	r5, #0
 8005dae:	4293      	cmp	r3, r2
 8005db0:	bfc4      	itt	gt
 8005db2:	1a9b      	subgt	r3, r3, r2
 8005db4:	18ed      	addgt	r5, r5, r3
 8005db6:	2600      	movs	r6, #0
 8005db8:	341a      	adds	r4, #26
 8005dba:	42b5      	cmp	r5, r6
 8005dbc:	d11a      	bne.n	8005df4 <_printf_common+0xc8>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e008      	b.n	8005dd4 <_printf_common+0xa8>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	4638      	mov	r0, r7
 8005dca:	47c0      	blx	r8
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d103      	bne.n	8005dd8 <_printf_common+0xac>
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd8:	3501      	adds	r5, #1
 8005dda:	e7c6      	b.n	8005d6a <_printf_common+0x3e>
 8005ddc:	18e1      	adds	r1, r4, r3
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	2030      	movs	r0, #48	; 0x30
 8005de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005de6:	4422      	add	r2, r4
 8005de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005df0:	3302      	adds	r3, #2
 8005df2:	e7c7      	b.n	8005d84 <_printf_common+0x58>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4622      	mov	r2, r4
 8005df8:	4649      	mov	r1, r9
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c0      	blx	r8
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d0e6      	beq.n	8005dd0 <_printf_common+0xa4>
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7d9      	b.n	8005dba <_printf_common+0x8e>
	...

08005e08 <_printf_i>:
 8005e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	4691      	mov	r9, r2
 8005e10:	7e27      	ldrb	r7, [r4, #24]
 8005e12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e14:	2f78      	cmp	r7, #120	; 0x78
 8005e16:	4680      	mov	r8, r0
 8005e18:	469a      	mov	sl, r3
 8005e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e1e:	d807      	bhi.n	8005e30 <_printf_i+0x28>
 8005e20:	2f62      	cmp	r7, #98	; 0x62
 8005e22:	d80a      	bhi.n	8005e3a <_printf_i+0x32>
 8005e24:	2f00      	cmp	r7, #0
 8005e26:	f000 80d8 	beq.w	8005fda <_printf_i+0x1d2>
 8005e2a:	2f58      	cmp	r7, #88	; 0x58
 8005e2c:	f000 80a3 	beq.w	8005f76 <_printf_i+0x16e>
 8005e30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e38:	e03a      	b.n	8005eb0 <_printf_i+0xa8>
 8005e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e3e:	2b15      	cmp	r3, #21
 8005e40:	d8f6      	bhi.n	8005e30 <_printf_i+0x28>
 8005e42:	a001      	add	r0, pc, #4	; (adr r0, 8005e48 <_printf_i+0x40>)
 8005e44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e48:	08005ea1 	.word	0x08005ea1
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005e31 	.word	0x08005e31
 8005e54:	08005e31 	.word	0x08005e31
 8005e58:	08005e31 	.word	0x08005e31
 8005e5c:	08005e31 	.word	0x08005e31
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	08005e31 	.word	0x08005e31
 8005e68:	08005e31 	.word	0x08005e31
 8005e6c:	08005e31 	.word	0x08005e31
 8005e70:	08005e31 	.word	0x08005e31
 8005e74:	08005fc1 	.word	0x08005fc1
 8005e78:	08005ee5 	.word	0x08005ee5
 8005e7c:	08005fa3 	.word	0x08005fa3
 8005e80:	08005e31 	.word	0x08005e31
 8005e84:	08005e31 	.word	0x08005e31
 8005e88:	08005fe3 	.word	0x08005fe3
 8005e8c:	08005e31 	.word	0x08005e31
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e31 	.word	0x08005e31
 8005e98:	08005e31 	.word	0x08005e31
 8005e9c:	08005fab 	.word	0x08005fab
 8005ea0:	680b      	ldr	r3, [r1, #0]
 8005ea2:	1d1a      	adds	r2, r3, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	600a      	str	r2, [r1, #0]
 8005ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0a3      	b.n	8005ffc <_printf_i+0x1f4>
 8005eb4:	6825      	ldr	r5, [r4, #0]
 8005eb6:	6808      	ldr	r0, [r1, #0]
 8005eb8:	062e      	lsls	r6, r5, #24
 8005eba:	f100 0304 	add.w	r3, r0, #4
 8005ebe:	d50a      	bpl.n	8005ed6 <_printf_i+0xce>
 8005ec0:	6805      	ldr	r5, [r0, #0]
 8005ec2:	600b      	str	r3, [r1, #0]
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	da03      	bge.n	8005ed0 <_printf_i+0xc8>
 8005ec8:	232d      	movs	r3, #45	; 0x2d
 8005eca:	426d      	negs	r5, r5
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	485e      	ldr	r0, [pc, #376]	; (800604c <_printf_i+0x244>)
 8005ed2:	230a      	movs	r3, #10
 8005ed4:	e019      	b.n	8005f0a <_printf_i+0x102>
 8005ed6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005eda:	6805      	ldr	r5, [r0, #0]
 8005edc:	600b      	str	r3, [r1, #0]
 8005ede:	bf18      	it	ne
 8005ee0:	b22d      	sxthne	r5, r5
 8005ee2:	e7ef      	b.n	8005ec4 <_printf_i+0xbc>
 8005ee4:	680b      	ldr	r3, [r1, #0]
 8005ee6:	6825      	ldr	r5, [r4, #0]
 8005ee8:	1d18      	adds	r0, r3, #4
 8005eea:	6008      	str	r0, [r1, #0]
 8005eec:	0628      	lsls	r0, r5, #24
 8005eee:	d501      	bpl.n	8005ef4 <_printf_i+0xec>
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	e002      	b.n	8005efa <_printf_i+0xf2>
 8005ef4:	0669      	lsls	r1, r5, #25
 8005ef6:	d5fb      	bpl.n	8005ef0 <_printf_i+0xe8>
 8005ef8:	881d      	ldrh	r5, [r3, #0]
 8005efa:	4854      	ldr	r0, [pc, #336]	; (800604c <_printf_i+0x244>)
 8005efc:	2f6f      	cmp	r7, #111	; 0x6f
 8005efe:	bf0c      	ite	eq
 8005f00:	2308      	moveq	r3, #8
 8005f02:	230a      	movne	r3, #10
 8005f04:	2100      	movs	r1, #0
 8005f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f0a:	6866      	ldr	r6, [r4, #4]
 8005f0c:	60a6      	str	r6, [r4, #8]
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	bfa2      	ittt	ge
 8005f12:	6821      	ldrge	r1, [r4, #0]
 8005f14:	f021 0104 	bicge.w	r1, r1, #4
 8005f18:	6021      	strge	r1, [r4, #0]
 8005f1a:	b90d      	cbnz	r5, 8005f20 <_printf_i+0x118>
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	d04d      	beq.n	8005fbc <_printf_i+0x1b4>
 8005f20:	4616      	mov	r6, r2
 8005f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f26:	fb03 5711 	mls	r7, r3, r1, r5
 8005f2a:	5dc7      	ldrb	r7, [r0, r7]
 8005f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f30:	462f      	mov	r7, r5
 8005f32:	42bb      	cmp	r3, r7
 8005f34:	460d      	mov	r5, r1
 8005f36:	d9f4      	bls.n	8005f22 <_printf_i+0x11a>
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d10b      	bne.n	8005f54 <_printf_i+0x14c>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	07df      	lsls	r7, r3, #31
 8005f40:	d508      	bpl.n	8005f54 <_printf_i+0x14c>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	6861      	ldr	r1, [r4, #4]
 8005f46:	4299      	cmp	r1, r3
 8005f48:	bfde      	ittt	le
 8005f4a:	2330      	movle	r3, #48	; 0x30
 8005f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f54:	1b92      	subs	r2, r2, r6
 8005f56:	6122      	str	r2, [r4, #16]
 8005f58:	f8cd a000 	str.w	sl, [sp]
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	aa03      	add	r2, sp, #12
 8005f60:	4621      	mov	r1, r4
 8005f62:	4640      	mov	r0, r8
 8005f64:	f7ff fee2 	bl	8005d2c <_printf_common>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d14c      	bne.n	8006006 <_printf_i+0x1fe>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	b004      	add	sp, #16
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	4835      	ldr	r0, [pc, #212]	; (800604c <_printf_i+0x244>)
 8005f78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	680e      	ldr	r6, [r1, #0]
 8005f80:	061f      	lsls	r7, r3, #24
 8005f82:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f86:	600e      	str	r6, [r1, #0]
 8005f88:	d514      	bpl.n	8005fb4 <_printf_i+0x1ac>
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	bf44      	itt	mi
 8005f8e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f92:	6023      	strmi	r3, [r4, #0]
 8005f94:	b91d      	cbnz	r5, 8005f9e <_printf_i+0x196>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f023 0320 	bic.w	r3, r3, #32
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	e7b0      	b.n	8005f04 <_printf_i+0xfc>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f043 0320 	orr.w	r3, r3, #32
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	2378      	movs	r3, #120	; 0x78
 8005fac:	4828      	ldr	r0, [pc, #160]	; (8006050 <_printf_i+0x248>)
 8005fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fb2:	e7e3      	b.n	8005f7c <_printf_i+0x174>
 8005fb4:	065e      	lsls	r6, r3, #25
 8005fb6:	bf48      	it	mi
 8005fb8:	b2ad      	uxthmi	r5, r5
 8005fba:	e7e6      	b.n	8005f8a <_printf_i+0x182>
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	e7bb      	b.n	8005f38 <_printf_i+0x130>
 8005fc0:	680b      	ldr	r3, [r1, #0]
 8005fc2:	6826      	ldr	r6, [r4, #0]
 8005fc4:	6960      	ldr	r0, [r4, #20]
 8005fc6:	1d1d      	adds	r5, r3, #4
 8005fc8:	600d      	str	r5, [r1, #0]
 8005fca:	0635      	lsls	r5, r6, #24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	d501      	bpl.n	8005fd4 <_printf_i+0x1cc>
 8005fd0:	6018      	str	r0, [r3, #0]
 8005fd2:	e002      	b.n	8005fda <_printf_i+0x1d2>
 8005fd4:	0671      	lsls	r1, r6, #25
 8005fd6:	d5fb      	bpl.n	8005fd0 <_printf_i+0x1c8>
 8005fd8:	8018      	strh	r0, [r3, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6123      	str	r3, [r4, #16]
 8005fde:	4616      	mov	r6, r2
 8005fe0:	e7ba      	b.n	8005f58 <_printf_i+0x150>
 8005fe2:	680b      	ldr	r3, [r1, #0]
 8005fe4:	1d1a      	adds	r2, r3, #4
 8005fe6:	600a      	str	r2, [r1, #0]
 8005fe8:	681e      	ldr	r6, [r3, #0]
 8005fea:	6862      	ldr	r2, [r4, #4]
 8005fec:	2100      	movs	r1, #0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f7fa f8fe 	bl	80001f0 <memchr>
 8005ff4:	b108      	cbz	r0, 8005ffa <_printf_i+0x1f2>
 8005ff6:	1b80      	subs	r0, r0, r6
 8005ff8:	6060      	str	r0, [r4, #4]
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	2300      	movs	r3, #0
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006004:	e7a8      	b.n	8005f58 <_printf_i+0x150>
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	4632      	mov	r2, r6
 800600a:	4649      	mov	r1, r9
 800600c:	4640      	mov	r0, r8
 800600e:	47d0      	blx	sl
 8006010:	3001      	adds	r0, #1
 8006012:	d0ab      	beq.n	8005f6c <_printf_i+0x164>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	079b      	lsls	r3, r3, #30
 8006018:	d413      	bmi.n	8006042 <_printf_i+0x23a>
 800601a:	68e0      	ldr	r0, [r4, #12]
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	4298      	cmp	r0, r3
 8006020:	bfb8      	it	lt
 8006022:	4618      	movlt	r0, r3
 8006024:	e7a4      	b.n	8005f70 <_printf_i+0x168>
 8006026:	2301      	movs	r3, #1
 8006028:	4632      	mov	r2, r6
 800602a:	4649      	mov	r1, r9
 800602c:	4640      	mov	r0, r8
 800602e:	47d0      	blx	sl
 8006030:	3001      	adds	r0, #1
 8006032:	d09b      	beq.n	8005f6c <_printf_i+0x164>
 8006034:	3501      	adds	r5, #1
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	9903      	ldr	r1, [sp, #12]
 800603a:	1a5b      	subs	r3, r3, r1
 800603c:	42ab      	cmp	r3, r5
 800603e:	dcf2      	bgt.n	8006026 <_printf_i+0x21e>
 8006040:	e7eb      	b.n	800601a <_printf_i+0x212>
 8006042:	2500      	movs	r5, #0
 8006044:	f104 0619 	add.w	r6, r4, #25
 8006048:	e7f5      	b.n	8006036 <_printf_i+0x22e>
 800604a:	bf00      	nop
 800604c:	0800851a 	.word	0x0800851a
 8006050:	0800852b 	.word	0x0800852b

08006054 <siprintf>:
 8006054:	b40e      	push	{r1, r2, r3}
 8006056:	b500      	push	{lr}
 8006058:	b09c      	sub	sp, #112	; 0x70
 800605a:	ab1d      	add	r3, sp, #116	; 0x74
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	9006      	str	r0, [sp, #24]
 8006060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006064:	4809      	ldr	r0, [pc, #36]	; (800608c <siprintf+0x38>)
 8006066:	9107      	str	r1, [sp, #28]
 8006068:	9104      	str	r1, [sp, #16]
 800606a:	4909      	ldr	r1, [pc, #36]	; (8006090 <siprintf+0x3c>)
 800606c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006070:	9105      	str	r1, [sp, #20]
 8006072:	6800      	ldr	r0, [r0, #0]
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	a902      	add	r1, sp, #8
 8006078:	f001 fb34 	bl	80076e4 <_svfiprintf_r>
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	b01c      	add	sp, #112	; 0x70
 8006084:	f85d eb04 	ldr.w	lr, [sp], #4
 8006088:	b003      	add	sp, #12
 800608a:	4770      	bx	lr
 800608c:	2000000c 	.word	0x2000000c
 8006090:	ffff0208 	.word	0xffff0208

08006094 <quorem>:
 8006094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006098:	6903      	ldr	r3, [r0, #16]
 800609a:	690c      	ldr	r4, [r1, #16]
 800609c:	42a3      	cmp	r3, r4
 800609e:	4607      	mov	r7, r0
 80060a0:	f2c0 8081 	blt.w	80061a6 <quorem+0x112>
 80060a4:	3c01      	subs	r4, #1
 80060a6:	f101 0814 	add.w	r8, r1, #20
 80060aa:	f100 0514 	add.w	r5, r0, #20
 80060ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060bc:	3301      	adds	r3, #1
 80060be:	429a      	cmp	r2, r3
 80060c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80060cc:	d331      	bcc.n	8006132 <quorem+0x9e>
 80060ce:	f04f 0e00 	mov.w	lr, #0
 80060d2:	4640      	mov	r0, r8
 80060d4:	46ac      	mov	ip, r5
 80060d6:	46f2      	mov	sl, lr
 80060d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80060dc:	b293      	uxth	r3, r2
 80060de:	fb06 e303 	mla	r3, r6, r3, lr
 80060e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ebaa 0303 	sub.w	r3, sl, r3
 80060ec:	0c12      	lsrs	r2, r2, #16
 80060ee:	f8dc a000 	ldr.w	sl, [ip]
 80060f2:	fb06 e202 	mla	r2, r6, r2, lr
 80060f6:	fa13 f38a 	uxtah	r3, r3, sl
 80060fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060fe:	fa1f fa82 	uxth.w	sl, r2
 8006102:	f8dc 2000 	ldr.w	r2, [ip]
 8006106:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800610a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800610e:	b29b      	uxth	r3, r3
 8006110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006114:	4581      	cmp	r9, r0
 8006116:	f84c 3b04 	str.w	r3, [ip], #4
 800611a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800611e:	d2db      	bcs.n	80060d8 <quorem+0x44>
 8006120:	f855 300b 	ldr.w	r3, [r5, fp]
 8006124:	b92b      	cbnz	r3, 8006132 <quorem+0x9e>
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	3b04      	subs	r3, #4
 800612a:	429d      	cmp	r5, r3
 800612c:	461a      	mov	r2, r3
 800612e:	d32e      	bcc.n	800618e <quorem+0xfa>
 8006130:	613c      	str	r4, [r7, #16]
 8006132:	4638      	mov	r0, r7
 8006134:	f001 f8c0 	bl	80072b8 <__mcmp>
 8006138:	2800      	cmp	r0, #0
 800613a:	db24      	blt.n	8006186 <quorem+0xf2>
 800613c:	3601      	adds	r6, #1
 800613e:	4628      	mov	r0, r5
 8006140:	f04f 0c00 	mov.w	ip, #0
 8006144:	f858 2b04 	ldr.w	r2, [r8], #4
 8006148:	f8d0 e000 	ldr.w	lr, [r0]
 800614c:	b293      	uxth	r3, r2
 800614e:	ebac 0303 	sub.w	r3, ip, r3
 8006152:	0c12      	lsrs	r2, r2, #16
 8006154:	fa13 f38e 	uxtah	r3, r3, lr
 8006158:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800615c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006160:	b29b      	uxth	r3, r3
 8006162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006166:	45c1      	cmp	r9, r8
 8006168:	f840 3b04 	str.w	r3, [r0], #4
 800616c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006170:	d2e8      	bcs.n	8006144 <quorem+0xb0>
 8006172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800617a:	b922      	cbnz	r2, 8006186 <quorem+0xf2>
 800617c:	3b04      	subs	r3, #4
 800617e:	429d      	cmp	r5, r3
 8006180:	461a      	mov	r2, r3
 8006182:	d30a      	bcc.n	800619a <quorem+0x106>
 8006184:	613c      	str	r4, [r7, #16]
 8006186:	4630      	mov	r0, r6
 8006188:	b003      	add	sp, #12
 800618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	3b04      	subs	r3, #4
 8006192:	2a00      	cmp	r2, #0
 8006194:	d1cc      	bne.n	8006130 <quorem+0x9c>
 8006196:	3c01      	subs	r4, #1
 8006198:	e7c7      	b.n	800612a <quorem+0x96>
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	3b04      	subs	r3, #4
 800619e:	2a00      	cmp	r2, #0
 80061a0:	d1f0      	bne.n	8006184 <quorem+0xf0>
 80061a2:	3c01      	subs	r4, #1
 80061a4:	e7eb      	b.n	800617e <quorem+0xea>
 80061a6:	2000      	movs	r0, #0
 80061a8:	e7ee      	b.n	8006188 <quorem+0xf4>
 80061aa:	0000      	movs	r0, r0
 80061ac:	0000      	movs	r0, r0
	...

080061b0 <_dtoa_r>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	ed2d 8b02 	vpush	{d8}
 80061b8:	ec57 6b10 	vmov	r6, r7, d0
 80061bc:	b095      	sub	sp, #84	; 0x54
 80061be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80061c4:	9105      	str	r1, [sp, #20]
 80061c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80061ca:	4604      	mov	r4, r0
 80061cc:	9209      	str	r2, [sp, #36]	; 0x24
 80061ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d0:	b975      	cbnz	r5, 80061f0 <_dtoa_r+0x40>
 80061d2:	2010      	movs	r0, #16
 80061d4:	f000 fddc 	bl	8006d90 <malloc>
 80061d8:	4602      	mov	r2, r0
 80061da:	6260      	str	r0, [r4, #36]	; 0x24
 80061dc:	b920      	cbnz	r0, 80061e8 <_dtoa_r+0x38>
 80061de:	4bb2      	ldr	r3, [pc, #712]	; (80064a8 <_dtoa_r+0x2f8>)
 80061e0:	21ea      	movs	r1, #234	; 0xea
 80061e2:	48b2      	ldr	r0, [pc, #712]	; (80064ac <_dtoa_r+0x2fc>)
 80061e4:	f001 fb8e 	bl	8007904 <__assert_func>
 80061e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061ec:	6005      	str	r5, [r0, #0]
 80061ee:	60c5      	str	r5, [r0, #12]
 80061f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	b151      	cbz	r1, 800620c <_dtoa_r+0x5c>
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	604a      	str	r2, [r1, #4]
 80061fa:	2301      	movs	r3, #1
 80061fc:	4093      	lsls	r3, r2
 80061fe:	608b      	str	r3, [r1, #8]
 8006200:	4620      	mov	r0, r4
 8006202:	f000 fe1b 	bl	8006e3c <_Bfree>
 8006206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	1e3b      	subs	r3, r7, #0
 800620e:	bfb9      	ittee	lt
 8006210:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006214:	9303      	strlt	r3, [sp, #12]
 8006216:	2300      	movge	r3, #0
 8006218:	f8c8 3000 	strge.w	r3, [r8]
 800621c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006220:	4ba3      	ldr	r3, [pc, #652]	; (80064b0 <_dtoa_r+0x300>)
 8006222:	bfbc      	itt	lt
 8006224:	2201      	movlt	r2, #1
 8006226:	f8c8 2000 	strlt.w	r2, [r8]
 800622a:	ea33 0309 	bics.w	r3, r3, r9
 800622e:	d11b      	bne.n	8006268 <_dtoa_r+0xb8>
 8006230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006232:	f242 730f 	movw	r3, #9999	; 0x270f
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800623c:	4333      	orrs	r3, r6
 800623e:	f000 857a 	beq.w	8006d36 <_dtoa_r+0xb86>
 8006242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006244:	b963      	cbnz	r3, 8006260 <_dtoa_r+0xb0>
 8006246:	4b9b      	ldr	r3, [pc, #620]	; (80064b4 <_dtoa_r+0x304>)
 8006248:	e024      	b.n	8006294 <_dtoa_r+0xe4>
 800624a:	4b9b      	ldr	r3, [pc, #620]	; (80064b8 <_dtoa_r+0x308>)
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	9800      	ldr	r0, [sp, #0]
 8006256:	b015      	add	sp, #84	; 0x54
 8006258:	ecbd 8b02 	vpop	{d8}
 800625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006260:	4b94      	ldr	r3, [pc, #592]	; (80064b4 <_dtoa_r+0x304>)
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	3303      	adds	r3, #3
 8006266:	e7f3      	b.n	8006250 <_dtoa_r+0xa0>
 8006268:	ed9d 7b02 	vldr	d7, [sp, #8]
 800626c:	2200      	movs	r2, #0
 800626e:	ec51 0b17 	vmov	r0, r1, d7
 8006272:	2300      	movs	r3, #0
 8006274:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006278:	f7fa fc2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800627c:	4680      	mov	r8, r0
 800627e:	b158      	cbz	r0, 8006298 <_dtoa_r+0xe8>
 8006280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006282:	2301      	movs	r3, #1
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8551 	beq.w	8006d30 <_dtoa_r+0xb80>
 800628e:	488b      	ldr	r0, [pc, #556]	; (80064bc <_dtoa_r+0x30c>)
 8006290:	6018      	str	r0, [r3, #0]
 8006292:	1e43      	subs	r3, r0, #1
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	e7dd      	b.n	8006254 <_dtoa_r+0xa4>
 8006298:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800629c:	aa12      	add	r2, sp, #72	; 0x48
 800629e:	a913      	add	r1, sp, #76	; 0x4c
 80062a0:	4620      	mov	r0, r4
 80062a2:	f001 f8ad 	bl	8007400 <__d2b>
 80062a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062aa:	4683      	mov	fp, r0
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	d07c      	beq.n	80063aa <_dtoa_r+0x1fa>
 80062b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80062b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80062be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80062c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80062c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062ca:	4b7d      	ldr	r3, [pc, #500]	; (80064c0 <_dtoa_r+0x310>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	4630      	mov	r0, r6
 80062d0:	4639      	mov	r1, r7
 80062d2:	f7f9 ffe1 	bl	8000298 <__aeabi_dsub>
 80062d6:	a36e      	add	r3, pc, #440	; (adr r3, 8006490 <_dtoa_r+0x2e0>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7fa f994 	bl	8000608 <__aeabi_dmul>
 80062e0:	a36d      	add	r3, pc, #436	; (adr r3, 8006498 <_dtoa_r+0x2e8>)
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f7f9 ffd9 	bl	800029c <__adddf3>
 80062ea:	4606      	mov	r6, r0
 80062ec:	4628      	mov	r0, r5
 80062ee:	460f      	mov	r7, r1
 80062f0:	f7fa f920 	bl	8000534 <__aeabi_i2d>
 80062f4:	a36a      	add	r3, pc, #424	; (adr r3, 80064a0 <_dtoa_r+0x2f0>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f7fa f985 	bl	8000608 <__aeabi_dmul>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4630      	mov	r0, r6
 8006304:	4639      	mov	r1, r7
 8006306:	f7f9 ffc9 	bl	800029c <__adddf3>
 800630a:	4606      	mov	r6, r0
 800630c:	460f      	mov	r7, r1
 800630e:	f7fa fc2b 	bl	8000b68 <__aeabi_d2iz>
 8006312:	2200      	movs	r2, #0
 8006314:	4682      	mov	sl, r0
 8006316:	2300      	movs	r3, #0
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa fbe6 	bl	8000aec <__aeabi_dcmplt>
 8006320:	b148      	cbz	r0, 8006336 <_dtoa_r+0x186>
 8006322:	4650      	mov	r0, sl
 8006324:	f7fa f906 	bl	8000534 <__aeabi_i2d>
 8006328:	4632      	mov	r2, r6
 800632a:	463b      	mov	r3, r7
 800632c:	f7fa fbd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006330:	b908      	cbnz	r0, 8006336 <_dtoa_r+0x186>
 8006332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006336:	f1ba 0f16 	cmp.w	sl, #22
 800633a:	d854      	bhi.n	80063e6 <_dtoa_r+0x236>
 800633c:	4b61      	ldr	r3, [pc, #388]	; (80064c4 <_dtoa_r+0x314>)
 800633e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800634a:	f7fa fbcf 	bl	8000aec <__aeabi_dcmplt>
 800634e:	2800      	cmp	r0, #0
 8006350:	d04b      	beq.n	80063ea <_dtoa_r+0x23a>
 8006352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006356:	2300      	movs	r3, #0
 8006358:	930e      	str	r3, [sp, #56]	; 0x38
 800635a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800635c:	1b5d      	subs	r5, r3, r5
 800635e:	1e6b      	subs	r3, r5, #1
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	bf43      	ittte	mi
 8006364:	2300      	movmi	r3, #0
 8006366:	f1c5 0801 	rsbmi	r8, r5, #1
 800636a:	9304      	strmi	r3, [sp, #16]
 800636c:	f04f 0800 	movpl.w	r8, #0
 8006370:	f1ba 0f00 	cmp.w	sl, #0
 8006374:	db3b      	blt.n	80063ee <_dtoa_r+0x23e>
 8006376:	9b04      	ldr	r3, [sp, #16]
 8006378:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800637c:	4453      	add	r3, sl
 800637e:	9304      	str	r3, [sp, #16]
 8006380:	2300      	movs	r3, #0
 8006382:	9306      	str	r3, [sp, #24]
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	2b09      	cmp	r3, #9
 8006388:	d869      	bhi.n	800645e <_dtoa_r+0x2ae>
 800638a:	2b05      	cmp	r3, #5
 800638c:	bfc4      	itt	gt
 800638e:	3b04      	subgt	r3, #4
 8006390:	9305      	strgt	r3, [sp, #20]
 8006392:	9b05      	ldr	r3, [sp, #20]
 8006394:	f1a3 0302 	sub.w	r3, r3, #2
 8006398:	bfcc      	ite	gt
 800639a:	2500      	movgt	r5, #0
 800639c:	2501      	movle	r5, #1
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d869      	bhi.n	8006476 <_dtoa_r+0x2c6>
 80063a2:	e8df f003 	tbb	[pc, r3]
 80063a6:	4e2c      	.short	0x4e2c
 80063a8:	5a4c      	.short	0x5a4c
 80063aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80063ae:	441d      	add	r5, r3
 80063b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	bfc1      	itttt	gt
 80063b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80063c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80063c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80063c8:	bfda      	itte	le
 80063ca:	f1c3 0320 	rsble	r3, r3, #32
 80063ce:	fa06 f003 	lslle.w	r0, r6, r3
 80063d2:	4318      	orrgt	r0, r3
 80063d4:	f7fa f89e 	bl	8000514 <__aeabi_ui2d>
 80063d8:	2301      	movs	r3, #1
 80063da:	4606      	mov	r6, r0
 80063dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80063e0:	3d01      	subs	r5, #1
 80063e2:	9310      	str	r3, [sp, #64]	; 0x40
 80063e4:	e771      	b.n	80062ca <_dtoa_r+0x11a>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e7b6      	b.n	8006358 <_dtoa_r+0x1a8>
 80063ea:	900e      	str	r0, [sp, #56]	; 0x38
 80063ec:	e7b5      	b.n	800635a <_dtoa_r+0x1aa>
 80063ee:	f1ca 0300 	rsb	r3, sl, #0
 80063f2:	9306      	str	r3, [sp, #24]
 80063f4:	2300      	movs	r3, #0
 80063f6:	eba8 080a 	sub.w	r8, r8, sl
 80063fa:	930d      	str	r3, [sp, #52]	; 0x34
 80063fc:	e7c2      	b.n	8006384 <_dtoa_r+0x1d4>
 80063fe:	2300      	movs	r3, #0
 8006400:	9308      	str	r3, [sp, #32]
 8006402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	dc39      	bgt.n	800647c <_dtoa_r+0x2cc>
 8006408:	f04f 0901 	mov.w	r9, #1
 800640c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006410:	464b      	mov	r3, r9
 8006412:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006416:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006418:	2200      	movs	r2, #0
 800641a:	6042      	str	r2, [r0, #4]
 800641c:	2204      	movs	r2, #4
 800641e:	f102 0614 	add.w	r6, r2, #20
 8006422:	429e      	cmp	r6, r3
 8006424:	6841      	ldr	r1, [r0, #4]
 8006426:	d92f      	bls.n	8006488 <_dtoa_r+0x2d8>
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fcc7 	bl	8006dbc <_Balloc>
 800642e:	9000      	str	r0, [sp, #0]
 8006430:	2800      	cmp	r0, #0
 8006432:	d14b      	bne.n	80064cc <_dtoa_r+0x31c>
 8006434:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <_dtoa_r+0x318>)
 8006436:	4602      	mov	r2, r0
 8006438:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800643c:	e6d1      	b.n	80061e2 <_dtoa_r+0x32>
 800643e:	2301      	movs	r3, #1
 8006440:	e7de      	b.n	8006400 <_dtoa_r+0x250>
 8006442:	2300      	movs	r3, #0
 8006444:	9308      	str	r3, [sp, #32]
 8006446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006448:	eb0a 0903 	add.w	r9, sl, r3
 800644c:	f109 0301 	add.w	r3, r9, #1
 8006450:	2b01      	cmp	r3, #1
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	bfb8      	it	lt
 8006456:	2301      	movlt	r3, #1
 8006458:	e7dd      	b.n	8006416 <_dtoa_r+0x266>
 800645a:	2301      	movs	r3, #1
 800645c:	e7f2      	b.n	8006444 <_dtoa_r+0x294>
 800645e:	2501      	movs	r5, #1
 8006460:	2300      	movs	r3, #0
 8006462:	9305      	str	r3, [sp, #20]
 8006464:	9508      	str	r5, [sp, #32]
 8006466:	f04f 39ff 	mov.w	r9, #4294967295
 800646a:	2200      	movs	r2, #0
 800646c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006470:	2312      	movs	r3, #18
 8006472:	9209      	str	r2, [sp, #36]	; 0x24
 8006474:	e7cf      	b.n	8006416 <_dtoa_r+0x266>
 8006476:	2301      	movs	r3, #1
 8006478:	9308      	str	r3, [sp, #32]
 800647a:	e7f4      	b.n	8006466 <_dtoa_r+0x2b6>
 800647c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006480:	f8cd 9004 	str.w	r9, [sp, #4]
 8006484:	464b      	mov	r3, r9
 8006486:	e7c6      	b.n	8006416 <_dtoa_r+0x266>
 8006488:	3101      	adds	r1, #1
 800648a:	6041      	str	r1, [r0, #4]
 800648c:	0052      	lsls	r2, r2, #1
 800648e:	e7c6      	b.n	800641e <_dtoa_r+0x26e>
 8006490:	636f4361 	.word	0x636f4361
 8006494:	3fd287a7 	.word	0x3fd287a7
 8006498:	8b60c8b3 	.word	0x8b60c8b3
 800649c:	3fc68a28 	.word	0x3fc68a28
 80064a0:	509f79fb 	.word	0x509f79fb
 80064a4:	3fd34413 	.word	0x3fd34413
 80064a8:	08008549 	.word	0x08008549
 80064ac:	08008560 	.word	0x08008560
 80064b0:	7ff00000 	.word	0x7ff00000
 80064b4:	08008545 	.word	0x08008545
 80064b8:	0800853c 	.word	0x0800853c
 80064bc:	08008519 	.word	0x08008519
 80064c0:	3ff80000 	.word	0x3ff80000
 80064c4:	08008658 	.word	0x08008658
 80064c8:	080085bf 	.word	0x080085bf
 80064cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ce:	9a00      	ldr	r2, [sp, #0]
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	9b01      	ldr	r3, [sp, #4]
 80064d4:	2b0e      	cmp	r3, #14
 80064d6:	f200 80ad 	bhi.w	8006634 <_dtoa_r+0x484>
 80064da:	2d00      	cmp	r5, #0
 80064dc:	f000 80aa 	beq.w	8006634 <_dtoa_r+0x484>
 80064e0:	f1ba 0f00 	cmp.w	sl, #0
 80064e4:	dd36      	ble.n	8006554 <_dtoa_r+0x3a4>
 80064e6:	4ac3      	ldr	r2, [pc, #780]	; (80067f4 <_dtoa_r+0x644>)
 80064e8:	f00a 030f 	and.w	r3, sl, #15
 80064ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064f0:	ed93 7b00 	vldr	d7, [r3]
 80064f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80064f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80064fc:	eeb0 8a47 	vmov.f32	s16, s14
 8006500:	eef0 8a67 	vmov.f32	s17, s15
 8006504:	d016      	beq.n	8006534 <_dtoa_r+0x384>
 8006506:	4bbc      	ldr	r3, [pc, #752]	; (80067f8 <_dtoa_r+0x648>)
 8006508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800650c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006510:	f7fa f9a4 	bl	800085c <__aeabi_ddiv>
 8006514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006518:	f007 070f 	and.w	r7, r7, #15
 800651c:	2503      	movs	r5, #3
 800651e:	4eb6      	ldr	r6, [pc, #728]	; (80067f8 <_dtoa_r+0x648>)
 8006520:	b957      	cbnz	r7, 8006538 <_dtoa_r+0x388>
 8006522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006526:	ec53 2b18 	vmov	r2, r3, d8
 800652a:	f7fa f997 	bl	800085c <__aeabi_ddiv>
 800652e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006532:	e029      	b.n	8006588 <_dtoa_r+0x3d8>
 8006534:	2502      	movs	r5, #2
 8006536:	e7f2      	b.n	800651e <_dtoa_r+0x36e>
 8006538:	07f9      	lsls	r1, r7, #31
 800653a:	d508      	bpl.n	800654e <_dtoa_r+0x39e>
 800653c:	ec51 0b18 	vmov	r0, r1, d8
 8006540:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006544:	f7fa f860 	bl	8000608 <__aeabi_dmul>
 8006548:	ec41 0b18 	vmov	d8, r0, r1
 800654c:	3501      	adds	r5, #1
 800654e:	107f      	asrs	r7, r7, #1
 8006550:	3608      	adds	r6, #8
 8006552:	e7e5      	b.n	8006520 <_dtoa_r+0x370>
 8006554:	f000 80a6 	beq.w	80066a4 <_dtoa_r+0x4f4>
 8006558:	f1ca 0600 	rsb	r6, sl, #0
 800655c:	4ba5      	ldr	r3, [pc, #660]	; (80067f4 <_dtoa_r+0x644>)
 800655e:	4fa6      	ldr	r7, [pc, #664]	; (80067f8 <_dtoa_r+0x648>)
 8006560:	f006 020f 	and.w	r2, r6, #15
 8006564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006570:	f7fa f84a 	bl	8000608 <__aeabi_dmul>
 8006574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006578:	1136      	asrs	r6, r6, #4
 800657a:	2300      	movs	r3, #0
 800657c:	2502      	movs	r5, #2
 800657e:	2e00      	cmp	r6, #0
 8006580:	f040 8085 	bne.w	800668e <_dtoa_r+0x4de>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1d2      	bne.n	800652e <_dtoa_r+0x37e>
 8006588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 808c 	beq.w	80066a8 <_dtoa_r+0x4f8>
 8006590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006594:	4b99      	ldr	r3, [pc, #612]	; (80067fc <_dtoa_r+0x64c>)
 8006596:	2200      	movs	r2, #0
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7fa faa6 	bl	8000aec <__aeabi_dcmplt>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f000 8081 	beq.w	80066a8 <_dtoa_r+0x4f8>
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d07d      	beq.n	80066a8 <_dtoa_r+0x4f8>
 80065ac:	f1b9 0f00 	cmp.w	r9, #0
 80065b0:	dd3c      	ble.n	800662c <_dtoa_r+0x47c>
 80065b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80065b6:	9307      	str	r3, [sp, #28]
 80065b8:	2200      	movs	r2, #0
 80065ba:	4b91      	ldr	r3, [pc, #580]	; (8006800 <_dtoa_r+0x650>)
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa f822 	bl	8000608 <__aeabi_dmul>
 80065c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c8:	3501      	adds	r5, #1
 80065ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80065ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065d2:	4628      	mov	r0, r5
 80065d4:	f7f9 ffae 	bl	8000534 <__aeabi_i2d>
 80065d8:	4632      	mov	r2, r6
 80065da:	463b      	mov	r3, r7
 80065dc:	f7fa f814 	bl	8000608 <__aeabi_dmul>
 80065e0:	4b88      	ldr	r3, [pc, #544]	; (8006804 <_dtoa_r+0x654>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	f7f9 fe5a 	bl	800029c <__adddf3>
 80065e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80065ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f0:	9303      	str	r3, [sp, #12]
 80065f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d15c      	bne.n	80066b2 <_dtoa_r+0x502>
 80065f8:	4b83      	ldr	r3, [pc, #524]	; (8006808 <_dtoa_r+0x658>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f7f9 fe4a 	bl	8000298 <__aeabi_dsub>
 8006604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006608:	4606      	mov	r6, r0
 800660a:	460f      	mov	r7, r1
 800660c:	f7fa fa8c 	bl	8000b28 <__aeabi_dcmpgt>
 8006610:	2800      	cmp	r0, #0
 8006612:	f040 8296 	bne.w	8006b42 <_dtoa_r+0x992>
 8006616:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800661a:	4630      	mov	r0, r6
 800661c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006620:	4639      	mov	r1, r7
 8006622:	f7fa fa63 	bl	8000aec <__aeabi_dcmplt>
 8006626:	2800      	cmp	r0, #0
 8006628:	f040 8288 	bne.w	8006b3c <_dtoa_r+0x98c>
 800662c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006636:	2b00      	cmp	r3, #0
 8006638:	f2c0 8158 	blt.w	80068ec <_dtoa_r+0x73c>
 800663c:	f1ba 0f0e 	cmp.w	sl, #14
 8006640:	f300 8154 	bgt.w	80068ec <_dtoa_r+0x73c>
 8006644:	4b6b      	ldr	r3, [pc, #428]	; (80067f4 <_dtoa_r+0x644>)
 8006646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800664a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	f280 80e3 	bge.w	800681c <_dtoa_r+0x66c>
 8006656:	9b01      	ldr	r3, [sp, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f300 80df 	bgt.w	800681c <_dtoa_r+0x66c>
 800665e:	f040 826d 	bne.w	8006b3c <_dtoa_r+0x98c>
 8006662:	4b69      	ldr	r3, [pc, #420]	; (8006808 <_dtoa_r+0x658>)
 8006664:	2200      	movs	r2, #0
 8006666:	4640      	mov	r0, r8
 8006668:	4649      	mov	r1, r9
 800666a:	f7f9 ffcd 	bl	8000608 <__aeabi_dmul>
 800666e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006672:	f7fa fa4f 	bl	8000b14 <__aeabi_dcmpge>
 8006676:	9e01      	ldr	r6, [sp, #4]
 8006678:	4637      	mov	r7, r6
 800667a:	2800      	cmp	r0, #0
 800667c:	f040 8243 	bne.w	8006b06 <_dtoa_r+0x956>
 8006680:	9d00      	ldr	r5, [sp, #0]
 8006682:	2331      	movs	r3, #49	; 0x31
 8006684:	f805 3b01 	strb.w	r3, [r5], #1
 8006688:	f10a 0a01 	add.w	sl, sl, #1
 800668c:	e23f      	b.n	8006b0e <_dtoa_r+0x95e>
 800668e:	07f2      	lsls	r2, r6, #31
 8006690:	d505      	bpl.n	800669e <_dtoa_r+0x4ee>
 8006692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006696:	f7f9 ffb7 	bl	8000608 <__aeabi_dmul>
 800669a:	3501      	adds	r5, #1
 800669c:	2301      	movs	r3, #1
 800669e:	1076      	asrs	r6, r6, #1
 80066a0:	3708      	adds	r7, #8
 80066a2:	e76c      	b.n	800657e <_dtoa_r+0x3ce>
 80066a4:	2502      	movs	r5, #2
 80066a6:	e76f      	b.n	8006588 <_dtoa_r+0x3d8>
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80066ae:	930c      	str	r3, [sp, #48]	; 0x30
 80066b0:	e78d      	b.n	80065ce <_dtoa_r+0x41e>
 80066b2:	9900      	ldr	r1, [sp, #0]
 80066b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066b8:	4b4e      	ldr	r3, [pc, #312]	; (80067f4 <_dtoa_r+0x644>)
 80066ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066be:	4401      	add	r1, r0
 80066c0:	9102      	str	r1, [sp, #8]
 80066c2:	9908      	ldr	r1, [sp, #32]
 80066c4:	eeb0 8a47 	vmov.f32	s16, s14
 80066c8:	eef0 8a67 	vmov.f32	s17, s15
 80066cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066d4:	2900      	cmp	r1, #0
 80066d6:	d045      	beq.n	8006764 <_dtoa_r+0x5b4>
 80066d8:	494c      	ldr	r1, [pc, #304]	; (800680c <_dtoa_r+0x65c>)
 80066da:	2000      	movs	r0, #0
 80066dc:	f7fa f8be 	bl	800085c <__aeabi_ddiv>
 80066e0:	ec53 2b18 	vmov	r2, r3, d8
 80066e4:	f7f9 fdd8 	bl	8000298 <__aeabi_dsub>
 80066e8:	9d00      	ldr	r5, [sp, #0]
 80066ea:	ec41 0b18 	vmov	d8, r0, r1
 80066ee:	4639      	mov	r1, r7
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7fa fa39 	bl	8000b68 <__aeabi_d2iz>
 80066f6:	900c      	str	r0, [sp, #48]	; 0x30
 80066f8:	f7f9 ff1c 	bl	8000534 <__aeabi_i2d>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7f9 fdc8 	bl	8000298 <__aeabi_dsub>
 8006708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800670a:	3330      	adds	r3, #48	; 0x30
 800670c:	f805 3b01 	strb.w	r3, [r5], #1
 8006710:	ec53 2b18 	vmov	r2, r3, d8
 8006714:	4606      	mov	r6, r0
 8006716:	460f      	mov	r7, r1
 8006718:	f7fa f9e8 	bl	8000aec <__aeabi_dcmplt>
 800671c:	2800      	cmp	r0, #0
 800671e:	d165      	bne.n	80067ec <_dtoa_r+0x63c>
 8006720:	4632      	mov	r2, r6
 8006722:	463b      	mov	r3, r7
 8006724:	4935      	ldr	r1, [pc, #212]	; (80067fc <_dtoa_r+0x64c>)
 8006726:	2000      	movs	r0, #0
 8006728:	f7f9 fdb6 	bl	8000298 <__aeabi_dsub>
 800672c:	ec53 2b18 	vmov	r2, r3, d8
 8006730:	f7fa f9dc 	bl	8000aec <__aeabi_dcmplt>
 8006734:	2800      	cmp	r0, #0
 8006736:	f040 80b9 	bne.w	80068ac <_dtoa_r+0x6fc>
 800673a:	9b02      	ldr	r3, [sp, #8]
 800673c:	429d      	cmp	r5, r3
 800673e:	f43f af75 	beq.w	800662c <_dtoa_r+0x47c>
 8006742:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <_dtoa_r+0x650>)
 8006744:	ec51 0b18 	vmov	r0, r1, d8
 8006748:	2200      	movs	r2, #0
 800674a:	f7f9 ff5d 	bl	8000608 <__aeabi_dmul>
 800674e:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <_dtoa_r+0x650>)
 8006750:	ec41 0b18 	vmov	d8, r0, r1
 8006754:	2200      	movs	r2, #0
 8006756:	4630      	mov	r0, r6
 8006758:	4639      	mov	r1, r7
 800675a:	f7f9 ff55 	bl	8000608 <__aeabi_dmul>
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1
 8006762:	e7c4      	b.n	80066ee <_dtoa_r+0x53e>
 8006764:	ec51 0b17 	vmov	r0, r1, d7
 8006768:	f7f9 ff4e 	bl	8000608 <__aeabi_dmul>
 800676c:	9b02      	ldr	r3, [sp, #8]
 800676e:	9d00      	ldr	r5, [sp, #0]
 8006770:	930c      	str	r3, [sp, #48]	; 0x30
 8006772:	ec41 0b18 	vmov	d8, r0, r1
 8006776:	4639      	mov	r1, r7
 8006778:	4630      	mov	r0, r6
 800677a:	f7fa f9f5 	bl	8000b68 <__aeabi_d2iz>
 800677e:	9011      	str	r0, [sp, #68]	; 0x44
 8006780:	f7f9 fed8 	bl	8000534 <__aeabi_i2d>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7f9 fd84 	bl	8000298 <__aeabi_dsub>
 8006790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006792:	3330      	adds	r3, #48	; 0x30
 8006794:	f805 3b01 	strb.w	r3, [r5], #1
 8006798:	9b02      	ldr	r3, [sp, #8]
 800679a:	429d      	cmp	r5, r3
 800679c:	4606      	mov	r6, r0
 800679e:	460f      	mov	r7, r1
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	d134      	bne.n	8006810 <_dtoa_r+0x660>
 80067a6:	4b19      	ldr	r3, [pc, #100]	; (800680c <_dtoa_r+0x65c>)
 80067a8:	ec51 0b18 	vmov	r0, r1, d8
 80067ac:	f7f9 fd76 	bl	800029c <__adddf3>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4630      	mov	r0, r6
 80067b6:	4639      	mov	r1, r7
 80067b8:	f7fa f9b6 	bl	8000b28 <__aeabi_dcmpgt>
 80067bc:	2800      	cmp	r0, #0
 80067be:	d175      	bne.n	80068ac <_dtoa_r+0x6fc>
 80067c0:	ec53 2b18 	vmov	r2, r3, d8
 80067c4:	4911      	ldr	r1, [pc, #68]	; (800680c <_dtoa_r+0x65c>)
 80067c6:	2000      	movs	r0, #0
 80067c8:	f7f9 fd66 	bl	8000298 <__aeabi_dsub>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4630      	mov	r0, r6
 80067d2:	4639      	mov	r1, r7
 80067d4:	f7fa f98a 	bl	8000aec <__aeabi_dcmplt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f43f af27 	beq.w	800662c <_dtoa_r+0x47c>
 80067de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067e0:	1e6b      	subs	r3, r5, #1
 80067e2:	930c      	str	r3, [sp, #48]	; 0x30
 80067e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067e8:	2b30      	cmp	r3, #48	; 0x30
 80067ea:	d0f8      	beq.n	80067de <_dtoa_r+0x62e>
 80067ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80067f0:	e04a      	b.n	8006888 <_dtoa_r+0x6d8>
 80067f2:	bf00      	nop
 80067f4:	08008658 	.word	0x08008658
 80067f8:	08008630 	.word	0x08008630
 80067fc:	3ff00000 	.word	0x3ff00000
 8006800:	40240000 	.word	0x40240000
 8006804:	401c0000 	.word	0x401c0000
 8006808:	40140000 	.word	0x40140000
 800680c:	3fe00000 	.word	0x3fe00000
 8006810:	4baf      	ldr	r3, [pc, #700]	; (8006ad0 <_dtoa_r+0x920>)
 8006812:	f7f9 fef9 	bl	8000608 <__aeabi_dmul>
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	e7ac      	b.n	8006776 <_dtoa_r+0x5c6>
 800681c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006820:	9d00      	ldr	r5, [sp, #0]
 8006822:	4642      	mov	r2, r8
 8006824:	464b      	mov	r3, r9
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f817 	bl	800085c <__aeabi_ddiv>
 800682e:	f7fa f99b 	bl	8000b68 <__aeabi_d2iz>
 8006832:	9002      	str	r0, [sp, #8]
 8006834:	f7f9 fe7e 	bl	8000534 <__aeabi_i2d>
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	f7f9 fee4 	bl	8000608 <__aeabi_dmul>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4630      	mov	r0, r6
 8006846:	4639      	mov	r1, r7
 8006848:	f7f9 fd26 	bl	8000298 <__aeabi_dsub>
 800684c:	9e02      	ldr	r6, [sp, #8]
 800684e:	9f01      	ldr	r7, [sp, #4]
 8006850:	3630      	adds	r6, #48	; 0x30
 8006852:	f805 6b01 	strb.w	r6, [r5], #1
 8006856:	9e00      	ldr	r6, [sp, #0]
 8006858:	1bae      	subs	r6, r5, r6
 800685a:	42b7      	cmp	r7, r6
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	d137      	bne.n	80068d2 <_dtoa_r+0x722>
 8006862:	f7f9 fd1b 	bl	800029c <__adddf3>
 8006866:	4642      	mov	r2, r8
 8006868:	464b      	mov	r3, r9
 800686a:	4606      	mov	r6, r0
 800686c:	460f      	mov	r7, r1
 800686e:	f7fa f95b 	bl	8000b28 <__aeabi_dcmpgt>
 8006872:	b9c8      	cbnz	r0, 80068a8 <_dtoa_r+0x6f8>
 8006874:	4642      	mov	r2, r8
 8006876:	464b      	mov	r3, r9
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7fa f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006880:	b110      	cbz	r0, 8006888 <_dtoa_r+0x6d8>
 8006882:	9b02      	ldr	r3, [sp, #8]
 8006884:	07d9      	lsls	r1, r3, #31
 8006886:	d40f      	bmi.n	80068a8 <_dtoa_r+0x6f8>
 8006888:	4620      	mov	r0, r4
 800688a:	4659      	mov	r1, fp
 800688c:	f000 fad6 	bl	8006e3c <_Bfree>
 8006890:	2300      	movs	r3, #0
 8006892:	702b      	strb	r3, [r5, #0]
 8006894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006896:	f10a 0001 	add.w	r0, sl, #1
 800689a:	6018      	str	r0, [r3, #0]
 800689c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f43f acd8 	beq.w	8006254 <_dtoa_r+0xa4>
 80068a4:	601d      	str	r5, [r3, #0]
 80068a6:	e4d5      	b.n	8006254 <_dtoa_r+0xa4>
 80068a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80068ac:	462b      	mov	r3, r5
 80068ae:	461d      	mov	r5, r3
 80068b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068b4:	2a39      	cmp	r2, #57	; 0x39
 80068b6:	d108      	bne.n	80068ca <_dtoa_r+0x71a>
 80068b8:	9a00      	ldr	r2, [sp, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d1f7      	bne.n	80068ae <_dtoa_r+0x6fe>
 80068be:	9a07      	ldr	r2, [sp, #28]
 80068c0:	9900      	ldr	r1, [sp, #0]
 80068c2:	3201      	adds	r2, #1
 80068c4:	9207      	str	r2, [sp, #28]
 80068c6:	2230      	movs	r2, #48	; 0x30
 80068c8:	700a      	strb	r2, [r1, #0]
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	3201      	adds	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e78c      	b.n	80067ec <_dtoa_r+0x63c>
 80068d2:	4b7f      	ldr	r3, [pc, #508]	; (8006ad0 <_dtoa_r+0x920>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	f7f9 fe97 	bl	8000608 <__aeabi_dmul>
 80068da:	2200      	movs	r2, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	4606      	mov	r6, r0
 80068e0:	460f      	mov	r7, r1
 80068e2:	f7fa f8f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d09b      	beq.n	8006822 <_dtoa_r+0x672>
 80068ea:	e7cd      	b.n	8006888 <_dtoa_r+0x6d8>
 80068ec:	9a08      	ldr	r2, [sp, #32]
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	f000 80c4 	beq.w	8006a7c <_dtoa_r+0x8cc>
 80068f4:	9a05      	ldr	r2, [sp, #20]
 80068f6:	2a01      	cmp	r2, #1
 80068f8:	f300 80a8 	bgt.w	8006a4c <_dtoa_r+0x89c>
 80068fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068fe:	2a00      	cmp	r2, #0
 8006900:	f000 80a0 	beq.w	8006a44 <_dtoa_r+0x894>
 8006904:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006908:	9e06      	ldr	r6, [sp, #24]
 800690a:	4645      	mov	r5, r8
 800690c:	9a04      	ldr	r2, [sp, #16]
 800690e:	2101      	movs	r1, #1
 8006910:	441a      	add	r2, r3
 8006912:	4620      	mov	r0, r4
 8006914:	4498      	add	r8, r3
 8006916:	9204      	str	r2, [sp, #16]
 8006918:	f000 fb4c 	bl	8006fb4 <__i2b>
 800691c:	4607      	mov	r7, r0
 800691e:	2d00      	cmp	r5, #0
 8006920:	dd0b      	ble.n	800693a <_dtoa_r+0x78a>
 8006922:	9b04      	ldr	r3, [sp, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	dd08      	ble.n	800693a <_dtoa_r+0x78a>
 8006928:	42ab      	cmp	r3, r5
 800692a:	9a04      	ldr	r2, [sp, #16]
 800692c:	bfa8      	it	ge
 800692e:	462b      	movge	r3, r5
 8006930:	eba8 0803 	sub.w	r8, r8, r3
 8006934:	1aed      	subs	r5, r5, r3
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	9b06      	ldr	r3, [sp, #24]
 800693c:	b1fb      	cbz	r3, 800697e <_dtoa_r+0x7ce>
 800693e:	9b08      	ldr	r3, [sp, #32]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 809f 	beq.w	8006a84 <_dtoa_r+0x8d4>
 8006946:	2e00      	cmp	r6, #0
 8006948:	dd11      	ble.n	800696e <_dtoa_r+0x7be>
 800694a:	4639      	mov	r1, r7
 800694c:	4632      	mov	r2, r6
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fbec 	bl	800712c <__pow5mult>
 8006954:	465a      	mov	r2, fp
 8006956:	4601      	mov	r1, r0
 8006958:	4607      	mov	r7, r0
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fb40 	bl	8006fe0 <__multiply>
 8006960:	4659      	mov	r1, fp
 8006962:	9007      	str	r0, [sp, #28]
 8006964:	4620      	mov	r0, r4
 8006966:	f000 fa69 	bl	8006e3c <_Bfree>
 800696a:	9b07      	ldr	r3, [sp, #28]
 800696c:	469b      	mov	fp, r3
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	1b9a      	subs	r2, r3, r6
 8006972:	d004      	beq.n	800697e <_dtoa_r+0x7ce>
 8006974:	4659      	mov	r1, fp
 8006976:	4620      	mov	r0, r4
 8006978:	f000 fbd8 	bl	800712c <__pow5mult>
 800697c:	4683      	mov	fp, r0
 800697e:	2101      	movs	r1, #1
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fb17 	bl	8006fb4 <__i2b>
 8006986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006988:	2b00      	cmp	r3, #0
 800698a:	4606      	mov	r6, r0
 800698c:	dd7c      	ble.n	8006a88 <_dtoa_r+0x8d8>
 800698e:	461a      	mov	r2, r3
 8006990:	4601      	mov	r1, r0
 8006992:	4620      	mov	r0, r4
 8006994:	f000 fbca 	bl	800712c <__pow5mult>
 8006998:	9b05      	ldr	r3, [sp, #20]
 800699a:	2b01      	cmp	r3, #1
 800699c:	4606      	mov	r6, r0
 800699e:	dd76      	ble.n	8006a8e <_dtoa_r+0x8de>
 80069a0:	2300      	movs	r3, #0
 80069a2:	9306      	str	r3, [sp, #24]
 80069a4:	6933      	ldr	r3, [r6, #16]
 80069a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069aa:	6918      	ldr	r0, [r3, #16]
 80069ac:	f000 fab2 	bl	8006f14 <__hi0bits>
 80069b0:	f1c0 0020 	rsb	r0, r0, #32
 80069b4:	9b04      	ldr	r3, [sp, #16]
 80069b6:	4418      	add	r0, r3
 80069b8:	f010 001f 	ands.w	r0, r0, #31
 80069bc:	f000 8086 	beq.w	8006acc <_dtoa_r+0x91c>
 80069c0:	f1c0 0320 	rsb	r3, r0, #32
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	dd7f      	ble.n	8006ac8 <_dtoa_r+0x918>
 80069c8:	f1c0 001c 	rsb	r0, r0, #28
 80069cc:	9b04      	ldr	r3, [sp, #16]
 80069ce:	4403      	add	r3, r0
 80069d0:	4480      	add	r8, r0
 80069d2:	4405      	add	r5, r0
 80069d4:	9304      	str	r3, [sp, #16]
 80069d6:	f1b8 0f00 	cmp.w	r8, #0
 80069da:	dd05      	ble.n	80069e8 <_dtoa_r+0x838>
 80069dc:	4659      	mov	r1, fp
 80069de:	4642      	mov	r2, r8
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fbfd 	bl	80071e0 <__lshift>
 80069e6:	4683      	mov	fp, r0
 80069e8:	9b04      	ldr	r3, [sp, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	dd05      	ble.n	80069fa <_dtoa_r+0x84a>
 80069ee:	4631      	mov	r1, r6
 80069f0:	461a      	mov	r2, r3
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 fbf4 	bl	80071e0 <__lshift>
 80069f8:	4606      	mov	r6, r0
 80069fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d069      	beq.n	8006ad4 <_dtoa_r+0x924>
 8006a00:	4631      	mov	r1, r6
 8006a02:	4658      	mov	r0, fp
 8006a04:	f000 fc58 	bl	80072b8 <__mcmp>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	da63      	bge.n	8006ad4 <_dtoa_r+0x924>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4659      	mov	r1, fp
 8006a10:	220a      	movs	r2, #10
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fa34 	bl	8006e80 <__multadd>
 8006a18:	9b08      	ldr	r3, [sp, #32]
 8006a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a1e:	4683      	mov	fp, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 818f 	beq.w	8006d44 <_dtoa_r+0xb94>
 8006a26:	4639      	mov	r1, r7
 8006a28:	2300      	movs	r3, #0
 8006a2a:	220a      	movs	r2, #10
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 fa27 	bl	8006e80 <__multadd>
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	4607      	mov	r7, r0
 8006a38:	f300 808e 	bgt.w	8006b58 <_dtoa_r+0x9a8>
 8006a3c:	9b05      	ldr	r3, [sp, #20]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	dc50      	bgt.n	8006ae4 <_dtoa_r+0x934>
 8006a42:	e089      	b.n	8006b58 <_dtoa_r+0x9a8>
 8006a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a4a:	e75d      	b.n	8006908 <_dtoa_r+0x758>
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	1e5e      	subs	r6, r3, #1
 8006a50:	9b06      	ldr	r3, [sp, #24]
 8006a52:	42b3      	cmp	r3, r6
 8006a54:	bfbf      	itttt	lt
 8006a56:	9b06      	ldrlt	r3, [sp, #24]
 8006a58:	9606      	strlt	r6, [sp, #24]
 8006a5a:	1af2      	sublt	r2, r6, r3
 8006a5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006a5e:	bfb6      	itet	lt
 8006a60:	189b      	addlt	r3, r3, r2
 8006a62:	1b9e      	subge	r6, r3, r6
 8006a64:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	bfb8      	it	lt
 8006a6a:	2600      	movlt	r6, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bfb5      	itete	lt
 8006a70:	eba8 0503 	sublt.w	r5, r8, r3
 8006a74:	9b01      	ldrge	r3, [sp, #4]
 8006a76:	2300      	movlt	r3, #0
 8006a78:	4645      	movge	r5, r8
 8006a7a:	e747      	b.n	800690c <_dtoa_r+0x75c>
 8006a7c:	9e06      	ldr	r6, [sp, #24]
 8006a7e:	9f08      	ldr	r7, [sp, #32]
 8006a80:	4645      	mov	r5, r8
 8006a82:	e74c      	b.n	800691e <_dtoa_r+0x76e>
 8006a84:	9a06      	ldr	r2, [sp, #24]
 8006a86:	e775      	b.n	8006974 <_dtoa_r+0x7c4>
 8006a88:	9b05      	ldr	r3, [sp, #20]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	dc18      	bgt.n	8006ac0 <_dtoa_r+0x910>
 8006a8e:	9b02      	ldr	r3, [sp, #8]
 8006a90:	b9b3      	cbnz	r3, 8006ac0 <_dtoa_r+0x910>
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a98:	b9a3      	cbnz	r3, 8006ac4 <_dtoa_r+0x914>
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aa0:	0d1b      	lsrs	r3, r3, #20
 8006aa2:	051b      	lsls	r3, r3, #20
 8006aa4:	b12b      	cbz	r3, 8006ab2 <_dtoa_r+0x902>
 8006aa6:	9b04      	ldr	r3, [sp, #16]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	f108 0801 	add.w	r8, r8, #1
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9306      	str	r3, [sp, #24]
 8006ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f47f af74 	bne.w	80069a4 <_dtoa_r+0x7f4>
 8006abc:	2001      	movs	r0, #1
 8006abe:	e779      	b.n	80069b4 <_dtoa_r+0x804>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e7f6      	b.n	8006ab2 <_dtoa_r+0x902>
 8006ac4:	9b02      	ldr	r3, [sp, #8]
 8006ac6:	e7f4      	b.n	8006ab2 <_dtoa_r+0x902>
 8006ac8:	d085      	beq.n	80069d6 <_dtoa_r+0x826>
 8006aca:	4618      	mov	r0, r3
 8006acc:	301c      	adds	r0, #28
 8006ace:	e77d      	b.n	80069cc <_dtoa_r+0x81c>
 8006ad0:	40240000 	.word	0x40240000
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dc38      	bgt.n	8006b4c <_dtoa_r+0x99c>
 8006ada:	9b05      	ldr	r3, [sp, #20]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	dd35      	ble.n	8006b4c <_dtoa_r+0x99c>
 8006ae0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006ae4:	f1b9 0f00 	cmp.w	r9, #0
 8006ae8:	d10d      	bne.n	8006b06 <_dtoa_r+0x956>
 8006aea:	4631      	mov	r1, r6
 8006aec:	464b      	mov	r3, r9
 8006aee:	2205      	movs	r2, #5
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 f9c5 	bl	8006e80 <__multadd>
 8006af6:	4601      	mov	r1, r0
 8006af8:	4606      	mov	r6, r0
 8006afa:	4658      	mov	r0, fp
 8006afc:	f000 fbdc 	bl	80072b8 <__mcmp>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f73f adbd 	bgt.w	8006680 <_dtoa_r+0x4d0>
 8006b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b08:	9d00      	ldr	r5, [sp, #0]
 8006b0a:	ea6f 0a03 	mvn.w	sl, r3
 8006b0e:	f04f 0800 	mov.w	r8, #0
 8006b12:	4631      	mov	r1, r6
 8006b14:	4620      	mov	r0, r4
 8006b16:	f000 f991 	bl	8006e3c <_Bfree>
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	f43f aeb4 	beq.w	8006888 <_dtoa_r+0x6d8>
 8006b20:	f1b8 0f00 	cmp.w	r8, #0
 8006b24:	d005      	beq.n	8006b32 <_dtoa_r+0x982>
 8006b26:	45b8      	cmp	r8, r7
 8006b28:	d003      	beq.n	8006b32 <_dtoa_r+0x982>
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f000 f985 	bl	8006e3c <_Bfree>
 8006b32:	4639      	mov	r1, r7
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 f981 	bl	8006e3c <_Bfree>
 8006b3a:	e6a5      	b.n	8006888 <_dtoa_r+0x6d8>
 8006b3c:	2600      	movs	r6, #0
 8006b3e:	4637      	mov	r7, r6
 8006b40:	e7e1      	b.n	8006b06 <_dtoa_r+0x956>
 8006b42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b48:	4637      	mov	r7, r6
 8006b4a:	e599      	b.n	8006680 <_dtoa_r+0x4d0>
 8006b4c:	9b08      	ldr	r3, [sp, #32]
 8006b4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 80fd 	beq.w	8006d52 <_dtoa_r+0xba2>
 8006b58:	2d00      	cmp	r5, #0
 8006b5a:	dd05      	ble.n	8006b68 <_dtoa_r+0x9b8>
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	462a      	mov	r2, r5
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 fb3d 	bl	80071e0 <__lshift>
 8006b66:	4607      	mov	r7, r0
 8006b68:	9b06      	ldr	r3, [sp, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d05c      	beq.n	8006c28 <_dtoa_r+0xa78>
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 f923 	bl	8006dbc <_Balloc>
 8006b76:	4605      	mov	r5, r0
 8006b78:	b928      	cbnz	r0, 8006b86 <_dtoa_r+0x9d6>
 8006b7a:	4b80      	ldr	r3, [pc, #512]	; (8006d7c <_dtoa_r+0xbcc>)
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b82:	f7ff bb2e 	b.w	80061e2 <_dtoa_r+0x32>
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	3202      	adds	r2, #2
 8006b8a:	0092      	lsls	r2, r2, #2
 8006b8c:	f107 010c 	add.w	r1, r7, #12
 8006b90:	300c      	adds	r0, #12
 8006b92:	f000 f905 	bl	8006da0 <memcpy>
 8006b96:	2201      	movs	r2, #1
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fb20 	bl	80071e0 <__lshift>
 8006ba0:	9b00      	ldr	r3, [sp, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	9b00      	ldr	r3, [sp, #0]
 8006ba8:	444b      	add	r3, r9
 8006baa:	9307      	str	r3, [sp, #28]
 8006bac:	9b02      	ldr	r3, [sp, #8]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	46b8      	mov	r8, r7
 8006bb4:	9306      	str	r3, [sp, #24]
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	9b01      	ldr	r3, [sp, #4]
 8006bba:	4631      	mov	r1, r6
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	9302      	str	r3, [sp, #8]
 8006bc2:	f7ff fa67 	bl	8006094 <quorem>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	3330      	adds	r3, #48	; 0x30
 8006bca:	9004      	str	r0, [sp, #16]
 8006bcc:	4641      	mov	r1, r8
 8006bce:	4658      	mov	r0, fp
 8006bd0:	9308      	str	r3, [sp, #32]
 8006bd2:	f000 fb71 	bl	80072b8 <__mcmp>
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	4681      	mov	r9, r0
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fb87 	bl	80072f0 <__mdiff>
 8006be2:	68c2      	ldr	r2, [r0, #12]
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	4605      	mov	r5, r0
 8006be8:	bb02      	cbnz	r2, 8006c2c <_dtoa_r+0xa7c>
 8006bea:	4601      	mov	r1, r0
 8006bec:	4658      	mov	r0, fp
 8006bee:	f000 fb63 	bl	80072b8 <__mcmp>
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006bfe:	f000 f91d 	bl	8006e3c <_Bfree>
 8006c02:	9b05      	ldr	r3, [sp, #20]
 8006c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c06:	9d01      	ldr	r5, [sp, #4]
 8006c08:	ea43 0102 	orr.w	r1, r3, r2
 8006c0c:	9b06      	ldr	r3, [sp, #24]
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	d10d      	bne.n	8006c30 <_dtoa_r+0xa80>
 8006c14:	2b39      	cmp	r3, #57	; 0x39
 8006c16:	d029      	beq.n	8006c6c <_dtoa_r+0xabc>
 8006c18:	f1b9 0f00 	cmp.w	r9, #0
 8006c1c:	dd01      	ble.n	8006c22 <_dtoa_r+0xa72>
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	3331      	adds	r3, #49	; 0x31
 8006c22:	9a02      	ldr	r2, [sp, #8]
 8006c24:	7013      	strb	r3, [r2, #0]
 8006c26:	e774      	b.n	8006b12 <_dtoa_r+0x962>
 8006c28:	4638      	mov	r0, r7
 8006c2a:	e7b9      	b.n	8006ba0 <_dtoa_r+0x9f0>
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	e7e2      	b.n	8006bf6 <_dtoa_r+0xa46>
 8006c30:	f1b9 0f00 	cmp.w	r9, #0
 8006c34:	db06      	blt.n	8006c44 <_dtoa_r+0xa94>
 8006c36:	9905      	ldr	r1, [sp, #20]
 8006c38:	ea41 0909 	orr.w	r9, r1, r9
 8006c3c:	9906      	ldr	r1, [sp, #24]
 8006c3e:	ea59 0101 	orrs.w	r1, r9, r1
 8006c42:	d120      	bne.n	8006c86 <_dtoa_r+0xad6>
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	ddec      	ble.n	8006c22 <_dtoa_r+0xa72>
 8006c48:	4659      	mov	r1, fp
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	f000 fac6 	bl	80071e0 <__lshift>
 8006c54:	4631      	mov	r1, r6
 8006c56:	4683      	mov	fp, r0
 8006c58:	f000 fb2e 	bl	80072b8 <__mcmp>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	dc02      	bgt.n	8006c68 <_dtoa_r+0xab8>
 8006c62:	d1de      	bne.n	8006c22 <_dtoa_r+0xa72>
 8006c64:	07da      	lsls	r2, r3, #31
 8006c66:	d5dc      	bpl.n	8006c22 <_dtoa_r+0xa72>
 8006c68:	2b39      	cmp	r3, #57	; 0x39
 8006c6a:	d1d8      	bne.n	8006c1e <_dtoa_r+0xa6e>
 8006c6c:	9a02      	ldr	r2, [sp, #8]
 8006c6e:	2339      	movs	r3, #57	; 0x39
 8006c70:	7013      	strb	r3, [r2, #0]
 8006c72:	462b      	mov	r3, r5
 8006c74:	461d      	mov	r5, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c7c:	2a39      	cmp	r2, #57	; 0x39
 8006c7e:	d050      	beq.n	8006d22 <_dtoa_r+0xb72>
 8006c80:	3201      	adds	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	e745      	b.n	8006b12 <_dtoa_r+0x962>
 8006c86:	2a00      	cmp	r2, #0
 8006c88:	dd03      	ble.n	8006c92 <_dtoa_r+0xae2>
 8006c8a:	2b39      	cmp	r3, #57	; 0x39
 8006c8c:	d0ee      	beq.n	8006c6c <_dtoa_r+0xabc>
 8006c8e:	3301      	adds	r3, #1
 8006c90:	e7c7      	b.n	8006c22 <_dtoa_r+0xa72>
 8006c92:	9a01      	ldr	r2, [sp, #4]
 8006c94:	9907      	ldr	r1, [sp, #28]
 8006c96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c9a:	428a      	cmp	r2, r1
 8006c9c:	d02a      	beq.n	8006cf4 <_dtoa_r+0xb44>
 8006c9e:	4659      	mov	r1, fp
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 f8eb 	bl	8006e80 <__multadd>
 8006caa:	45b8      	cmp	r8, r7
 8006cac:	4683      	mov	fp, r0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	f04f 020a 	mov.w	r2, #10
 8006cb6:	4641      	mov	r1, r8
 8006cb8:	4620      	mov	r0, r4
 8006cba:	d107      	bne.n	8006ccc <_dtoa_r+0xb1c>
 8006cbc:	f000 f8e0 	bl	8006e80 <__multadd>
 8006cc0:	4680      	mov	r8, r0
 8006cc2:	4607      	mov	r7, r0
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	e775      	b.n	8006bb8 <_dtoa_r+0xa08>
 8006ccc:	f000 f8d8 	bl	8006e80 <__multadd>
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4680      	mov	r8, r0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	220a      	movs	r2, #10
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 f8d1 	bl	8006e80 <__multadd>
 8006cde:	4607      	mov	r7, r0
 8006ce0:	e7f0      	b.n	8006cc4 <_dtoa_r+0xb14>
 8006ce2:	f1b9 0f00 	cmp.w	r9, #0
 8006ce6:	9a00      	ldr	r2, [sp, #0]
 8006ce8:	bfcc      	ite	gt
 8006cea:	464d      	movgt	r5, r9
 8006cec:	2501      	movle	r5, #1
 8006cee:	4415      	add	r5, r2
 8006cf0:	f04f 0800 	mov.w	r8, #0
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	f000 fa70 	bl	80071e0 <__lshift>
 8006d00:	4631      	mov	r1, r6
 8006d02:	4683      	mov	fp, r0
 8006d04:	f000 fad8 	bl	80072b8 <__mcmp>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	dcb2      	bgt.n	8006c72 <_dtoa_r+0xac2>
 8006d0c:	d102      	bne.n	8006d14 <_dtoa_r+0xb64>
 8006d0e:	9b01      	ldr	r3, [sp, #4]
 8006d10:	07db      	lsls	r3, r3, #31
 8006d12:	d4ae      	bmi.n	8006c72 <_dtoa_r+0xac2>
 8006d14:	462b      	mov	r3, r5
 8006d16:	461d      	mov	r5, r3
 8006d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d1c:	2a30      	cmp	r2, #48	; 0x30
 8006d1e:	d0fa      	beq.n	8006d16 <_dtoa_r+0xb66>
 8006d20:	e6f7      	b.n	8006b12 <_dtoa_r+0x962>
 8006d22:	9a00      	ldr	r2, [sp, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1a5      	bne.n	8006c74 <_dtoa_r+0xac4>
 8006d28:	f10a 0a01 	add.w	sl, sl, #1
 8006d2c:	2331      	movs	r3, #49	; 0x31
 8006d2e:	e779      	b.n	8006c24 <_dtoa_r+0xa74>
 8006d30:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <_dtoa_r+0xbd0>)
 8006d32:	f7ff baaf 	b.w	8006294 <_dtoa_r+0xe4>
 8006d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f47f aa86 	bne.w	800624a <_dtoa_r+0x9a>
 8006d3e:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <_dtoa_r+0xbd4>)
 8006d40:	f7ff baa8 	b.w	8006294 <_dtoa_r+0xe4>
 8006d44:	f1b9 0f00 	cmp.w	r9, #0
 8006d48:	dc03      	bgt.n	8006d52 <_dtoa_r+0xba2>
 8006d4a:	9b05      	ldr	r3, [sp, #20]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	f73f aec9 	bgt.w	8006ae4 <_dtoa_r+0x934>
 8006d52:	9d00      	ldr	r5, [sp, #0]
 8006d54:	4631      	mov	r1, r6
 8006d56:	4658      	mov	r0, fp
 8006d58:	f7ff f99c 	bl	8006094 <quorem>
 8006d5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d60:	f805 3b01 	strb.w	r3, [r5], #1
 8006d64:	9a00      	ldr	r2, [sp, #0]
 8006d66:	1aaa      	subs	r2, r5, r2
 8006d68:	4591      	cmp	r9, r2
 8006d6a:	ddba      	ble.n	8006ce2 <_dtoa_r+0xb32>
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	2300      	movs	r3, #0
 8006d70:	220a      	movs	r2, #10
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f884 	bl	8006e80 <__multadd>
 8006d78:	4683      	mov	fp, r0
 8006d7a:	e7eb      	b.n	8006d54 <_dtoa_r+0xba4>
 8006d7c:	080085bf 	.word	0x080085bf
 8006d80:	08008518 	.word	0x08008518
 8006d84:	0800853c 	.word	0x0800853c

08006d88 <_localeconv_r>:
 8006d88:	4800      	ldr	r0, [pc, #0]	; (8006d8c <_localeconv_r+0x4>)
 8006d8a:	4770      	bx	lr
 8006d8c:	20000160 	.word	0x20000160

08006d90 <malloc>:
 8006d90:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <malloc+0xc>)
 8006d92:	4601      	mov	r1, r0
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	f000 bbef 	b.w	8007578 <_malloc_r>
 8006d9a:	bf00      	nop
 8006d9c:	2000000c 	.word	0x2000000c

08006da0 <memcpy>:
 8006da0:	440a      	add	r2, r1
 8006da2:	4291      	cmp	r1, r2
 8006da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da8:	d100      	bne.n	8006dac <memcpy+0xc>
 8006daa:	4770      	bx	lr
 8006dac:	b510      	push	{r4, lr}
 8006dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db6:	4291      	cmp	r1, r2
 8006db8:	d1f9      	bne.n	8006dae <memcpy+0xe>
 8006dba:	bd10      	pop	{r4, pc}

08006dbc <_Balloc>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	b976      	cbnz	r6, 8006de4 <_Balloc+0x28>
 8006dc6:	2010      	movs	r0, #16
 8006dc8:	f7ff ffe2 	bl	8006d90 <malloc>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6260      	str	r0, [r4, #36]	; 0x24
 8006dd0:	b920      	cbnz	r0, 8006ddc <_Balloc+0x20>
 8006dd2:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <_Balloc+0x78>)
 8006dd4:	4818      	ldr	r0, [pc, #96]	; (8006e38 <_Balloc+0x7c>)
 8006dd6:	2166      	movs	r1, #102	; 0x66
 8006dd8:	f000 fd94 	bl	8007904 <__assert_func>
 8006ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de0:	6006      	str	r6, [r0, #0]
 8006de2:	60c6      	str	r6, [r0, #12]
 8006de4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006de6:	68f3      	ldr	r3, [r6, #12]
 8006de8:	b183      	cbz	r3, 8006e0c <_Balloc+0x50>
 8006dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006df2:	b9b8      	cbnz	r0, 8006e24 <_Balloc+0x68>
 8006df4:	2101      	movs	r1, #1
 8006df6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dfa:	1d72      	adds	r2, r6, #5
 8006dfc:	0092      	lsls	r2, r2, #2
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 fb5a 	bl	80074b8 <_calloc_r>
 8006e04:	b160      	cbz	r0, 8006e20 <_Balloc+0x64>
 8006e06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e0a:	e00e      	b.n	8006e2a <_Balloc+0x6e>
 8006e0c:	2221      	movs	r2, #33	; 0x21
 8006e0e:	2104      	movs	r1, #4
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fb51 	bl	80074b8 <_calloc_r>
 8006e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e18:	60f0      	str	r0, [r6, #12]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e4      	bne.n	8006dea <_Balloc+0x2e>
 8006e20:	2000      	movs	r0, #0
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	6802      	ldr	r2, [r0, #0]
 8006e26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e30:	e7f7      	b.n	8006e22 <_Balloc+0x66>
 8006e32:	bf00      	nop
 8006e34:	08008549 	.word	0x08008549
 8006e38:	080085d0 	.word	0x080085d0

08006e3c <_Bfree>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b976      	cbnz	r6, 8006e64 <_Bfree+0x28>
 8006e46:	2010      	movs	r0, #16
 8006e48:	f7ff ffa2 	bl	8006d90 <malloc>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6268      	str	r0, [r5, #36]	; 0x24
 8006e50:	b920      	cbnz	r0, 8006e5c <_Bfree+0x20>
 8006e52:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <_Bfree+0x3c>)
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <_Bfree+0x40>)
 8006e56:	218a      	movs	r1, #138	; 0x8a
 8006e58:	f000 fd54 	bl	8007904 <__assert_func>
 8006e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e60:	6006      	str	r6, [r0, #0]
 8006e62:	60c6      	str	r6, [r0, #12]
 8006e64:	b13c      	cbz	r4, 8006e76 <_Bfree+0x3a>
 8006e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e68:	6862      	ldr	r2, [r4, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e70:	6021      	str	r1, [r4, #0]
 8006e72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	08008549 	.word	0x08008549
 8006e7c:	080085d0 	.word	0x080085d0

08006e80 <__multadd>:
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	690e      	ldr	r6, [r1, #16]
 8006e86:	4607      	mov	r7, r0
 8006e88:	4698      	mov	r8, r3
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	f101 0014 	add.w	r0, r1, #20
 8006e90:	2300      	movs	r3, #0
 8006e92:	6805      	ldr	r5, [r0, #0]
 8006e94:	b2a9      	uxth	r1, r5
 8006e96:	fb02 8101 	mla	r1, r2, r1, r8
 8006e9a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e9e:	0c2d      	lsrs	r5, r5, #16
 8006ea0:	fb02 c505 	mla	r5, r2, r5, ip
 8006ea4:	b289      	uxth	r1, r1
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006eac:	429e      	cmp	r6, r3
 8006eae:	f840 1b04 	str.w	r1, [r0], #4
 8006eb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006eb6:	dcec      	bgt.n	8006e92 <__multadd+0x12>
 8006eb8:	f1b8 0f00 	cmp.w	r8, #0
 8006ebc:	d022      	beq.n	8006f04 <__multadd+0x84>
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	42b3      	cmp	r3, r6
 8006ec2:	dc19      	bgt.n	8006ef8 <__multadd+0x78>
 8006ec4:	6861      	ldr	r1, [r4, #4]
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	3101      	adds	r1, #1
 8006eca:	f7ff ff77 	bl	8006dbc <_Balloc>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	b928      	cbnz	r0, 8006ede <__multadd+0x5e>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <__multadd+0x8c>)
 8006ed6:	480e      	ldr	r0, [pc, #56]	; (8006f10 <__multadd+0x90>)
 8006ed8:	21b5      	movs	r1, #181	; 0xb5
 8006eda:	f000 fd13 	bl	8007904 <__assert_func>
 8006ede:	6922      	ldr	r2, [r4, #16]
 8006ee0:	3202      	adds	r2, #2
 8006ee2:	f104 010c 	add.w	r1, r4, #12
 8006ee6:	0092      	lsls	r2, r2, #2
 8006ee8:	300c      	adds	r0, #12
 8006eea:	f7ff ff59 	bl	8006da0 <memcpy>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f7ff ffa3 	bl	8006e3c <_Bfree>
 8006ef6:	462c      	mov	r4, r5
 8006ef8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006efc:	3601      	adds	r6, #1
 8006efe:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f02:	6126      	str	r6, [r4, #16]
 8006f04:	4620      	mov	r0, r4
 8006f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f0a:	bf00      	nop
 8006f0c:	080085bf 	.word	0x080085bf
 8006f10:	080085d0 	.word	0x080085d0

08006f14 <__hi0bits>:
 8006f14:	0c03      	lsrs	r3, r0, #16
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	b9d3      	cbnz	r3, 8006f50 <__hi0bits+0x3c>
 8006f1a:	0400      	lsls	r0, r0, #16
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f22:	bf04      	itt	eq
 8006f24:	0200      	lsleq	r0, r0, #8
 8006f26:	3308      	addeq	r3, #8
 8006f28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f2c:	bf04      	itt	eq
 8006f2e:	0100      	lsleq	r0, r0, #4
 8006f30:	3304      	addeq	r3, #4
 8006f32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f36:	bf04      	itt	eq
 8006f38:	0080      	lsleq	r0, r0, #2
 8006f3a:	3302      	addeq	r3, #2
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	db05      	blt.n	8006f4c <__hi0bits+0x38>
 8006f40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f44:	f103 0301 	add.w	r3, r3, #1
 8006f48:	bf08      	it	eq
 8006f4a:	2320      	moveq	r3, #32
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	4770      	bx	lr
 8006f50:	2300      	movs	r3, #0
 8006f52:	e7e4      	b.n	8006f1e <__hi0bits+0xa>

08006f54 <__lo0bits>:
 8006f54:	6803      	ldr	r3, [r0, #0]
 8006f56:	f013 0207 	ands.w	r2, r3, #7
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	d00b      	beq.n	8006f76 <__lo0bits+0x22>
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	d424      	bmi.n	8006fac <__lo0bits+0x58>
 8006f62:	0798      	lsls	r0, r3, #30
 8006f64:	bf49      	itett	mi
 8006f66:	085b      	lsrmi	r3, r3, #1
 8006f68:	089b      	lsrpl	r3, r3, #2
 8006f6a:	2001      	movmi	r0, #1
 8006f6c:	600b      	strmi	r3, [r1, #0]
 8006f6e:	bf5c      	itt	pl
 8006f70:	600b      	strpl	r3, [r1, #0]
 8006f72:	2002      	movpl	r0, #2
 8006f74:	4770      	bx	lr
 8006f76:	b298      	uxth	r0, r3
 8006f78:	b9b0      	cbnz	r0, 8006fa8 <__lo0bits+0x54>
 8006f7a:	0c1b      	lsrs	r3, r3, #16
 8006f7c:	2010      	movs	r0, #16
 8006f7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f82:	bf04      	itt	eq
 8006f84:	0a1b      	lsreq	r3, r3, #8
 8006f86:	3008      	addeq	r0, #8
 8006f88:	071a      	lsls	r2, r3, #28
 8006f8a:	bf04      	itt	eq
 8006f8c:	091b      	lsreq	r3, r3, #4
 8006f8e:	3004      	addeq	r0, #4
 8006f90:	079a      	lsls	r2, r3, #30
 8006f92:	bf04      	itt	eq
 8006f94:	089b      	lsreq	r3, r3, #2
 8006f96:	3002      	addeq	r0, #2
 8006f98:	07da      	lsls	r2, r3, #31
 8006f9a:	d403      	bmi.n	8006fa4 <__lo0bits+0x50>
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	f100 0001 	add.w	r0, r0, #1
 8006fa2:	d005      	beq.n	8006fb0 <__lo0bits+0x5c>
 8006fa4:	600b      	str	r3, [r1, #0]
 8006fa6:	4770      	bx	lr
 8006fa8:	4610      	mov	r0, r2
 8006faa:	e7e8      	b.n	8006f7e <__lo0bits+0x2a>
 8006fac:	2000      	movs	r0, #0
 8006fae:	4770      	bx	lr
 8006fb0:	2020      	movs	r0, #32
 8006fb2:	4770      	bx	lr

08006fb4 <__i2b>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	2101      	movs	r1, #1
 8006fba:	f7ff feff 	bl	8006dbc <_Balloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	b928      	cbnz	r0, 8006fce <__i2b+0x1a>
 8006fc2:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <__i2b+0x24>)
 8006fc4:	4805      	ldr	r0, [pc, #20]	; (8006fdc <__i2b+0x28>)
 8006fc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fca:	f000 fc9b 	bl	8007904 <__assert_func>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	6144      	str	r4, [r0, #20]
 8006fd2:	6103      	str	r3, [r0, #16]
 8006fd4:	bd10      	pop	{r4, pc}
 8006fd6:	bf00      	nop
 8006fd8:	080085bf 	.word	0x080085bf
 8006fdc:	080085d0 	.word	0x080085d0

08006fe0 <__multiply>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	690a      	ldr	r2, [r1, #16]
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	bfb8      	it	lt
 8006fee:	460b      	movlt	r3, r1
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	bfbc      	itt	lt
 8006ff4:	4625      	movlt	r5, r4
 8006ff6:	461c      	movlt	r4, r3
 8006ff8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ffc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007000:	68ab      	ldr	r3, [r5, #8]
 8007002:	6869      	ldr	r1, [r5, #4]
 8007004:	eb0a 0709 	add.w	r7, sl, r9
 8007008:	42bb      	cmp	r3, r7
 800700a:	b085      	sub	sp, #20
 800700c:	bfb8      	it	lt
 800700e:	3101      	addlt	r1, #1
 8007010:	f7ff fed4 	bl	8006dbc <_Balloc>
 8007014:	b930      	cbnz	r0, 8007024 <__multiply+0x44>
 8007016:	4602      	mov	r2, r0
 8007018:	4b42      	ldr	r3, [pc, #264]	; (8007124 <__multiply+0x144>)
 800701a:	4843      	ldr	r0, [pc, #268]	; (8007128 <__multiply+0x148>)
 800701c:	f240 115d 	movw	r1, #349	; 0x15d
 8007020:	f000 fc70 	bl	8007904 <__assert_func>
 8007024:	f100 0614 	add.w	r6, r0, #20
 8007028:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800702c:	4633      	mov	r3, r6
 800702e:	2200      	movs	r2, #0
 8007030:	4543      	cmp	r3, r8
 8007032:	d31e      	bcc.n	8007072 <__multiply+0x92>
 8007034:	f105 0c14 	add.w	ip, r5, #20
 8007038:	f104 0314 	add.w	r3, r4, #20
 800703c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007040:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007044:	9202      	str	r2, [sp, #8]
 8007046:	ebac 0205 	sub.w	r2, ip, r5
 800704a:	3a15      	subs	r2, #21
 800704c:	f022 0203 	bic.w	r2, r2, #3
 8007050:	3204      	adds	r2, #4
 8007052:	f105 0115 	add.w	r1, r5, #21
 8007056:	458c      	cmp	ip, r1
 8007058:	bf38      	it	cc
 800705a:	2204      	movcc	r2, #4
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9a02      	ldr	r2, [sp, #8]
 8007060:	9303      	str	r3, [sp, #12]
 8007062:	429a      	cmp	r2, r3
 8007064:	d808      	bhi.n	8007078 <__multiply+0x98>
 8007066:	2f00      	cmp	r7, #0
 8007068:	dc55      	bgt.n	8007116 <__multiply+0x136>
 800706a:	6107      	str	r7, [r0, #16]
 800706c:	b005      	add	sp, #20
 800706e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007072:	f843 2b04 	str.w	r2, [r3], #4
 8007076:	e7db      	b.n	8007030 <__multiply+0x50>
 8007078:	f8b3 a000 	ldrh.w	sl, [r3]
 800707c:	f1ba 0f00 	cmp.w	sl, #0
 8007080:	d020      	beq.n	80070c4 <__multiply+0xe4>
 8007082:	f105 0e14 	add.w	lr, r5, #20
 8007086:	46b1      	mov	r9, r6
 8007088:	2200      	movs	r2, #0
 800708a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800708e:	f8d9 b000 	ldr.w	fp, [r9]
 8007092:	b2a1      	uxth	r1, r4
 8007094:	fa1f fb8b 	uxth.w	fp, fp
 8007098:	fb0a b101 	mla	r1, sl, r1, fp
 800709c:	4411      	add	r1, r2
 800709e:	f8d9 2000 	ldr.w	r2, [r9]
 80070a2:	0c24      	lsrs	r4, r4, #16
 80070a4:	0c12      	lsrs	r2, r2, #16
 80070a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80070aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80070ae:	b289      	uxth	r1, r1
 80070b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070b4:	45f4      	cmp	ip, lr
 80070b6:	f849 1b04 	str.w	r1, [r9], #4
 80070ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80070be:	d8e4      	bhi.n	800708a <__multiply+0xaa>
 80070c0:	9901      	ldr	r1, [sp, #4]
 80070c2:	5072      	str	r2, [r6, r1]
 80070c4:	9a03      	ldr	r2, [sp, #12]
 80070c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070ca:	3304      	adds	r3, #4
 80070cc:	f1b9 0f00 	cmp.w	r9, #0
 80070d0:	d01f      	beq.n	8007112 <__multiply+0x132>
 80070d2:	6834      	ldr	r4, [r6, #0]
 80070d4:	f105 0114 	add.w	r1, r5, #20
 80070d8:	46b6      	mov	lr, r6
 80070da:	f04f 0a00 	mov.w	sl, #0
 80070de:	880a      	ldrh	r2, [r1, #0]
 80070e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80070e4:	fb09 b202 	mla	r2, r9, r2, fp
 80070e8:	4492      	add	sl, r2
 80070ea:	b2a4      	uxth	r4, r4
 80070ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80070f0:	f84e 4b04 	str.w	r4, [lr], #4
 80070f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80070f8:	f8be 2000 	ldrh.w	r2, [lr]
 80070fc:	0c24      	lsrs	r4, r4, #16
 80070fe:	fb09 2404 	mla	r4, r9, r4, r2
 8007102:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007106:	458c      	cmp	ip, r1
 8007108:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800710c:	d8e7      	bhi.n	80070de <__multiply+0xfe>
 800710e:	9a01      	ldr	r2, [sp, #4]
 8007110:	50b4      	str	r4, [r6, r2]
 8007112:	3604      	adds	r6, #4
 8007114:	e7a3      	b.n	800705e <__multiply+0x7e>
 8007116:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1a5      	bne.n	800706a <__multiply+0x8a>
 800711e:	3f01      	subs	r7, #1
 8007120:	e7a1      	b.n	8007066 <__multiply+0x86>
 8007122:	bf00      	nop
 8007124:	080085bf 	.word	0x080085bf
 8007128:	080085d0 	.word	0x080085d0

0800712c <__pow5mult>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4615      	mov	r5, r2
 8007132:	f012 0203 	ands.w	r2, r2, #3
 8007136:	4606      	mov	r6, r0
 8007138:	460f      	mov	r7, r1
 800713a:	d007      	beq.n	800714c <__pow5mult+0x20>
 800713c:	4c25      	ldr	r4, [pc, #148]	; (80071d4 <__pow5mult+0xa8>)
 800713e:	3a01      	subs	r2, #1
 8007140:	2300      	movs	r3, #0
 8007142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007146:	f7ff fe9b 	bl	8006e80 <__multadd>
 800714a:	4607      	mov	r7, r0
 800714c:	10ad      	asrs	r5, r5, #2
 800714e:	d03d      	beq.n	80071cc <__pow5mult+0xa0>
 8007150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007152:	b97c      	cbnz	r4, 8007174 <__pow5mult+0x48>
 8007154:	2010      	movs	r0, #16
 8007156:	f7ff fe1b 	bl	8006d90 <malloc>
 800715a:	4602      	mov	r2, r0
 800715c:	6270      	str	r0, [r6, #36]	; 0x24
 800715e:	b928      	cbnz	r0, 800716c <__pow5mult+0x40>
 8007160:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <__pow5mult+0xac>)
 8007162:	481e      	ldr	r0, [pc, #120]	; (80071dc <__pow5mult+0xb0>)
 8007164:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007168:	f000 fbcc 	bl	8007904 <__assert_func>
 800716c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007170:	6004      	str	r4, [r0, #0]
 8007172:	60c4      	str	r4, [r0, #12]
 8007174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800717c:	b94c      	cbnz	r4, 8007192 <__pow5mult+0x66>
 800717e:	f240 2171 	movw	r1, #625	; 0x271
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ff16 	bl	8006fb4 <__i2b>
 8007188:	2300      	movs	r3, #0
 800718a:	f8c8 0008 	str.w	r0, [r8, #8]
 800718e:	4604      	mov	r4, r0
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	f04f 0900 	mov.w	r9, #0
 8007196:	07eb      	lsls	r3, r5, #31
 8007198:	d50a      	bpl.n	80071b0 <__pow5mult+0x84>
 800719a:	4639      	mov	r1, r7
 800719c:	4622      	mov	r2, r4
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ff1e 	bl	8006fe0 <__multiply>
 80071a4:	4639      	mov	r1, r7
 80071a6:	4680      	mov	r8, r0
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7ff fe47 	bl	8006e3c <_Bfree>
 80071ae:	4647      	mov	r7, r8
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	d00b      	beq.n	80071cc <__pow5mult+0xa0>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	b938      	cbnz	r0, 80071c8 <__pow5mult+0x9c>
 80071b8:	4622      	mov	r2, r4
 80071ba:	4621      	mov	r1, r4
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ff0f 	bl	8006fe0 <__multiply>
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	f8c0 9000 	str.w	r9, [r0]
 80071c8:	4604      	mov	r4, r0
 80071ca:	e7e4      	b.n	8007196 <__pow5mult+0x6a>
 80071cc:	4638      	mov	r0, r7
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	bf00      	nop
 80071d4:	08008720 	.word	0x08008720
 80071d8:	08008549 	.word	0x08008549
 80071dc:	080085d0 	.word	0x080085d0

080071e0 <__lshift>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	460c      	mov	r4, r1
 80071e6:	6849      	ldr	r1, [r1, #4]
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	4607      	mov	r7, r0
 80071f2:	4691      	mov	r9, r2
 80071f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071f8:	f108 0601 	add.w	r6, r8, #1
 80071fc:	42b3      	cmp	r3, r6
 80071fe:	db0b      	blt.n	8007218 <__lshift+0x38>
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff fddb 	bl	8006dbc <_Balloc>
 8007206:	4605      	mov	r5, r0
 8007208:	b948      	cbnz	r0, 800721e <__lshift+0x3e>
 800720a:	4602      	mov	r2, r0
 800720c:	4b28      	ldr	r3, [pc, #160]	; (80072b0 <__lshift+0xd0>)
 800720e:	4829      	ldr	r0, [pc, #164]	; (80072b4 <__lshift+0xd4>)
 8007210:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007214:	f000 fb76 	bl	8007904 <__assert_func>
 8007218:	3101      	adds	r1, #1
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	e7ee      	b.n	80071fc <__lshift+0x1c>
 800721e:	2300      	movs	r3, #0
 8007220:	f100 0114 	add.w	r1, r0, #20
 8007224:	f100 0210 	add.w	r2, r0, #16
 8007228:	4618      	mov	r0, r3
 800722a:	4553      	cmp	r3, sl
 800722c:	db33      	blt.n	8007296 <__lshift+0xb6>
 800722e:	6920      	ldr	r0, [r4, #16]
 8007230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007234:	f104 0314 	add.w	r3, r4, #20
 8007238:	f019 091f 	ands.w	r9, r9, #31
 800723c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007244:	d02b      	beq.n	800729e <__lshift+0xbe>
 8007246:	f1c9 0e20 	rsb	lr, r9, #32
 800724a:	468a      	mov	sl, r1
 800724c:	2200      	movs	r2, #0
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	fa00 f009 	lsl.w	r0, r0, r9
 8007254:	4302      	orrs	r2, r0
 8007256:	f84a 2b04 	str.w	r2, [sl], #4
 800725a:	f853 2b04 	ldr.w	r2, [r3], #4
 800725e:	459c      	cmp	ip, r3
 8007260:	fa22 f20e 	lsr.w	r2, r2, lr
 8007264:	d8f3      	bhi.n	800724e <__lshift+0x6e>
 8007266:	ebac 0304 	sub.w	r3, ip, r4
 800726a:	3b15      	subs	r3, #21
 800726c:	f023 0303 	bic.w	r3, r3, #3
 8007270:	3304      	adds	r3, #4
 8007272:	f104 0015 	add.w	r0, r4, #21
 8007276:	4584      	cmp	ip, r0
 8007278:	bf38      	it	cc
 800727a:	2304      	movcc	r3, #4
 800727c:	50ca      	str	r2, [r1, r3]
 800727e:	b10a      	cbz	r2, 8007284 <__lshift+0xa4>
 8007280:	f108 0602 	add.w	r6, r8, #2
 8007284:	3e01      	subs	r6, #1
 8007286:	4638      	mov	r0, r7
 8007288:	612e      	str	r6, [r5, #16]
 800728a:	4621      	mov	r1, r4
 800728c:	f7ff fdd6 	bl	8006e3c <_Bfree>
 8007290:	4628      	mov	r0, r5
 8007292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007296:	f842 0f04 	str.w	r0, [r2, #4]!
 800729a:	3301      	adds	r3, #1
 800729c:	e7c5      	b.n	800722a <__lshift+0x4a>
 800729e:	3904      	subs	r1, #4
 80072a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80072a8:	459c      	cmp	ip, r3
 80072aa:	d8f9      	bhi.n	80072a0 <__lshift+0xc0>
 80072ac:	e7ea      	b.n	8007284 <__lshift+0xa4>
 80072ae:	bf00      	nop
 80072b0:	080085bf 	.word	0x080085bf
 80072b4:	080085d0 	.word	0x080085d0

080072b8 <__mcmp>:
 80072b8:	b530      	push	{r4, r5, lr}
 80072ba:	6902      	ldr	r2, [r0, #16]
 80072bc:	690c      	ldr	r4, [r1, #16]
 80072be:	1b12      	subs	r2, r2, r4
 80072c0:	d10e      	bne.n	80072e0 <__mcmp+0x28>
 80072c2:	f100 0314 	add.w	r3, r0, #20
 80072c6:	3114      	adds	r1, #20
 80072c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072d8:	42a5      	cmp	r5, r4
 80072da:	d003      	beq.n	80072e4 <__mcmp+0x2c>
 80072dc:	d305      	bcc.n	80072ea <__mcmp+0x32>
 80072de:	2201      	movs	r2, #1
 80072e0:	4610      	mov	r0, r2
 80072e2:	bd30      	pop	{r4, r5, pc}
 80072e4:	4283      	cmp	r3, r0
 80072e6:	d3f3      	bcc.n	80072d0 <__mcmp+0x18>
 80072e8:	e7fa      	b.n	80072e0 <__mcmp+0x28>
 80072ea:	f04f 32ff 	mov.w	r2, #4294967295
 80072ee:	e7f7      	b.n	80072e0 <__mcmp+0x28>

080072f0 <__mdiff>:
 80072f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	460c      	mov	r4, r1
 80072f6:	4606      	mov	r6, r0
 80072f8:	4611      	mov	r1, r2
 80072fa:	4620      	mov	r0, r4
 80072fc:	4617      	mov	r7, r2
 80072fe:	f7ff ffdb 	bl	80072b8 <__mcmp>
 8007302:	1e05      	subs	r5, r0, #0
 8007304:	d110      	bne.n	8007328 <__mdiff+0x38>
 8007306:	4629      	mov	r1, r5
 8007308:	4630      	mov	r0, r6
 800730a:	f7ff fd57 	bl	8006dbc <_Balloc>
 800730e:	b930      	cbnz	r0, 800731e <__mdiff+0x2e>
 8007310:	4b39      	ldr	r3, [pc, #228]	; (80073f8 <__mdiff+0x108>)
 8007312:	4602      	mov	r2, r0
 8007314:	f240 2132 	movw	r1, #562	; 0x232
 8007318:	4838      	ldr	r0, [pc, #224]	; (80073fc <__mdiff+0x10c>)
 800731a:	f000 faf3 	bl	8007904 <__assert_func>
 800731e:	2301      	movs	r3, #1
 8007320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	bfa4      	itt	ge
 800732a:	463b      	movge	r3, r7
 800732c:	4627      	movge	r7, r4
 800732e:	4630      	mov	r0, r6
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	bfa6      	itte	ge
 8007334:	461c      	movge	r4, r3
 8007336:	2500      	movge	r5, #0
 8007338:	2501      	movlt	r5, #1
 800733a:	f7ff fd3f 	bl	8006dbc <_Balloc>
 800733e:	b920      	cbnz	r0, 800734a <__mdiff+0x5a>
 8007340:	4b2d      	ldr	r3, [pc, #180]	; (80073f8 <__mdiff+0x108>)
 8007342:	4602      	mov	r2, r0
 8007344:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007348:	e7e6      	b.n	8007318 <__mdiff+0x28>
 800734a:	693e      	ldr	r6, [r7, #16]
 800734c:	60c5      	str	r5, [r0, #12]
 800734e:	6925      	ldr	r5, [r4, #16]
 8007350:	f107 0114 	add.w	r1, r7, #20
 8007354:	f104 0914 	add.w	r9, r4, #20
 8007358:	f100 0e14 	add.w	lr, r0, #20
 800735c:	f107 0210 	add.w	r2, r7, #16
 8007360:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007364:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007368:	46f2      	mov	sl, lr
 800736a:	2700      	movs	r7, #0
 800736c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007370:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007374:	fa1f f883 	uxth.w	r8, r3
 8007378:	fa17 f78b 	uxtah	r7, r7, fp
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	eba7 0808 	sub.w	r8, r7, r8
 8007382:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007386:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800738a:	fa1f f888 	uxth.w	r8, r8
 800738e:	141f      	asrs	r7, r3, #16
 8007390:	454d      	cmp	r5, r9
 8007392:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007396:	f84a 3b04 	str.w	r3, [sl], #4
 800739a:	d8e7      	bhi.n	800736c <__mdiff+0x7c>
 800739c:	1b2b      	subs	r3, r5, r4
 800739e:	3b15      	subs	r3, #21
 80073a0:	f023 0303 	bic.w	r3, r3, #3
 80073a4:	3304      	adds	r3, #4
 80073a6:	3415      	adds	r4, #21
 80073a8:	42a5      	cmp	r5, r4
 80073aa:	bf38      	it	cc
 80073ac:	2304      	movcc	r3, #4
 80073ae:	4419      	add	r1, r3
 80073b0:	4473      	add	r3, lr
 80073b2:	469e      	mov	lr, r3
 80073b4:	460d      	mov	r5, r1
 80073b6:	4565      	cmp	r5, ip
 80073b8:	d30e      	bcc.n	80073d8 <__mdiff+0xe8>
 80073ba:	f10c 0203 	add.w	r2, ip, #3
 80073be:	1a52      	subs	r2, r2, r1
 80073c0:	f022 0203 	bic.w	r2, r2, #3
 80073c4:	3903      	subs	r1, #3
 80073c6:	458c      	cmp	ip, r1
 80073c8:	bf38      	it	cc
 80073ca:	2200      	movcc	r2, #0
 80073cc:	441a      	add	r2, r3
 80073ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073d2:	b17b      	cbz	r3, 80073f4 <__mdiff+0x104>
 80073d4:	6106      	str	r6, [r0, #16]
 80073d6:	e7a5      	b.n	8007324 <__mdiff+0x34>
 80073d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80073dc:	fa17 f488 	uxtah	r4, r7, r8
 80073e0:	1422      	asrs	r2, r4, #16
 80073e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80073e6:	b2a4      	uxth	r4, r4
 80073e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80073ec:	f84e 4b04 	str.w	r4, [lr], #4
 80073f0:	1417      	asrs	r7, r2, #16
 80073f2:	e7e0      	b.n	80073b6 <__mdiff+0xc6>
 80073f4:	3e01      	subs	r6, #1
 80073f6:	e7ea      	b.n	80073ce <__mdiff+0xde>
 80073f8:	080085bf 	.word	0x080085bf
 80073fc:	080085d0 	.word	0x080085d0

08007400 <__d2b>:
 8007400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007404:	4689      	mov	r9, r1
 8007406:	2101      	movs	r1, #1
 8007408:	ec57 6b10 	vmov	r6, r7, d0
 800740c:	4690      	mov	r8, r2
 800740e:	f7ff fcd5 	bl	8006dbc <_Balloc>
 8007412:	4604      	mov	r4, r0
 8007414:	b930      	cbnz	r0, 8007424 <__d2b+0x24>
 8007416:	4602      	mov	r2, r0
 8007418:	4b25      	ldr	r3, [pc, #148]	; (80074b0 <__d2b+0xb0>)
 800741a:	4826      	ldr	r0, [pc, #152]	; (80074b4 <__d2b+0xb4>)
 800741c:	f240 310a 	movw	r1, #778	; 0x30a
 8007420:	f000 fa70 	bl	8007904 <__assert_func>
 8007424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800742c:	bb35      	cbnz	r5, 800747c <__d2b+0x7c>
 800742e:	2e00      	cmp	r6, #0
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	d028      	beq.n	8007486 <__d2b+0x86>
 8007434:	4668      	mov	r0, sp
 8007436:	9600      	str	r6, [sp, #0]
 8007438:	f7ff fd8c 	bl	8006f54 <__lo0bits>
 800743c:	9900      	ldr	r1, [sp, #0]
 800743e:	b300      	cbz	r0, 8007482 <__d2b+0x82>
 8007440:	9a01      	ldr	r2, [sp, #4]
 8007442:	f1c0 0320 	rsb	r3, r0, #32
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	430b      	orrs	r3, r1
 800744c:	40c2      	lsrs	r2, r0
 800744e:	6163      	str	r3, [r4, #20]
 8007450:	9201      	str	r2, [sp, #4]
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	61a3      	str	r3, [r4, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	bf14      	ite	ne
 800745a:	2202      	movne	r2, #2
 800745c:	2201      	moveq	r2, #1
 800745e:	6122      	str	r2, [r4, #16]
 8007460:	b1d5      	cbz	r5, 8007498 <__d2b+0x98>
 8007462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007466:	4405      	add	r5, r0
 8007468:	f8c9 5000 	str.w	r5, [r9]
 800746c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007470:	f8c8 0000 	str.w	r0, [r8]
 8007474:	4620      	mov	r0, r4
 8007476:	b003      	add	sp, #12
 8007478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800747c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007480:	e7d5      	b.n	800742e <__d2b+0x2e>
 8007482:	6161      	str	r1, [r4, #20]
 8007484:	e7e5      	b.n	8007452 <__d2b+0x52>
 8007486:	a801      	add	r0, sp, #4
 8007488:	f7ff fd64 	bl	8006f54 <__lo0bits>
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	6163      	str	r3, [r4, #20]
 8007490:	2201      	movs	r2, #1
 8007492:	6122      	str	r2, [r4, #16]
 8007494:	3020      	adds	r0, #32
 8007496:	e7e3      	b.n	8007460 <__d2b+0x60>
 8007498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800749c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074a0:	f8c9 0000 	str.w	r0, [r9]
 80074a4:	6918      	ldr	r0, [r3, #16]
 80074a6:	f7ff fd35 	bl	8006f14 <__hi0bits>
 80074aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074ae:	e7df      	b.n	8007470 <__d2b+0x70>
 80074b0:	080085bf 	.word	0x080085bf
 80074b4:	080085d0 	.word	0x080085d0

080074b8 <_calloc_r>:
 80074b8:	b513      	push	{r0, r1, r4, lr}
 80074ba:	434a      	muls	r2, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	9201      	str	r2, [sp, #4]
 80074c0:	f000 f85a 	bl	8007578 <_malloc_r>
 80074c4:	4604      	mov	r4, r0
 80074c6:	b118      	cbz	r0, 80074d0 <_calloc_r+0x18>
 80074c8:	9a01      	ldr	r2, [sp, #4]
 80074ca:	2100      	movs	r1, #0
 80074cc:	f7fe f950 	bl	8005770 <memset>
 80074d0:	4620      	mov	r0, r4
 80074d2:	b002      	add	sp, #8
 80074d4:	bd10      	pop	{r4, pc}
	...

080074d8 <_free_r>:
 80074d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074da:	2900      	cmp	r1, #0
 80074dc:	d048      	beq.n	8007570 <_free_r+0x98>
 80074de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e2:	9001      	str	r0, [sp, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f1a1 0404 	sub.w	r4, r1, #4
 80074ea:	bfb8      	it	lt
 80074ec:	18e4      	addlt	r4, r4, r3
 80074ee:	f000 fa65 	bl	80079bc <__malloc_lock>
 80074f2:	4a20      	ldr	r2, [pc, #128]	; (8007574 <_free_r+0x9c>)
 80074f4:	9801      	ldr	r0, [sp, #4]
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	4615      	mov	r5, r2
 80074fa:	b933      	cbnz	r3, 800750a <_free_r+0x32>
 80074fc:	6063      	str	r3, [r4, #4]
 80074fe:	6014      	str	r4, [r2, #0]
 8007500:	b003      	add	sp, #12
 8007502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007506:	f000 ba5f 	b.w	80079c8 <__malloc_unlock>
 800750a:	42a3      	cmp	r3, r4
 800750c:	d90b      	bls.n	8007526 <_free_r+0x4e>
 800750e:	6821      	ldr	r1, [r4, #0]
 8007510:	1862      	adds	r2, r4, r1
 8007512:	4293      	cmp	r3, r2
 8007514:	bf04      	itt	eq
 8007516:	681a      	ldreq	r2, [r3, #0]
 8007518:	685b      	ldreq	r3, [r3, #4]
 800751a:	6063      	str	r3, [r4, #4]
 800751c:	bf04      	itt	eq
 800751e:	1852      	addeq	r2, r2, r1
 8007520:	6022      	streq	r2, [r4, #0]
 8007522:	602c      	str	r4, [r5, #0]
 8007524:	e7ec      	b.n	8007500 <_free_r+0x28>
 8007526:	461a      	mov	r2, r3
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	b10b      	cbz	r3, 8007530 <_free_r+0x58>
 800752c:	42a3      	cmp	r3, r4
 800752e:	d9fa      	bls.n	8007526 <_free_r+0x4e>
 8007530:	6811      	ldr	r1, [r2, #0]
 8007532:	1855      	adds	r5, r2, r1
 8007534:	42a5      	cmp	r5, r4
 8007536:	d10b      	bne.n	8007550 <_free_r+0x78>
 8007538:	6824      	ldr	r4, [r4, #0]
 800753a:	4421      	add	r1, r4
 800753c:	1854      	adds	r4, r2, r1
 800753e:	42a3      	cmp	r3, r4
 8007540:	6011      	str	r1, [r2, #0]
 8007542:	d1dd      	bne.n	8007500 <_free_r+0x28>
 8007544:	681c      	ldr	r4, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	6053      	str	r3, [r2, #4]
 800754a:	4421      	add	r1, r4
 800754c:	6011      	str	r1, [r2, #0]
 800754e:	e7d7      	b.n	8007500 <_free_r+0x28>
 8007550:	d902      	bls.n	8007558 <_free_r+0x80>
 8007552:	230c      	movs	r3, #12
 8007554:	6003      	str	r3, [r0, #0]
 8007556:	e7d3      	b.n	8007500 <_free_r+0x28>
 8007558:	6825      	ldr	r5, [r4, #0]
 800755a:	1961      	adds	r1, r4, r5
 800755c:	428b      	cmp	r3, r1
 800755e:	bf04      	itt	eq
 8007560:	6819      	ldreq	r1, [r3, #0]
 8007562:	685b      	ldreq	r3, [r3, #4]
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	bf04      	itt	eq
 8007568:	1949      	addeq	r1, r1, r5
 800756a:	6021      	streq	r1, [r4, #0]
 800756c:	6054      	str	r4, [r2, #4]
 800756e:	e7c7      	b.n	8007500 <_free_r+0x28>
 8007570:	b003      	add	sp, #12
 8007572:	bd30      	pop	{r4, r5, pc}
 8007574:	20000248 	.word	0x20000248

08007578 <_malloc_r>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	1ccd      	adds	r5, r1, #3
 800757c:	f025 0503 	bic.w	r5, r5, #3
 8007580:	3508      	adds	r5, #8
 8007582:	2d0c      	cmp	r5, #12
 8007584:	bf38      	it	cc
 8007586:	250c      	movcc	r5, #12
 8007588:	2d00      	cmp	r5, #0
 800758a:	4606      	mov	r6, r0
 800758c:	db01      	blt.n	8007592 <_malloc_r+0x1a>
 800758e:	42a9      	cmp	r1, r5
 8007590:	d903      	bls.n	800759a <_malloc_r+0x22>
 8007592:	230c      	movs	r3, #12
 8007594:	6033      	str	r3, [r6, #0]
 8007596:	2000      	movs	r0, #0
 8007598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759a:	f000 fa0f 	bl	80079bc <__malloc_lock>
 800759e:	4921      	ldr	r1, [pc, #132]	; (8007624 <_malloc_r+0xac>)
 80075a0:	680a      	ldr	r2, [r1, #0]
 80075a2:	4614      	mov	r4, r2
 80075a4:	b99c      	cbnz	r4, 80075ce <_malloc_r+0x56>
 80075a6:	4f20      	ldr	r7, [pc, #128]	; (8007628 <_malloc_r+0xb0>)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	b923      	cbnz	r3, 80075b6 <_malloc_r+0x3e>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4630      	mov	r0, r6
 80075b0:	f000 f998 	bl	80078e4 <_sbrk_r>
 80075b4:	6038      	str	r0, [r7, #0]
 80075b6:	4629      	mov	r1, r5
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 f993 	bl	80078e4 <_sbrk_r>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d123      	bne.n	800760a <_malloc_r+0x92>
 80075c2:	230c      	movs	r3, #12
 80075c4:	6033      	str	r3, [r6, #0]
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 f9fe 	bl	80079c8 <__malloc_unlock>
 80075cc:	e7e3      	b.n	8007596 <_malloc_r+0x1e>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	1b5b      	subs	r3, r3, r5
 80075d2:	d417      	bmi.n	8007604 <_malloc_r+0x8c>
 80075d4:	2b0b      	cmp	r3, #11
 80075d6:	d903      	bls.n	80075e0 <_malloc_r+0x68>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	441c      	add	r4, r3
 80075dc:	6025      	str	r5, [r4, #0]
 80075de:	e004      	b.n	80075ea <_malloc_r+0x72>
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	42a2      	cmp	r2, r4
 80075e4:	bf0c      	ite	eq
 80075e6:	600b      	streq	r3, [r1, #0]
 80075e8:	6053      	strne	r3, [r2, #4]
 80075ea:	4630      	mov	r0, r6
 80075ec:	f000 f9ec 	bl	80079c8 <__malloc_unlock>
 80075f0:	f104 000b 	add.w	r0, r4, #11
 80075f4:	1d23      	adds	r3, r4, #4
 80075f6:	f020 0007 	bic.w	r0, r0, #7
 80075fa:	1ac2      	subs	r2, r0, r3
 80075fc:	d0cc      	beq.n	8007598 <_malloc_r+0x20>
 80075fe:	1a1b      	subs	r3, r3, r0
 8007600:	50a3      	str	r3, [r4, r2]
 8007602:	e7c9      	b.n	8007598 <_malloc_r+0x20>
 8007604:	4622      	mov	r2, r4
 8007606:	6864      	ldr	r4, [r4, #4]
 8007608:	e7cc      	b.n	80075a4 <_malloc_r+0x2c>
 800760a:	1cc4      	adds	r4, r0, #3
 800760c:	f024 0403 	bic.w	r4, r4, #3
 8007610:	42a0      	cmp	r0, r4
 8007612:	d0e3      	beq.n	80075dc <_malloc_r+0x64>
 8007614:	1a21      	subs	r1, r4, r0
 8007616:	4630      	mov	r0, r6
 8007618:	f000 f964 	bl	80078e4 <_sbrk_r>
 800761c:	3001      	adds	r0, #1
 800761e:	d1dd      	bne.n	80075dc <_malloc_r+0x64>
 8007620:	e7cf      	b.n	80075c2 <_malloc_r+0x4a>
 8007622:	bf00      	nop
 8007624:	20000248 	.word	0x20000248
 8007628:	2000024c 	.word	0x2000024c

0800762c <__ssputs_r>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	688e      	ldr	r6, [r1, #8]
 8007632:	429e      	cmp	r6, r3
 8007634:	4682      	mov	sl, r0
 8007636:	460c      	mov	r4, r1
 8007638:	4690      	mov	r8, r2
 800763a:	461f      	mov	r7, r3
 800763c:	d838      	bhi.n	80076b0 <__ssputs_r+0x84>
 800763e:	898a      	ldrh	r2, [r1, #12]
 8007640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007644:	d032      	beq.n	80076ac <__ssputs_r+0x80>
 8007646:	6825      	ldr	r5, [r4, #0]
 8007648:	6909      	ldr	r1, [r1, #16]
 800764a:	eba5 0901 	sub.w	r9, r5, r1
 800764e:	6965      	ldr	r5, [r4, #20]
 8007650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007658:	3301      	adds	r3, #1
 800765a:	444b      	add	r3, r9
 800765c:	106d      	asrs	r5, r5, #1
 800765e:	429d      	cmp	r5, r3
 8007660:	bf38      	it	cc
 8007662:	461d      	movcc	r5, r3
 8007664:	0553      	lsls	r3, r2, #21
 8007666:	d531      	bpl.n	80076cc <__ssputs_r+0xa0>
 8007668:	4629      	mov	r1, r5
 800766a:	f7ff ff85 	bl	8007578 <_malloc_r>
 800766e:	4606      	mov	r6, r0
 8007670:	b950      	cbnz	r0, 8007688 <__ssputs_r+0x5c>
 8007672:	230c      	movs	r3, #12
 8007674:	f8ca 3000 	str.w	r3, [sl]
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007688:	6921      	ldr	r1, [r4, #16]
 800768a:	464a      	mov	r2, r9
 800768c:	f7ff fb88 	bl	8006da0 <memcpy>
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	6126      	str	r6, [r4, #16]
 800769e:	6165      	str	r5, [r4, #20]
 80076a0:	444e      	add	r6, r9
 80076a2:	eba5 0509 	sub.w	r5, r5, r9
 80076a6:	6026      	str	r6, [r4, #0]
 80076a8:	60a5      	str	r5, [r4, #8]
 80076aa:	463e      	mov	r6, r7
 80076ac:	42be      	cmp	r6, r7
 80076ae:	d900      	bls.n	80076b2 <__ssputs_r+0x86>
 80076b0:	463e      	mov	r6, r7
 80076b2:	4632      	mov	r2, r6
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	4641      	mov	r1, r8
 80076b8:	f000 f966 	bl	8007988 <memmove>
 80076bc:	68a3      	ldr	r3, [r4, #8]
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	1b9b      	subs	r3, r3, r6
 80076c2:	4432      	add	r2, r6
 80076c4:	60a3      	str	r3, [r4, #8]
 80076c6:	6022      	str	r2, [r4, #0]
 80076c8:	2000      	movs	r0, #0
 80076ca:	e7db      	b.n	8007684 <__ssputs_r+0x58>
 80076cc:	462a      	mov	r2, r5
 80076ce:	f000 f981 	bl	80079d4 <_realloc_r>
 80076d2:	4606      	mov	r6, r0
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d1e1      	bne.n	800769c <__ssputs_r+0x70>
 80076d8:	6921      	ldr	r1, [r4, #16]
 80076da:	4650      	mov	r0, sl
 80076dc:	f7ff fefc 	bl	80074d8 <_free_r>
 80076e0:	e7c7      	b.n	8007672 <__ssputs_r+0x46>
	...

080076e4 <_svfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4698      	mov	r8, r3
 80076ea:	898b      	ldrh	r3, [r1, #12]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	b09d      	sub	sp, #116	; 0x74
 80076f0:	4607      	mov	r7, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	4614      	mov	r4, r2
 80076f6:	d50e      	bpl.n	8007716 <_svfiprintf_r+0x32>
 80076f8:	690b      	ldr	r3, [r1, #16]
 80076fa:	b963      	cbnz	r3, 8007716 <_svfiprintf_r+0x32>
 80076fc:	2140      	movs	r1, #64	; 0x40
 80076fe:	f7ff ff3b 	bl	8007578 <_malloc_r>
 8007702:	6028      	str	r0, [r5, #0]
 8007704:	6128      	str	r0, [r5, #16]
 8007706:	b920      	cbnz	r0, 8007712 <_svfiprintf_r+0x2e>
 8007708:	230c      	movs	r3, #12
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	e0d1      	b.n	80078b6 <_svfiprintf_r+0x1d2>
 8007712:	2340      	movs	r3, #64	; 0x40
 8007714:	616b      	str	r3, [r5, #20]
 8007716:	2300      	movs	r3, #0
 8007718:	9309      	str	r3, [sp, #36]	; 0x24
 800771a:	2320      	movs	r3, #32
 800771c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007720:	f8cd 800c 	str.w	r8, [sp, #12]
 8007724:	2330      	movs	r3, #48	; 0x30
 8007726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078d0 <_svfiprintf_r+0x1ec>
 800772a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800772e:	f04f 0901 	mov.w	r9, #1
 8007732:	4623      	mov	r3, r4
 8007734:	469a      	mov	sl, r3
 8007736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773a:	b10a      	cbz	r2, 8007740 <_svfiprintf_r+0x5c>
 800773c:	2a25      	cmp	r2, #37	; 0x25
 800773e:	d1f9      	bne.n	8007734 <_svfiprintf_r+0x50>
 8007740:	ebba 0b04 	subs.w	fp, sl, r4
 8007744:	d00b      	beq.n	800775e <_svfiprintf_r+0x7a>
 8007746:	465b      	mov	r3, fp
 8007748:	4622      	mov	r2, r4
 800774a:	4629      	mov	r1, r5
 800774c:	4638      	mov	r0, r7
 800774e:	f7ff ff6d 	bl	800762c <__ssputs_r>
 8007752:	3001      	adds	r0, #1
 8007754:	f000 80aa 	beq.w	80078ac <_svfiprintf_r+0x1c8>
 8007758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800775a:	445a      	add	r2, fp
 800775c:	9209      	str	r2, [sp, #36]	; 0x24
 800775e:	f89a 3000 	ldrb.w	r3, [sl]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 80a2 	beq.w	80078ac <_svfiprintf_r+0x1c8>
 8007768:	2300      	movs	r3, #0
 800776a:	f04f 32ff 	mov.w	r2, #4294967295
 800776e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007772:	f10a 0a01 	add.w	sl, sl, #1
 8007776:	9304      	str	r3, [sp, #16]
 8007778:	9307      	str	r3, [sp, #28]
 800777a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800777e:	931a      	str	r3, [sp, #104]	; 0x68
 8007780:	4654      	mov	r4, sl
 8007782:	2205      	movs	r2, #5
 8007784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007788:	4851      	ldr	r0, [pc, #324]	; (80078d0 <_svfiprintf_r+0x1ec>)
 800778a:	f7f8 fd31 	bl	80001f0 <memchr>
 800778e:	9a04      	ldr	r2, [sp, #16]
 8007790:	b9d8      	cbnz	r0, 80077ca <_svfiprintf_r+0xe6>
 8007792:	06d0      	lsls	r0, r2, #27
 8007794:	bf44      	itt	mi
 8007796:	2320      	movmi	r3, #32
 8007798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800779c:	0711      	lsls	r1, r2, #28
 800779e:	bf44      	itt	mi
 80077a0:	232b      	movmi	r3, #43	; 0x2b
 80077a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a6:	f89a 3000 	ldrb.w	r3, [sl]
 80077aa:	2b2a      	cmp	r3, #42	; 0x2a
 80077ac:	d015      	beq.n	80077da <_svfiprintf_r+0xf6>
 80077ae:	9a07      	ldr	r2, [sp, #28]
 80077b0:	4654      	mov	r4, sl
 80077b2:	2000      	movs	r0, #0
 80077b4:	f04f 0c0a 	mov.w	ip, #10
 80077b8:	4621      	mov	r1, r4
 80077ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077be:	3b30      	subs	r3, #48	; 0x30
 80077c0:	2b09      	cmp	r3, #9
 80077c2:	d94e      	bls.n	8007862 <_svfiprintf_r+0x17e>
 80077c4:	b1b0      	cbz	r0, 80077f4 <_svfiprintf_r+0x110>
 80077c6:	9207      	str	r2, [sp, #28]
 80077c8:	e014      	b.n	80077f4 <_svfiprintf_r+0x110>
 80077ca:	eba0 0308 	sub.w	r3, r0, r8
 80077ce:	fa09 f303 	lsl.w	r3, r9, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	46a2      	mov	sl, r4
 80077d8:	e7d2      	b.n	8007780 <_svfiprintf_r+0x9c>
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	1d19      	adds	r1, r3, #4
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	9103      	str	r1, [sp, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bfbb      	ittet	lt
 80077e6:	425b      	neglt	r3, r3
 80077e8:	f042 0202 	orrlt.w	r2, r2, #2
 80077ec:	9307      	strge	r3, [sp, #28]
 80077ee:	9307      	strlt	r3, [sp, #28]
 80077f0:	bfb8      	it	lt
 80077f2:	9204      	strlt	r2, [sp, #16]
 80077f4:	7823      	ldrb	r3, [r4, #0]
 80077f6:	2b2e      	cmp	r3, #46	; 0x2e
 80077f8:	d10c      	bne.n	8007814 <_svfiprintf_r+0x130>
 80077fa:	7863      	ldrb	r3, [r4, #1]
 80077fc:	2b2a      	cmp	r3, #42	; 0x2a
 80077fe:	d135      	bne.n	800786c <_svfiprintf_r+0x188>
 8007800:	9b03      	ldr	r3, [sp, #12]
 8007802:	1d1a      	adds	r2, r3, #4
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	9203      	str	r2, [sp, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	bfb8      	it	lt
 800780c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007810:	3402      	adds	r4, #2
 8007812:	9305      	str	r3, [sp, #20]
 8007814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078e0 <_svfiprintf_r+0x1fc>
 8007818:	7821      	ldrb	r1, [r4, #0]
 800781a:	2203      	movs	r2, #3
 800781c:	4650      	mov	r0, sl
 800781e:	f7f8 fce7 	bl	80001f0 <memchr>
 8007822:	b140      	cbz	r0, 8007836 <_svfiprintf_r+0x152>
 8007824:	2340      	movs	r3, #64	; 0x40
 8007826:	eba0 000a 	sub.w	r0, r0, sl
 800782a:	fa03 f000 	lsl.w	r0, r3, r0
 800782e:	9b04      	ldr	r3, [sp, #16]
 8007830:	4303      	orrs	r3, r0
 8007832:	3401      	adds	r4, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783a:	4826      	ldr	r0, [pc, #152]	; (80078d4 <_svfiprintf_r+0x1f0>)
 800783c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007840:	2206      	movs	r2, #6
 8007842:	f7f8 fcd5 	bl	80001f0 <memchr>
 8007846:	2800      	cmp	r0, #0
 8007848:	d038      	beq.n	80078bc <_svfiprintf_r+0x1d8>
 800784a:	4b23      	ldr	r3, [pc, #140]	; (80078d8 <_svfiprintf_r+0x1f4>)
 800784c:	bb1b      	cbnz	r3, 8007896 <_svfiprintf_r+0x1b2>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	3307      	adds	r3, #7
 8007852:	f023 0307 	bic.w	r3, r3, #7
 8007856:	3308      	adds	r3, #8
 8007858:	9303      	str	r3, [sp, #12]
 800785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785c:	4433      	add	r3, r6
 800785e:	9309      	str	r3, [sp, #36]	; 0x24
 8007860:	e767      	b.n	8007732 <_svfiprintf_r+0x4e>
 8007862:	fb0c 3202 	mla	r2, ip, r2, r3
 8007866:	460c      	mov	r4, r1
 8007868:	2001      	movs	r0, #1
 800786a:	e7a5      	b.n	80077b8 <_svfiprintf_r+0xd4>
 800786c:	2300      	movs	r3, #0
 800786e:	3401      	adds	r4, #1
 8007870:	9305      	str	r3, [sp, #20]
 8007872:	4619      	mov	r1, r3
 8007874:	f04f 0c0a 	mov.w	ip, #10
 8007878:	4620      	mov	r0, r4
 800787a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787e:	3a30      	subs	r2, #48	; 0x30
 8007880:	2a09      	cmp	r2, #9
 8007882:	d903      	bls.n	800788c <_svfiprintf_r+0x1a8>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0c5      	beq.n	8007814 <_svfiprintf_r+0x130>
 8007888:	9105      	str	r1, [sp, #20]
 800788a:	e7c3      	b.n	8007814 <_svfiprintf_r+0x130>
 800788c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007890:	4604      	mov	r4, r0
 8007892:	2301      	movs	r3, #1
 8007894:	e7f0      	b.n	8007878 <_svfiprintf_r+0x194>
 8007896:	ab03      	add	r3, sp, #12
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	462a      	mov	r2, r5
 800789c:	4b0f      	ldr	r3, [pc, #60]	; (80078dc <_svfiprintf_r+0x1f8>)
 800789e:	a904      	add	r1, sp, #16
 80078a0:	4638      	mov	r0, r7
 80078a2:	f7fe f80d 	bl	80058c0 <_printf_float>
 80078a6:	1c42      	adds	r2, r0, #1
 80078a8:	4606      	mov	r6, r0
 80078aa:	d1d6      	bne.n	800785a <_svfiprintf_r+0x176>
 80078ac:	89ab      	ldrh	r3, [r5, #12]
 80078ae:	065b      	lsls	r3, r3, #25
 80078b0:	f53f af2c 	bmi.w	800770c <_svfiprintf_r+0x28>
 80078b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078b6:	b01d      	add	sp, #116	; 0x74
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	ab03      	add	r3, sp, #12
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	462a      	mov	r2, r5
 80078c2:	4b06      	ldr	r3, [pc, #24]	; (80078dc <_svfiprintf_r+0x1f8>)
 80078c4:	a904      	add	r1, sp, #16
 80078c6:	4638      	mov	r0, r7
 80078c8:	f7fe fa9e 	bl	8005e08 <_printf_i>
 80078cc:	e7eb      	b.n	80078a6 <_svfiprintf_r+0x1c2>
 80078ce:	bf00      	nop
 80078d0:	0800872c 	.word	0x0800872c
 80078d4:	08008736 	.word	0x08008736
 80078d8:	080058c1 	.word	0x080058c1
 80078dc:	0800762d 	.word	0x0800762d
 80078e0:	08008732 	.word	0x08008732

080078e4 <_sbrk_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d06      	ldr	r5, [pc, #24]	; (8007900 <_sbrk_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7fa fa58 	bl	8001da4 <_sbrk>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_sbrk_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_sbrk_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	200003c4 	.word	0x200003c4

08007904 <__assert_func>:
 8007904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007906:	4614      	mov	r4, r2
 8007908:	461a      	mov	r2, r3
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <__assert_func+0x2c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4605      	mov	r5, r0
 8007910:	68d8      	ldr	r0, [r3, #12]
 8007912:	b14c      	cbz	r4, 8007928 <__assert_func+0x24>
 8007914:	4b07      	ldr	r3, [pc, #28]	; (8007934 <__assert_func+0x30>)
 8007916:	9100      	str	r1, [sp, #0]
 8007918:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800791c:	4906      	ldr	r1, [pc, #24]	; (8007938 <__assert_func+0x34>)
 800791e:	462b      	mov	r3, r5
 8007920:	f000 f80e 	bl	8007940 <fiprintf>
 8007924:	f000 faa4 	bl	8007e70 <abort>
 8007928:	4b04      	ldr	r3, [pc, #16]	; (800793c <__assert_func+0x38>)
 800792a:	461c      	mov	r4, r3
 800792c:	e7f3      	b.n	8007916 <__assert_func+0x12>
 800792e:	bf00      	nop
 8007930:	2000000c 	.word	0x2000000c
 8007934:	0800873d 	.word	0x0800873d
 8007938:	0800874a 	.word	0x0800874a
 800793c:	08008778 	.word	0x08008778

08007940 <fiprintf>:
 8007940:	b40e      	push	{r1, r2, r3}
 8007942:	b503      	push	{r0, r1, lr}
 8007944:	4601      	mov	r1, r0
 8007946:	ab03      	add	r3, sp, #12
 8007948:	4805      	ldr	r0, [pc, #20]	; (8007960 <fiprintf+0x20>)
 800794a:	f853 2b04 	ldr.w	r2, [r3], #4
 800794e:	6800      	ldr	r0, [r0, #0]
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	f000 f88f 	bl	8007a74 <_vfiprintf_r>
 8007956:	b002      	add	sp, #8
 8007958:	f85d eb04 	ldr.w	lr, [sp], #4
 800795c:	b003      	add	sp, #12
 800795e:	4770      	bx	lr
 8007960:	2000000c 	.word	0x2000000c

08007964 <__ascii_mbtowc>:
 8007964:	b082      	sub	sp, #8
 8007966:	b901      	cbnz	r1, 800796a <__ascii_mbtowc+0x6>
 8007968:	a901      	add	r1, sp, #4
 800796a:	b142      	cbz	r2, 800797e <__ascii_mbtowc+0x1a>
 800796c:	b14b      	cbz	r3, 8007982 <__ascii_mbtowc+0x1e>
 800796e:	7813      	ldrb	r3, [r2, #0]
 8007970:	600b      	str	r3, [r1, #0]
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	1e10      	subs	r0, r2, #0
 8007976:	bf18      	it	ne
 8007978:	2001      	movne	r0, #1
 800797a:	b002      	add	sp, #8
 800797c:	4770      	bx	lr
 800797e:	4610      	mov	r0, r2
 8007980:	e7fb      	b.n	800797a <__ascii_mbtowc+0x16>
 8007982:	f06f 0001 	mvn.w	r0, #1
 8007986:	e7f8      	b.n	800797a <__ascii_mbtowc+0x16>

08007988 <memmove>:
 8007988:	4288      	cmp	r0, r1
 800798a:	b510      	push	{r4, lr}
 800798c:	eb01 0402 	add.w	r4, r1, r2
 8007990:	d902      	bls.n	8007998 <memmove+0x10>
 8007992:	4284      	cmp	r4, r0
 8007994:	4623      	mov	r3, r4
 8007996:	d807      	bhi.n	80079a8 <memmove+0x20>
 8007998:	1e43      	subs	r3, r0, #1
 800799a:	42a1      	cmp	r1, r4
 800799c:	d008      	beq.n	80079b0 <memmove+0x28>
 800799e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079a6:	e7f8      	b.n	800799a <memmove+0x12>
 80079a8:	4402      	add	r2, r0
 80079aa:	4601      	mov	r1, r0
 80079ac:	428a      	cmp	r2, r1
 80079ae:	d100      	bne.n	80079b2 <memmove+0x2a>
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079ba:	e7f7      	b.n	80079ac <memmove+0x24>

080079bc <__malloc_lock>:
 80079bc:	4801      	ldr	r0, [pc, #4]	; (80079c4 <__malloc_lock+0x8>)
 80079be:	f000 bc17 	b.w	80081f0 <__retarget_lock_acquire_recursive>
 80079c2:	bf00      	nop
 80079c4:	200003cc 	.word	0x200003cc

080079c8 <__malloc_unlock>:
 80079c8:	4801      	ldr	r0, [pc, #4]	; (80079d0 <__malloc_unlock+0x8>)
 80079ca:	f000 bc12 	b.w	80081f2 <__retarget_lock_release_recursive>
 80079ce:	bf00      	nop
 80079d0:	200003cc 	.word	0x200003cc

080079d4 <_realloc_r>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	4607      	mov	r7, r0
 80079d8:	4614      	mov	r4, r2
 80079da:	460e      	mov	r6, r1
 80079dc:	b921      	cbnz	r1, 80079e8 <_realloc_r+0x14>
 80079de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079e2:	4611      	mov	r1, r2
 80079e4:	f7ff bdc8 	b.w	8007578 <_malloc_r>
 80079e8:	b922      	cbnz	r2, 80079f4 <_realloc_r+0x20>
 80079ea:	f7ff fd75 	bl	80074d8 <_free_r>
 80079ee:	4625      	mov	r5, r4
 80079f0:	4628      	mov	r0, r5
 80079f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f4:	f000 fc62 	bl	80082bc <_malloc_usable_size_r>
 80079f8:	42a0      	cmp	r0, r4
 80079fa:	d20f      	bcs.n	8007a1c <_realloc_r+0x48>
 80079fc:	4621      	mov	r1, r4
 80079fe:	4638      	mov	r0, r7
 8007a00:	f7ff fdba 	bl	8007578 <_malloc_r>
 8007a04:	4605      	mov	r5, r0
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d0f2      	beq.n	80079f0 <_realloc_r+0x1c>
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	f7ff f9c7 	bl	8006da0 <memcpy>
 8007a12:	4631      	mov	r1, r6
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff fd5f 	bl	80074d8 <_free_r>
 8007a1a:	e7e9      	b.n	80079f0 <_realloc_r+0x1c>
 8007a1c:	4635      	mov	r5, r6
 8007a1e:	e7e7      	b.n	80079f0 <_realloc_r+0x1c>

08007a20 <__sfputc_r>:
 8007a20:	6893      	ldr	r3, [r2, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	b410      	push	{r4}
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	da08      	bge.n	8007a3e <__sfputc_r+0x1e>
 8007a2c:	6994      	ldr	r4, [r2, #24]
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	db01      	blt.n	8007a36 <__sfputc_r+0x16>
 8007a32:	290a      	cmp	r1, #10
 8007a34:	d103      	bne.n	8007a3e <__sfputc_r+0x1e>
 8007a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3a:	f000 b94b 	b.w	8007cd4 <__swbuf_r>
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	1c58      	adds	r0, r3, #1
 8007a42:	6010      	str	r0, [r2, #0]
 8007a44:	7019      	strb	r1, [r3, #0]
 8007a46:	4608      	mov	r0, r1
 8007a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <__sfputs_r>:
 8007a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	4614      	mov	r4, r2
 8007a56:	18d5      	adds	r5, r2, r3
 8007a58:	42ac      	cmp	r4, r5
 8007a5a:	d101      	bne.n	8007a60 <__sfputs_r+0x12>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e007      	b.n	8007a70 <__sfputs_r+0x22>
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	463a      	mov	r2, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ffda 	bl	8007a20 <__sfputc_r>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d1f3      	bne.n	8007a58 <__sfputs_r+0xa>
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a74 <_vfiprintf_r>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	460d      	mov	r5, r1
 8007a7a:	b09d      	sub	sp, #116	; 0x74
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4698      	mov	r8, r3
 8007a80:	4606      	mov	r6, r0
 8007a82:	b118      	cbz	r0, 8007a8c <_vfiprintf_r+0x18>
 8007a84:	6983      	ldr	r3, [r0, #24]
 8007a86:	b90b      	cbnz	r3, 8007a8c <_vfiprintf_r+0x18>
 8007a88:	f000 fb14 	bl	80080b4 <__sinit>
 8007a8c:	4b89      	ldr	r3, [pc, #548]	; (8007cb4 <_vfiprintf_r+0x240>)
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	d11b      	bne.n	8007aca <_vfiprintf_r+0x56>
 8007a92:	6875      	ldr	r5, [r6, #4]
 8007a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	d405      	bmi.n	8007aa6 <_vfiprintf_r+0x32>
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	059a      	lsls	r2, r3, #22
 8007a9e:	d402      	bmi.n	8007aa6 <_vfiprintf_r+0x32>
 8007aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa2:	f000 fba5 	bl	80081f0 <__retarget_lock_acquire_recursive>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	071b      	lsls	r3, r3, #28
 8007aaa:	d501      	bpl.n	8007ab0 <_vfiprintf_r+0x3c>
 8007aac:	692b      	ldr	r3, [r5, #16]
 8007aae:	b9eb      	cbnz	r3, 8007aec <_vfiprintf_r+0x78>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f000 f96e 	bl	8007d94 <__swsetup_r>
 8007ab8:	b1c0      	cbz	r0, 8007aec <_vfiprintf_r+0x78>
 8007aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007abc:	07dc      	lsls	r4, r3, #31
 8007abe:	d50e      	bpl.n	8007ade <_vfiprintf_r+0x6a>
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	b01d      	add	sp, #116	; 0x74
 8007ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aca:	4b7b      	ldr	r3, [pc, #492]	; (8007cb8 <_vfiprintf_r+0x244>)
 8007acc:	429d      	cmp	r5, r3
 8007ace:	d101      	bne.n	8007ad4 <_vfiprintf_r+0x60>
 8007ad0:	68b5      	ldr	r5, [r6, #8]
 8007ad2:	e7df      	b.n	8007a94 <_vfiprintf_r+0x20>
 8007ad4:	4b79      	ldr	r3, [pc, #484]	; (8007cbc <_vfiprintf_r+0x248>)
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	bf08      	it	eq
 8007ada:	68f5      	ldreq	r5, [r6, #12]
 8007adc:	e7da      	b.n	8007a94 <_vfiprintf_r+0x20>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	0598      	lsls	r0, r3, #22
 8007ae2:	d4ed      	bmi.n	8007ac0 <_vfiprintf_r+0x4c>
 8007ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae6:	f000 fb84 	bl	80081f2 <__retarget_lock_release_recursive>
 8007aea:	e7e9      	b.n	8007ac0 <_vfiprintf_r+0x4c>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9309      	str	r3, [sp, #36]	; 0x24
 8007af0:	2320      	movs	r3, #32
 8007af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afa:	2330      	movs	r3, #48	; 0x30
 8007afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cc0 <_vfiprintf_r+0x24c>
 8007b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b04:	f04f 0901 	mov.w	r9, #1
 8007b08:	4623      	mov	r3, r4
 8007b0a:	469a      	mov	sl, r3
 8007b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b10:	b10a      	cbz	r2, 8007b16 <_vfiprintf_r+0xa2>
 8007b12:	2a25      	cmp	r2, #37	; 0x25
 8007b14:	d1f9      	bne.n	8007b0a <_vfiprintf_r+0x96>
 8007b16:	ebba 0b04 	subs.w	fp, sl, r4
 8007b1a:	d00b      	beq.n	8007b34 <_vfiprintf_r+0xc0>
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ff93 	bl	8007a4e <__sfputs_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f000 80aa 	beq.w	8007c82 <_vfiprintf_r+0x20e>
 8007b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b30:	445a      	add	r2, fp
 8007b32:	9209      	str	r2, [sp, #36]	; 0x24
 8007b34:	f89a 3000 	ldrb.w	r3, [sl]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80a2 	beq.w	8007c82 <_vfiprintf_r+0x20e>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295
 8007b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b48:	f10a 0a01 	add.w	sl, sl, #1
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b54:	931a      	str	r3, [sp, #104]	; 0x68
 8007b56:	4654      	mov	r4, sl
 8007b58:	2205      	movs	r2, #5
 8007b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5e:	4858      	ldr	r0, [pc, #352]	; (8007cc0 <_vfiprintf_r+0x24c>)
 8007b60:	f7f8 fb46 	bl	80001f0 <memchr>
 8007b64:	9a04      	ldr	r2, [sp, #16]
 8007b66:	b9d8      	cbnz	r0, 8007ba0 <_vfiprintf_r+0x12c>
 8007b68:	06d1      	lsls	r1, r2, #27
 8007b6a:	bf44      	itt	mi
 8007b6c:	2320      	movmi	r3, #32
 8007b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b72:	0713      	lsls	r3, r2, #28
 8007b74:	bf44      	itt	mi
 8007b76:	232b      	movmi	r3, #43	; 0x2b
 8007b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b80:	2b2a      	cmp	r3, #42	; 0x2a
 8007b82:	d015      	beq.n	8007bb0 <_vfiprintf_r+0x13c>
 8007b84:	9a07      	ldr	r2, [sp, #28]
 8007b86:	4654      	mov	r4, sl
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f04f 0c0a 	mov.w	ip, #10
 8007b8e:	4621      	mov	r1, r4
 8007b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b94:	3b30      	subs	r3, #48	; 0x30
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	d94e      	bls.n	8007c38 <_vfiprintf_r+0x1c4>
 8007b9a:	b1b0      	cbz	r0, 8007bca <_vfiprintf_r+0x156>
 8007b9c:	9207      	str	r2, [sp, #28]
 8007b9e:	e014      	b.n	8007bca <_vfiprintf_r+0x156>
 8007ba0:	eba0 0308 	sub.w	r3, r0, r8
 8007ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	46a2      	mov	sl, r4
 8007bae:	e7d2      	b.n	8007b56 <_vfiprintf_r+0xe2>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	1d19      	adds	r1, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	9103      	str	r1, [sp, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bfbb      	ittet	lt
 8007bbc:	425b      	neglt	r3, r3
 8007bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007bc2:	9307      	strge	r3, [sp, #28]
 8007bc4:	9307      	strlt	r3, [sp, #28]
 8007bc6:	bfb8      	it	lt
 8007bc8:	9204      	strlt	r2, [sp, #16]
 8007bca:	7823      	ldrb	r3, [r4, #0]
 8007bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8007bce:	d10c      	bne.n	8007bea <_vfiprintf_r+0x176>
 8007bd0:	7863      	ldrb	r3, [r4, #1]
 8007bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd4:	d135      	bne.n	8007c42 <_vfiprintf_r+0x1ce>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	1d1a      	adds	r2, r3, #4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	9203      	str	r2, [sp, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfb8      	it	lt
 8007be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007be6:	3402      	adds	r4, #2
 8007be8:	9305      	str	r3, [sp, #20]
 8007bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cd0 <_vfiprintf_r+0x25c>
 8007bee:	7821      	ldrb	r1, [r4, #0]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	f7f8 fafc 	bl	80001f0 <memchr>
 8007bf8:	b140      	cbz	r0, 8007c0c <_vfiprintf_r+0x198>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	eba0 000a 	sub.w	r0, r0, sl
 8007c00:	fa03 f000 	lsl.w	r0, r3, r0
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	4303      	orrs	r3, r0
 8007c08:	3401      	adds	r4, #1
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c10:	482c      	ldr	r0, [pc, #176]	; (8007cc4 <_vfiprintf_r+0x250>)
 8007c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c16:	2206      	movs	r2, #6
 8007c18:	f7f8 faea 	bl	80001f0 <memchr>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d03f      	beq.n	8007ca0 <_vfiprintf_r+0x22c>
 8007c20:	4b29      	ldr	r3, [pc, #164]	; (8007cc8 <_vfiprintf_r+0x254>)
 8007c22:	bb1b      	cbnz	r3, 8007c6c <_vfiprintf_r+0x1f8>
 8007c24:	9b03      	ldr	r3, [sp, #12]
 8007c26:	3307      	adds	r3, #7
 8007c28:	f023 0307 	bic.w	r3, r3, #7
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	443b      	add	r3, r7
 8007c34:	9309      	str	r3, [sp, #36]	; 0x24
 8007c36:	e767      	b.n	8007b08 <_vfiprintf_r+0x94>
 8007c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	2001      	movs	r0, #1
 8007c40:	e7a5      	b.n	8007b8e <_vfiprintf_r+0x11a>
 8007c42:	2300      	movs	r3, #0
 8007c44:	3401      	adds	r4, #1
 8007c46:	9305      	str	r3, [sp, #20]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f04f 0c0a 	mov.w	ip, #10
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c54:	3a30      	subs	r2, #48	; 0x30
 8007c56:	2a09      	cmp	r2, #9
 8007c58:	d903      	bls.n	8007c62 <_vfiprintf_r+0x1ee>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0c5      	beq.n	8007bea <_vfiprintf_r+0x176>
 8007c5e:	9105      	str	r1, [sp, #20]
 8007c60:	e7c3      	b.n	8007bea <_vfiprintf_r+0x176>
 8007c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c66:	4604      	mov	r4, r0
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e7f0      	b.n	8007c4e <_vfiprintf_r+0x1da>
 8007c6c:	ab03      	add	r3, sp, #12
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	462a      	mov	r2, r5
 8007c72:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <_vfiprintf_r+0x258>)
 8007c74:	a904      	add	r1, sp, #16
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7fd fe22 	bl	80058c0 <_printf_float>
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	1c78      	adds	r0, r7, #1
 8007c80:	d1d6      	bne.n	8007c30 <_vfiprintf_r+0x1bc>
 8007c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c84:	07d9      	lsls	r1, r3, #31
 8007c86:	d405      	bmi.n	8007c94 <_vfiprintf_r+0x220>
 8007c88:	89ab      	ldrh	r3, [r5, #12]
 8007c8a:	059a      	lsls	r2, r3, #22
 8007c8c:	d402      	bmi.n	8007c94 <_vfiprintf_r+0x220>
 8007c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c90:	f000 faaf 	bl	80081f2 <__retarget_lock_release_recursive>
 8007c94:	89ab      	ldrh	r3, [r5, #12]
 8007c96:	065b      	lsls	r3, r3, #25
 8007c98:	f53f af12 	bmi.w	8007ac0 <_vfiprintf_r+0x4c>
 8007c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9e:	e711      	b.n	8007ac4 <_vfiprintf_r+0x50>
 8007ca0:	ab03      	add	r3, sp, #12
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_vfiprintf_r+0x258>)
 8007ca8:	a904      	add	r1, sp, #16
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7fe f8ac 	bl	8005e08 <_printf_i>
 8007cb0:	e7e4      	b.n	8007c7c <_vfiprintf_r+0x208>
 8007cb2:	bf00      	nop
 8007cb4:	080088a4 	.word	0x080088a4
 8007cb8:	080088c4 	.word	0x080088c4
 8007cbc:	08008884 	.word	0x08008884
 8007cc0:	0800872c 	.word	0x0800872c
 8007cc4:	08008736 	.word	0x08008736
 8007cc8:	080058c1 	.word	0x080058c1
 8007ccc:	08007a4f 	.word	0x08007a4f
 8007cd0:	08008732 	.word	0x08008732

08007cd4 <__swbuf_r>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	460e      	mov	r6, r1
 8007cd8:	4614      	mov	r4, r2
 8007cda:	4605      	mov	r5, r0
 8007cdc:	b118      	cbz	r0, 8007ce6 <__swbuf_r+0x12>
 8007cde:	6983      	ldr	r3, [r0, #24]
 8007ce0:	b90b      	cbnz	r3, 8007ce6 <__swbuf_r+0x12>
 8007ce2:	f000 f9e7 	bl	80080b4 <__sinit>
 8007ce6:	4b21      	ldr	r3, [pc, #132]	; (8007d6c <__swbuf_r+0x98>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	d12b      	bne.n	8007d44 <__swbuf_r+0x70>
 8007cec:	686c      	ldr	r4, [r5, #4]
 8007cee:	69a3      	ldr	r3, [r4, #24]
 8007cf0:	60a3      	str	r3, [r4, #8]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	071a      	lsls	r2, r3, #28
 8007cf6:	d52f      	bpl.n	8007d58 <__swbuf_r+0x84>
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	b36b      	cbz	r3, 8007d58 <__swbuf_r+0x84>
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	1ac0      	subs	r0, r0, r3
 8007d02:	6963      	ldr	r3, [r4, #20]
 8007d04:	b2f6      	uxtb	r6, r6
 8007d06:	4283      	cmp	r3, r0
 8007d08:	4637      	mov	r7, r6
 8007d0a:	dc04      	bgt.n	8007d16 <__swbuf_r+0x42>
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 f93c 	bl	8007f8c <_fflush_r>
 8007d14:	bb30      	cbnz	r0, 8007d64 <__swbuf_r+0x90>
 8007d16:	68a3      	ldr	r3, [r4, #8]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	60a3      	str	r3, [r4, #8]
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	6022      	str	r2, [r4, #0]
 8007d22:	701e      	strb	r6, [r3, #0]
 8007d24:	6963      	ldr	r3, [r4, #20]
 8007d26:	3001      	adds	r0, #1
 8007d28:	4283      	cmp	r3, r0
 8007d2a:	d004      	beq.n	8007d36 <__swbuf_r+0x62>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	07db      	lsls	r3, r3, #31
 8007d30:	d506      	bpl.n	8007d40 <__swbuf_r+0x6c>
 8007d32:	2e0a      	cmp	r6, #10
 8007d34:	d104      	bne.n	8007d40 <__swbuf_r+0x6c>
 8007d36:	4621      	mov	r1, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f000 f927 	bl	8007f8c <_fflush_r>
 8007d3e:	b988      	cbnz	r0, 8007d64 <__swbuf_r+0x90>
 8007d40:	4638      	mov	r0, r7
 8007d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <__swbuf_r+0x9c>)
 8007d46:	429c      	cmp	r4, r3
 8007d48:	d101      	bne.n	8007d4e <__swbuf_r+0x7a>
 8007d4a:	68ac      	ldr	r4, [r5, #8]
 8007d4c:	e7cf      	b.n	8007cee <__swbuf_r+0x1a>
 8007d4e:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <__swbuf_r+0xa0>)
 8007d50:	429c      	cmp	r4, r3
 8007d52:	bf08      	it	eq
 8007d54:	68ec      	ldreq	r4, [r5, #12]
 8007d56:	e7ca      	b.n	8007cee <__swbuf_r+0x1a>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 f81a 	bl	8007d94 <__swsetup_r>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d0cb      	beq.n	8007cfc <__swbuf_r+0x28>
 8007d64:	f04f 37ff 	mov.w	r7, #4294967295
 8007d68:	e7ea      	b.n	8007d40 <__swbuf_r+0x6c>
 8007d6a:	bf00      	nop
 8007d6c:	080088a4 	.word	0x080088a4
 8007d70:	080088c4 	.word	0x080088c4
 8007d74:	08008884 	.word	0x08008884

08007d78 <__ascii_wctomb>:
 8007d78:	b149      	cbz	r1, 8007d8e <__ascii_wctomb+0x16>
 8007d7a:	2aff      	cmp	r2, #255	; 0xff
 8007d7c:	bf85      	ittet	hi
 8007d7e:	238a      	movhi	r3, #138	; 0x8a
 8007d80:	6003      	strhi	r3, [r0, #0]
 8007d82:	700a      	strbls	r2, [r1, #0]
 8007d84:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d88:	bf98      	it	ls
 8007d8a:	2001      	movls	r0, #1
 8007d8c:	4770      	bx	lr
 8007d8e:	4608      	mov	r0, r1
 8007d90:	4770      	bx	lr
	...

08007d94 <__swsetup_r>:
 8007d94:	4b32      	ldr	r3, [pc, #200]	; (8007e60 <__swsetup_r+0xcc>)
 8007d96:	b570      	push	{r4, r5, r6, lr}
 8007d98:	681d      	ldr	r5, [r3, #0]
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	b125      	cbz	r5, 8007daa <__swsetup_r+0x16>
 8007da0:	69ab      	ldr	r3, [r5, #24]
 8007da2:	b913      	cbnz	r3, 8007daa <__swsetup_r+0x16>
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 f985 	bl	80080b4 <__sinit>
 8007daa:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <__swsetup_r+0xd0>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	d10f      	bne.n	8007dd0 <__swsetup_r+0x3c>
 8007db0:	686c      	ldr	r4, [r5, #4]
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007db8:	0719      	lsls	r1, r3, #28
 8007dba:	d42c      	bmi.n	8007e16 <__swsetup_r+0x82>
 8007dbc:	06dd      	lsls	r5, r3, #27
 8007dbe:	d411      	bmi.n	8007de4 <__swsetup_r+0x50>
 8007dc0:	2309      	movs	r3, #9
 8007dc2:	6033      	str	r3, [r6, #0]
 8007dc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	e03e      	b.n	8007e4e <__swsetup_r+0xba>
 8007dd0:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <__swsetup_r+0xd4>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	d101      	bne.n	8007dda <__swsetup_r+0x46>
 8007dd6:	68ac      	ldr	r4, [r5, #8]
 8007dd8:	e7eb      	b.n	8007db2 <__swsetup_r+0x1e>
 8007dda:	4b24      	ldr	r3, [pc, #144]	; (8007e6c <__swsetup_r+0xd8>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	bf08      	it	eq
 8007de0:	68ec      	ldreq	r4, [r5, #12]
 8007de2:	e7e6      	b.n	8007db2 <__swsetup_r+0x1e>
 8007de4:	0758      	lsls	r0, r3, #29
 8007de6:	d512      	bpl.n	8007e0e <__swsetup_r+0x7a>
 8007de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dea:	b141      	cbz	r1, 8007dfe <__swsetup_r+0x6a>
 8007dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df0:	4299      	cmp	r1, r3
 8007df2:	d002      	beq.n	8007dfa <__swsetup_r+0x66>
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7ff fb6f 	bl	80074d8 <_free_r>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	2300      	movs	r3, #0
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	f043 0308 	orr.w	r3, r3, #8
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	b94b      	cbnz	r3, 8007e2e <__swsetup_r+0x9a>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	d003      	beq.n	8007e2e <__swsetup_r+0x9a>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f000 fa07 	bl	800823c <__smakebuf_r>
 8007e2e:	89a0      	ldrh	r0, [r4, #12]
 8007e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e34:	f010 0301 	ands.w	r3, r0, #1
 8007e38:	d00a      	beq.n	8007e50 <__swsetup_r+0xbc>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60a3      	str	r3, [r4, #8]
 8007e3e:	6963      	ldr	r3, [r4, #20]
 8007e40:	425b      	negs	r3, r3
 8007e42:	61a3      	str	r3, [r4, #24]
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	b943      	cbnz	r3, 8007e5a <__swsetup_r+0xc6>
 8007e48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e4c:	d1ba      	bne.n	8007dc4 <__swsetup_r+0x30>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	0781      	lsls	r1, r0, #30
 8007e52:	bf58      	it	pl
 8007e54:	6963      	ldrpl	r3, [r4, #20]
 8007e56:	60a3      	str	r3, [r4, #8]
 8007e58:	e7f4      	b.n	8007e44 <__swsetup_r+0xb0>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e7f7      	b.n	8007e4e <__swsetup_r+0xba>
 8007e5e:	bf00      	nop
 8007e60:	2000000c 	.word	0x2000000c
 8007e64:	080088a4 	.word	0x080088a4
 8007e68:	080088c4 	.word	0x080088c4
 8007e6c:	08008884 	.word	0x08008884

08007e70 <abort>:
 8007e70:	b508      	push	{r3, lr}
 8007e72:	2006      	movs	r0, #6
 8007e74:	f000 fa52 	bl	800831c <raise>
 8007e78:	2001      	movs	r0, #1
 8007e7a:	f7f9 ff1b 	bl	8001cb4 <_exit>
	...

08007e80 <__sflush_r>:
 8007e80:	898a      	ldrh	r2, [r1, #12]
 8007e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e86:	4605      	mov	r5, r0
 8007e88:	0710      	lsls	r0, r2, #28
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	d458      	bmi.n	8007f40 <__sflush_r+0xc0>
 8007e8e:	684b      	ldr	r3, [r1, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dc05      	bgt.n	8007ea0 <__sflush_r+0x20>
 8007e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	dc02      	bgt.n	8007ea0 <__sflush_r+0x20>
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d0f9      	beq.n	8007e9a <__sflush_r+0x1a>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007eac:	682f      	ldr	r7, [r5, #0]
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	d032      	beq.n	8007f18 <__sflush_r+0x98>
 8007eb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	075a      	lsls	r2, r3, #29
 8007eb8:	d505      	bpl.n	8007ec6 <__sflush_r+0x46>
 8007eba:	6863      	ldr	r3, [r4, #4]
 8007ebc:	1ac0      	subs	r0, r0, r3
 8007ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ec0:	b10b      	cbz	r3, 8007ec6 <__sflush_r+0x46>
 8007ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ec4:	1ac0      	subs	r0, r0, r3
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ecc:	6a21      	ldr	r1, [r4, #32]
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b0      	blx	r6
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	d106      	bne.n	8007ee6 <__sflush_r+0x66>
 8007ed8:	6829      	ldr	r1, [r5, #0]
 8007eda:	291d      	cmp	r1, #29
 8007edc:	d82c      	bhi.n	8007f38 <__sflush_r+0xb8>
 8007ede:	4a2a      	ldr	r2, [pc, #168]	; (8007f88 <__sflush_r+0x108>)
 8007ee0:	40ca      	lsrs	r2, r1
 8007ee2:	07d6      	lsls	r6, r2, #31
 8007ee4:	d528      	bpl.n	8007f38 <__sflush_r+0xb8>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	6062      	str	r2, [r4, #4]
 8007eea:	04d9      	lsls	r1, r3, #19
 8007eec:	6922      	ldr	r2, [r4, #16]
 8007eee:	6022      	str	r2, [r4, #0]
 8007ef0:	d504      	bpl.n	8007efc <__sflush_r+0x7c>
 8007ef2:	1c42      	adds	r2, r0, #1
 8007ef4:	d101      	bne.n	8007efa <__sflush_r+0x7a>
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	b903      	cbnz	r3, 8007efc <__sflush_r+0x7c>
 8007efa:	6560      	str	r0, [r4, #84]	; 0x54
 8007efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007efe:	602f      	str	r7, [r5, #0]
 8007f00:	2900      	cmp	r1, #0
 8007f02:	d0ca      	beq.n	8007e9a <__sflush_r+0x1a>
 8007f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f08:	4299      	cmp	r1, r3
 8007f0a:	d002      	beq.n	8007f12 <__sflush_r+0x92>
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f7ff fae3 	bl	80074d8 <_free_r>
 8007f12:	2000      	movs	r0, #0
 8007f14:	6360      	str	r0, [r4, #52]	; 0x34
 8007f16:	e7c1      	b.n	8007e9c <__sflush_r+0x1c>
 8007f18:	6a21      	ldr	r1, [r4, #32]
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	47b0      	blx	r6
 8007f20:	1c41      	adds	r1, r0, #1
 8007f22:	d1c7      	bne.n	8007eb4 <__sflush_r+0x34>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0c4      	beq.n	8007eb4 <__sflush_r+0x34>
 8007f2a:	2b1d      	cmp	r3, #29
 8007f2c:	d001      	beq.n	8007f32 <__sflush_r+0xb2>
 8007f2e:	2b16      	cmp	r3, #22
 8007f30:	d101      	bne.n	8007f36 <__sflush_r+0xb6>
 8007f32:	602f      	str	r7, [r5, #0]
 8007f34:	e7b1      	b.n	8007e9a <__sflush_r+0x1a>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	e7ad      	b.n	8007e9c <__sflush_r+0x1c>
 8007f40:	690f      	ldr	r7, [r1, #16]
 8007f42:	2f00      	cmp	r7, #0
 8007f44:	d0a9      	beq.n	8007e9a <__sflush_r+0x1a>
 8007f46:	0793      	lsls	r3, r2, #30
 8007f48:	680e      	ldr	r6, [r1, #0]
 8007f4a:	bf08      	it	eq
 8007f4c:	694b      	ldreq	r3, [r1, #20]
 8007f4e:	600f      	str	r7, [r1, #0]
 8007f50:	bf18      	it	ne
 8007f52:	2300      	movne	r3, #0
 8007f54:	eba6 0807 	sub.w	r8, r6, r7
 8007f58:	608b      	str	r3, [r1, #8]
 8007f5a:	f1b8 0f00 	cmp.w	r8, #0
 8007f5e:	dd9c      	ble.n	8007e9a <__sflush_r+0x1a>
 8007f60:	6a21      	ldr	r1, [r4, #32]
 8007f62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f64:	4643      	mov	r3, r8
 8007f66:	463a      	mov	r2, r7
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b0      	blx	r6
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	dc06      	bgt.n	8007f7e <__sflush_r+0xfe>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	e78e      	b.n	8007e9c <__sflush_r+0x1c>
 8007f7e:	4407      	add	r7, r0
 8007f80:	eba8 0800 	sub.w	r8, r8, r0
 8007f84:	e7e9      	b.n	8007f5a <__sflush_r+0xda>
 8007f86:	bf00      	nop
 8007f88:	20400001 	.word	0x20400001

08007f8c <_fflush_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	690b      	ldr	r3, [r1, #16]
 8007f90:	4605      	mov	r5, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	b913      	cbnz	r3, 8007f9c <_fflush_r+0x10>
 8007f96:	2500      	movs	r5, #0
 8007f98:	4628      	mov	r0, r5
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	b118      	cbz	r0, 8007fa6 <_fflush_r+0x1a>
 8007f9e:	6983      	ldr	r3, [r0, #24]
 8007fa0:	b90b      	cbnz	r3, 8007fa6 <_fflush_r+0x1a>
 8007fa2:	f000 f887 	bl	80080b4 <__sinit>
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <_fflush_r+0x6c>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	d11b      	bne.n	8007fe4 <_fflush_r+0x58>
 8007fac:	686c      	ldr	r4, [r5, #4]
 8007fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0ef      	beq.n	8007f96 <_fflush_r+0xa>
 8007fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fb8:	07d0      	lsls	r0, r2, #31
 8007fba:	d404      	bmi.n	8007fc6 <_fflush_r+0x3a>
 8007fbc:	0599      	lsls	r1, r3, #22
 8007fbe:	d402      	bmi.n	8007fc6 <_fflush_r+0x3a>
 8007fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fc2:	f000 f915 	bl	80081f0 <__retarget_lock_acquire_recursive>
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	4621      	mov	r1, r4
 8007fca:	f7ff ff59 	bl	8007e80 <__sflush_r>
 8007fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fd0:	07da      	lsls	r2, r3, #31
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	d4e0      	bmi.n	8007f98 <_fflush_r+0xc>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	059b      	lsls	r3, r3, #22
 8007fda:	d4dd      	bmi.n	8007f98 <_fflush_r+0xc>
 8007fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fde:	f000 f908 	bl	80081f2 <__retarget_lock_release_recursive>
 8007fe2:	e7d9      	b.n	8007f98 <_fflush_r+0xc>
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <_fflush_r+0x70>)
 8007fe6:	429c      	cmp	r4, r3
 8007fe8:	d101      	bne.n	8007fee <_fflush_r+0x62>
 8007fea:	68ac      	ldr	r4, [r5, #8]
 8007fec:	e7df      	b.n	8007fae <_fflush_r+0x22>
 8007fee:	4b04      	ldr	r3, [pc, #16]	; (8008000 <_fflush_r+0x74>)
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	bf08      	it	eq
 8007ff4:	68ec      	ldreq	r4, [r5, #12]
 8007ff6:	e7da      	b.n	8007fae <_fflush_r+0x22>
 8007ff8:	080088a4 	.word	0x080088a4
 8007ffc:	080088c4 	.word	0x080088c4
 8008000:	08008884 	.word	0x08008884

08008004 <std>:
 8008004:	2300      	movs	r3, #0
 8008006:	b510      	push	{r4, lr}
 8008008:	4604      	mov	r4, r0
 800800a:	e9c0 3300 	strd	r3, r3, [r0]
 800800e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008012:	6083      	str	r3, [r0, #8]
 8008014:	8181      	strh	r1, [r0, #12]
 8008016:	6643      	str	r3, [r0, #100]	; 0x64
 8008018:	81c2      	strh	r2, [r0, #14]
 800801a:	6183      	str	r3, [r0, #24]
 800801c:	4619      	mov	r1, r3
 800801e:	2208      	movs	r2, #8
 8008020:	305c      	adds	r0, #92	; 0x5c
 8008022:	f7fd fba5 	bl	8005770 <memset>
 8008026:	4b05      	ldr	r3, [pc, #20]	; (800803c <std+0x38>)
 8008028:	6263      	str	r3, [r4, #36]	; 0x24
 800802a:	4b05      	ldr	r3, [pc, #20]	; (8008040 <std+0x3c>)
 800802c:	62a3      	str	r3, [r4, #40]	; 0x28
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <std+0x40>)
 8008030:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <std+0x44>)
 8008034:	6224      	str	r4, [r4, #32]
 8008036:	6323      	str	r3, [r4, #48]	; 0x30
 8008038:	bd10      	pop	{r4, pc}
 800803a:	bf00      	nop
 800803c:	08008355 	.word	0x08008355
 8008040:	08008377 	.word	0x08008377
 8008044:	080083af 	.word	0x080083af
 8008048:	080083d3 	.word	0x080083d3

0800804c <_cleanup_r>:
 800804c:	4901      	ldr	r1, [pc, #4]	; (8008054 <_cleanup_r+0x8>)
 800804e:	f000 b8af 	b.w	80081b0 <_fwalk_reent>
 8008052:	bf00      	nop
 8008054:	08007f8d 	.word	0x08007f8d

08008058 <__sfmoreglue>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	1e4a      	subs	r2, r1, #1
 800805c:	2568      	movs	r5, #104	; 0x68
 800805e:	4355      	muls	r5, r2
 8008060:	460e      	mov	r6, r1
 8008062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008066:	f7ff fa87 	bl	8007578 <_malloc_r>
 800806a:	4604      	mov	r4, r0
 800806c:	b140      	cbz	r0, 8008080 <__sfmoreglue+0x28>
 800806e:	2100      	movs	r1, #0
 8008070:	e9c0 1600 	strd	r1, r6, [r0]
 8008074:	300c      	adds	r0, #12
 8008076:	60a0      	str	r0, [r4, #8]
 8008078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800807c:	f7fd fb78 	bl	8005770 <memset>
 8008080:	4620      	mov	r0, r4
 8008082:	bd70      	pop	{r4, r5, r6, pc}

08008084 <__sfp_lock_acquire>:
 8008084:	4801      	ldr	r0, [pc, #4]	; (800808c <__sfp_lock_acquire+0x8>)
 8008086:	f000 b8b3 	b.w	80081f0 <__retarget_lock_acquire_recursive>
 800808a:	bf00      	nop
 800808c:	200003d0 	.word	0x200003d0

08008090 <__sfp_lock_release>:
 8008090:	4801      	ldr	r0, [pc, #4]	; (8008098 <__sfp_lock_release+0x8>)
 8008092:	f000 b8ae 	b.w	80081f2 <__retarget_lock_release_recursive>
 8008096:	bf00      	nop
 8008098:	200003d0 	.word	0x200003d0

0800809c <__sinit_lock_acquire>:
 800809c:	4801      	ldr	r0, [pc, #4]	; (80080a4 <__sinit_lock_acquire+0x8>)
 800809e:	f000 b8a7 	b.w	80081f0 <__retarget_lock_acquire_recursive>
 80080a2:	bf00      	nop
 80080a4:	200003cb 	.word	0x200003cb

080080a8 <__sinit_lock_release>:
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <__sinit_lock_release+0x8>)
 80080aa:	f000 b8a2 	b.w	80081f2 <__retarget_lock_release_recursive>
 80080ae:	bf00      	nop
 80080b0:	200003cb 	.word	0x200003cb

080080b4 <__sinit>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	4604      	mov	r4, r0
 80080b8:	f7ff fff0 	bl	800809c <__sinit_lock_acquire>
 80080bc:	69a3      	ldr	r3, [r4, #24]
 80080be:	b11b      	cbz	r3, 80080c8 <__sinit+0x14>
 80080c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c4:	f7ff bff0 	b.w	80080a8 <__sinit_lock_release>
 80080c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080cc:	6523      	str	r3, [r4, #80]	; 0x50
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <__sinit+0x68>)
 80080d0:	4a13      	ldr	r2, [pc, #76]	; (8008120 <__sinit+0x6c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	bf04      	itt	eq
 80080da:	2301      	moveq	r3, #1
 80080dc:	61a3      	streq	r3, [r4, #24]
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f820 	bl	8008124 <__sfp>
 80080e4:	6060      	str	r0, [r4, #4]
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 f81c 	bl	8008124 <__sfp>
 80080ec:	60a0      	str	r0, [r4, #8]
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 f818 	bl	8008124 <__sfp>
 80080f4:	2200      	movs	r2, #0
 80080f6:	60e0      	str	r0, [r4, #12]
 80080f8:	2104      	movs	r1, #4
 80080fa:	6860      	ldr	r0, [r4, #4]
 80080fc:	f7ff ff82 	bl	8008004 <std>
 8008100:	68a0      	ldr	r0, [r4, #8]
 8008102:	2201      	movs	r2, #1
 8008104:	2109      	movs	r1, #9
 8008106:	f7ff ff7d 	bl	8008004 <std>
 800810a:	68e0      	ldr	r0, [r4, #12]
 800810c:	2202      	movs	r2, #2
 800810e:	2112      	movs	r1, #18
 8008110:	f7ff ff78 	bl	8008004 <std>
 8008114:	2301      	movs	r3, #1
 8008116:	61a3      	str	r3, [r4, #24]
 8008118:	e7d2      	b.n	80080c0 <__sinit+0xc>
 800811a:	bf00      	nop
 800811c:	08008504 	.word	0x08008504
 8008120:	0800804d 	.word	0x0800804d

08008124 <__sfp>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	4607      	mov	r7, r0
 8008128:	f7ff ffac 	bl	8008084 <__sfp_lock_acquire>
 800812c:	4b1e      	ldr	r3, [pc, #120]	; (80081a8 <__sfp+0x84>)
 800812e:	681e      	ldr	r6, [r3, #0]
 8008130:	69b3      	ldr	r3, [r6, #24]
 8008132:	b913      	cbnz	r3, 800813a <__sfp+0x16>
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ffbd 	bl	80080b4 <__sinit>
 800813a:	3648      	adds	r6, #72	; 0x48
 800813c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008140:	3b01      	subs	r3, #1
 8008142:	d503      	bpl.n	800814c <__sfp+0x28>
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	b30b      	cbz	r3, 800818c <__sfp+0x68>
 8008148:	6836      	ldr	r6, [r6, #0]
 800814a:	e7f7      	b.n	800813c <__sfp+0x18>
 800814c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008150:	b9d5      	cbnz	r5, 8008188 <__sfp+0x64>
 8008152:	4b16      	ldr	r3, [pc, #88]	; (80081ac <__sfp+0x88>)
 8008154:	60e3      	str	r3, [r4, #12]
 8008156:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800815a:	6665      	str	r5, [r4, #100]	; 0x64
 800815c:	f000 f847 	bl	80081ee <__retarget_lock_init_recursive>
 8008160:	f7ff ff96 	bl	8008090 <__sfp_lock_release>
 8008164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800816c:	6025      	str	r5, [r4, #0]
 800816e:	61a5      	str	r5, [r4, #24]
 8008170:	2208      	movs	r2, #8
 8008172:	4629      	mov	r1, r5
 8008174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008178:	f7fd fafa 	bl	8005770 <memset>
 800817c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008184:	4620      	mov	r0, r4
 8008186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008188:	3468      	adds	r4, #104	; 0x68
 800818a:	e7d9      	b.n	8008140 <__sfp+0x1c>
 800818c:	2104      	movs	r1, #4
 800818e:	4638      	mov	r0, r7
 8008190:	f7ff ff62 	bl	8008058 <__sfmoreglue>
 8008194:	4604      	mov	r4, r0
 8008196:	6030      	str	r0, [r6, #0]
 8008198:	2800      	cmp	r0, #0
 800819a:	d1d5      	bne.n	8008148 <__sfp+0x24>
 800819c:	f7ff ff78 	bl	8008090 <__sfp_lock_release>
 80081a0:	230c      	movs	r3, #12
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	e7ee      	b.n	8008184 <__sfp+0x60>
 80081a6:	bf00      	nop
 80081a8:	08008504 	.word	0x08008504
 80081ac:	ffff0001 	.word	0xffff0001

080081b0 <_fwalk_reent>:
 80081b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4606      	mov	r6, r0
 80081b6:	4688      	mov	r8, r1
 80081b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081bc:	2700      	movs	r7, #0
 80081be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081c2:	f1b9 0901 	subs.w	r9, r9, #1
 80081c6:	d505      	bpl.n	80081d4 <_fwalk_reent+0x24>
 80081c8:	6824      	ldr	r4, [r4, #0]
 80081ca:	2c00      	cmp	r4, #0
 80081cc:	d1f7      	bne.n	80081be <_fwalk_reent+0xe>
 80081ce:	4638      	mov	r0, r7
 80081d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d4:	89ab      	ldrh	r3, [r5, #12]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d907      	bls.n	80081ea <_fwalk_reent+0x3a>
 80081da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081de:	3301      	adds	r3, #1
 80081e0:	d003      	beq.n	80081ea <_fwalk_reent+0x3a>
 80081e2:	4629      	mov	r1, r5
 80081e4:	4630      	mov	r0, r6
 80081e6:	47c0      	blx	r8
 80081e8:	4307      	orrs	r7, r0
 80081ea:	3568      	adds	r5, #104	; 0x68
 80081ec:	e7e9      	b.n	80081c2 <_fwalk_reent+0x12>

080081ee <__retarget_lock_init_recursive>:
 80081ee:	4770      	bx	lr

080081f0 <__retarget_lock_acquire_recursive>:
 80081f0:	4770      	bx	lr

080081f2 <__retarget_lock_release_recursive>:
 80081f2:	4770      	bx	lr

080081f4 <__swhatbuf_r>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	460e      	mov	r6, r1
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	2900      	cmp	r1, #0
 80081fe:	b096      	sub	sp, #88	; 0x58
 8008200:	4614      	mov	r4, r2
 8008202:	461d      	mov	r5, r3
 8008204:	da07      	bge.n	8008216 <__swhatbuf_r+0x22>
 8008206:	2300      	movs	r3, #0
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	89b3      	ldrh	r3, [r6, #12]
 800820c:	061a      	lsls	r2, r3, #24
 800820e:	d410      	bmi.n	8008232 <__swhatbuf_r+0x3e>
 8008210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008214:	e00e      	b.n	8008234 <__swhatbuf_r+0x40>
 8008216:	466a      	mov	r2, sp
 8008218:	f000 f902 	bl	8008420 <_fstat_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	dbf2      	blt.n	8008206 <__swhatbuf_r+0x12>
 8008220:	9a01      	ldr	r2, [sp, #4]
 8008222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800822a:	425a      	negs	r2, r3
 800822c:	415a      	adcs	r2, r3
 800822e:	602a      	str	r2, [r5, #0]
 8008230:	e7ee      	b.n	8008210 <__swhatbuf_r+0x1c>
 8008232:	2340      	movs	r3, #64	; 0x40
 8008234:	2000      	movs	r0, #0
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	b016      	add	sp, #88	; 0x58
 800823a:	bd70      	pop	{r4, r5, r6, pc}

0800823c <__smakebuf_r>:
 800823c:	898b      	ldrh	r3, [r1, #12]
 800823e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008240:	079d      	lsls	r5, r3, #30
 8008242:	4606      	mov	r6, r0
 8008244:	460c      	mov	r4, r1
 8008246:	d507      	bpl.n	8008258 <__smakebuf_r+0x1c>
 8008248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	6123      	str	r3, [r4, #16]
 8008250:	2301      	movs	r3, #1
 8008252:	6163      	str	r3, [r4, #20]
 8008254:	b002      	add	sp, #8
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	ab01      	add	r3, sp, #4
 800825a:	466a      	mov	r2, sp
 800825c:	f7ff ffca 	bl	80081f4 <__swhatbuf_r>
 8008260:	9900      	ldr	r1, [sp, #0]
 8008262:	4605      	mov	r5, r0
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff f987 	bl	8007578 <_malloc_r>
 800826a:	b948      	cbnz	r0, 8008280 <__smakebuf_r+0x44>
 800826c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008270:	059a      	lsls	r2, r3, #22
 8008272:	d4ef      	bmi.n	8008254 <__smakebuf_r+0x18>
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	f043 0302 	orr.w	r3, r3, #2
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	e7e3      	b.n	8008248 <__smakebuf_r+0xc>
 8008280:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <__smakebuf_r+0x7c>)
 8008282:	62b3      	str	r3, [r6, #40]	; 0x28
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	6020      	str	r0, [r4, #0]
 8008288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	9b00      	ldr	r3, [sp, #0]
 8008290:	6163      	str	r3, [r4, #20]
 8008292:	9b01      	ldr	r3, [sp, #4]
 8008294:	6120      	str	r0, [r4, #16]
 8008296:	b15b      	cbz	r3, 80082b0 <__smakebuf_r+0x74>
 8008298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829c:	4630      	mov	r0, r6
 800829e:	f000 f8d1 	bl	8008444 <_isatty_r>
 80082a2:	b128      	cbz	r0, 80082b0 <__smakebuf_r+0x74>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	89a0      	ldrh	r0, [r4, #12]
 80082b2:	4305      	orrs	r5, r0
 80082b4:	81a5      	strh	r5, [r4, #12]
 80082b6:	e7cd      	b.n	8008254 <__smakebuf_r+0x18>
 80082b8:	0800804d 	.word	0x0800804d

080082bc <_malloc_usable_size_r>:
 80082bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c0:	1f18      	subs	r0, r3, #4
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfbc      	itt	lt
 80082c6:	580b      	ldrlt	r3, [r1, r0]
 80082c8:	18c0      	addlt	r0, r0, r3
 80082ca:	4770      	bx	lr

080082cc <_raise_r>:
 80082cc:	291f      	cmp	r1, #31
 80082ce:	b538      	push	{r3, r4, r5, lr}
 80082d0:	4604      	mov	r4, r0
 80082d2:	460d      	mov	r5, r1
 80082d4:	d904      	bls.n	80082e0 <_raise_r+0x14>
 80082d6:	2316      	movs	r3, #22
 80082d8:	6003      	str	r3, [r0, #0]
 80082da:	f04f 30ff 	mov.w	r0, #4294967295
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082e2:	b112      	cbz	r2, 80082ea <_raise_r+0x1e>
 80082e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082e8:	b94b      	cbnz	r3, 80082fe <_raise_r+0x32>
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 f830 	bl	8008350 <_getpid_r>
 80082f0:	462a      	mov	r2, r5
 80082f2:	4601      	mov	r1, r0
 80082f4:	4620      	mov	r0, r4
 80082f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082fa:	f000 b817 	b.w	800832c <_kill_r>
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d00a      	beq.n	8008318 <_raise_r+0x4c>
 8008302:	1c59      	adds	r1, r3, #1
 8008304:	d103      	bne.n	800830e <_raise_r+0x42>
 8008306:	2316      	movs	r3, #22
 8008308:	6003      	str	r3, [r0, #0]
 800830a:	2001      	movs	r0, #1
 800830c:	e7e7      	b.n	80082de <_raise_r+0x12>
 800830e:	2400      	movs	r4, #0
 8008310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008314:	4628      	mov	r0, r5
 8008316:	4798      	blx	r3
 8008318:	2000      	movs	r0, #0
 800831a:	e7e0      	b.n	80082de <_raise_r+0x12>

0800831c <raise>:
 800831c:	4b02      	ldr	r3, [pc, #8]	; (8008328 <raise+0xc>)
 800831e:	4601      	mov	r1, r0
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	f7ff bfd3 	b.w	80082cc <_raise_r>
 8008326:	bf00      	nop
 8008328:	2000000c 	.word	0x2000000c

0800832c <_kill_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	; (800834c <_kill_r+0x20>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	4611      	mov	r1, r2
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	f7f9 fcab 	bl	8001c94 <_kill>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	d102      	bne.n	8008348 <_kill_r+0x1c>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	b103      	cbz	r3, 8008348 <_kill_r+0x1c>
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	bd38      	pop	{r3, r4, r5, pc}
 800834a:	bf00      	nop
 800834c:	200003c4 	.word	0x200003c4

08008350 <_getpid_r>:
 8008350:	f7f9 bc98 	b.w	8001c84 <_getpid>

08008354 <__sread>:
 8008354:	b510      	push	{r4, lr}
 8008356:	460c      	mov	r4, r1
 8008358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835c:	f000 f894 	bl	8008488 <_read_r>
 8008360:	2800      	cmp	r0, #0
 8008362:	bfab      	itete	ge
 8008364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008366:	89a3      	ldrhlt	r3, [r4, #12]
 8008368:	181b      	addge	r3, r3, r0
 800836a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800836e:	bfac      	ite	ge
 8008370:	6563      	strge	r3, [r4, #84]	; 0x54
 8008372:	81a3      	strhlt	r3, [r4, #12]
 8008374:	bd10      	pop	{r4, pc}

08008376 <__swrite>:
 8008376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837a:	461f      	mov	r7, r3
 800837c:	898b      	ldrh	r3, [r1, #12]
 800837e:	05db      	lsls	r3, r3, #23
 8008380:	4605      	mov	r5, r0
 8008382:	460c      	mov	r4, r1
 8008384:	4616      	mov	r6, r2
 8008386:	d505      	bpl.n	8008394 <__swrite+0x1e>
 8008388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838c:	2302      	movs	r3, #2
 800838e:	2200      	movs	r2, #0
 8008390:	f000 f868 	bl	8008464 <_lseek_r>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800839a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	4628      	mov	r0, r5
 80083a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083aa:	f000 b817 	b.w	80083dc <_write_r>

080083ae <__sseek>:
 80083ae:	b510      	push	{r4, lr}
 80083b0:	460c      	mov	r4, r1
 80083b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b6:	f000 f855 	bl	8008464 <_lseek_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	bf15      	itete	ne
 80083c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80083c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083ca:	81a3      	strheq	r3, [r4, #12]
 80083cc:	bf18      	it	ne
 80083ce:	81a3      	strhne	r3, [r4, #12]
 80083d0:	bd10      	pop	{r4, pc}

080083d2 <__sclose>:
 80083d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d6:	f000 b813 	b.w	8008400 <_close_r>
	...

080083dc <_write_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d07      	ldr	r5, [pc, #28]	; (80083fc <_write_r+0x20>)
 80083e0:	4604      	mov	r4, r0
 80083e2:	4608      	mov	r0, r1
 80083e4:	4611      	mov	r1, r2
 80083e6:	2200      	movs	r2, #0
 80083e8:	602a      	str	r2, [r5, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f7f9 fc89 	bl	8001d02 <_write>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_write_r+0x1e>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_write_r+0x1e>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	200003c4 	.word	0x200003c4

08008400 <_close_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4d06      	ldr	r5, [pc, #24]	; (800841c <_close_r+0x1c>)
 8008404:	2300      	movs	r3, #0
 8008406:	4604      	mov	r4, r0
 8008408:	4608      	mov	r0, r1
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	f7f9 fc95 	bl	8001d3a <_close>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_close_r+0x1a>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_close_r+0x1a>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	200003c4 	.word	0x200003c4

08008420 <_fstat_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d07      	ldr	r5, [pc, #28]	; (8008440 <_fstat_r+0x20>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	4611      	mov	r1, r2
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	f7f9 fc90 	bl	8001d52 <_fstat>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	d102      	bne.n	800843c <_fstat_r+0x1c>
 8008436:	682b      	ldr	r3, [r5, #0]
 8008438:	b103      	cbz	r3, 800843c <_fstat_r+0x1c>
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	bd38      	pop	{r3, r4, r5, pc}
 800843e:	bf00      	nop
 8008440:	200003c4 	.word	0x200003c4

08008444 <_isatty_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d06      	ldr	r5, [pc, #24]	; (8008460 <_isatty_r+0x1c>)
 8008448:	2300      	movs	r3, #0
 800844a:	4604      	mov	r4, r0
 800844c:	4608      	mov	r0, r1
 800844e:	602b      	str	r3, [r5, #0]
 8008450:	f7f9 fc8f 	bl	8001d72 <_isatty>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_isatty_r+0x1a>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_isatty_r+0x1a>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	200003c4 	.word	0x200003c4

08008464 <_lseek_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	; (8008484 <_lseek_r+0x20>)
 8008468:	4604      	mov	r4, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7f9 fc88 	bl	8001d88 <_lseek>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_lseek_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_lseek_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	200003c4 	.word	0x200003c4

08008488 <_read_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d07      	ldr	r5, [pc, #28]	; (80084a8 <_read_r+0x20>)
 800848c:	4604      	mov	r4, r0
 800848e:	4608      	mov	r0, r1
 8008490:	4611      	mov	r1, r2
 8008492:	2200      	movs	r2, #0
 8008494:	602a      	str	r2, [r5, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	f7f9 fc16 	bl	8001cc8 <_read>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_read_r+0x1e>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_read_r+0x1e>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	200003c4 	.word	0x200003c4

080084ac <_init>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr

080084b8 <_fini>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	bf00      	nop
 80084bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084be:	bc08      	pop	{r3}
 80084c0:	469e      	mov	lr, r3
 80084c2:	4770      	bx	lr
