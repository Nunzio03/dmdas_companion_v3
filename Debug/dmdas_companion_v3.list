
dmdas_companion_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08009890  08009890  00019890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cac  08009cac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009cac  08009cac  00019cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cb4  08009cb4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb4  08009cb4  00019cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cb8  08009cb8  00019cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001dc  08009e98  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08009e98  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157ea  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b41  00000000  00000000  000359f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00038538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  000395d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184d6  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a42  00000000  00000000  00052a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093267  00000000  00000000  000674c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa72f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c0  00000000  00000000  000fa784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009878 	.word	0x08009878

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009878 	.word	0x08009878

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b59      	ldr	r3, [pc, #356]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a58      	ldr	r2, [pc, #352]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b56      	ldr	r3, [pc, #344]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b52      	ldr	r3, [pc, #328]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a51      	ldr	r2, [pc, #324]	; (800112c <MX_GPIO_Init+0x19c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <MX_GPIO_Init+0x19c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	; (800112c <MX_GPIO_Init+0x19c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a4a      	ldr	r2, [pc, #296]	; (800112c <MX_GPIO_Init+0x19c>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b48      	ldr	r3, [pc, #288]	; (800112c <MX_GPIO_Init+0x19c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|HCSR_TRIG_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7108 	mov.w	r1, #544	; 0x220
 800101c:	4844      	ldr	r0, [pc, #272]	; (8001130 <MX_GPIO_Init+0x1a0>)
 800101e:	f002 fa71 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIRECTION_GPIO_Port, MOTOR_DIRECTION_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4842      	ldr	r0, [pc, #264]	; (8001134 <MX_GPIO_Init+0x1a4>)
 800102a:	f002 fa6b 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	4841      	ldr	r0, [pc, #260]	; (8001138 <MX_GPIO_Init+0x1a8>)
 8001034:	f002 fa66 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	483c      	ldr	r0, [pc, #240]	; (8001130 <MX_GPIO_Init+0x1a0>)
 8001040:	f002 fa60 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4837      	ldr	r0, [pc, #220]	; (8001138 <MX_GPIO_Init+0x1a8>)
 800105c:	f002 f8b6 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|HCSR_TRIG_Pin|MOTOR_ENABLE_Pin;
 8001060:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	482d      	ldr	r0, [pc, #180]	; (8001130 <MX_GPIO_Init+0x1a0>)
 800107a:	f002 f8a7 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_DIRECTION_Pin;
 800107e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4827      	ldr	r0, [pc, #156]	; (8001134 <MX_GPIO_Init+0x1a4>)
 8001098:	f002 f898 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_GPIO_Init+0x1a8>)
 80010b4:	f002 f88a 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_DIRECTION_Pin;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLC_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <MX_GPIO_Init+0x1a0>)
 80010ce:	f002 f87d 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLC_EN_MOT_Pin;
 80010d2:	2308      	movs	r3, #8
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLC_EN_MOT_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4813      	ldr	r0, [pc, #76]	; (8001134 <MX_GPIO_Init+0x1a4>)
 80010e6:	f002 f871 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = END_STOPmin_Pin|END_STOPmax_Pin;
 80010ea:	2330      	movs	r3, #48	; 0x30
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_GPIO_Init+0x1a4>)
 8001100:	f002 f864 	bl	80031cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	200a      	movs	r0, #10
 800110a:	f001 ff96 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800110e:	200a      	movs	r0, #10
 8001110:	f001 ffaf 	bl	8003072 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2017      	movs	r0, #23
 800111a:	f001 ff8e 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800111e:	2017      	movs	r0, #23
 8001120:	f001 ffa7 	bl	8003072 <HAL_NVIC_EnableIRQ>

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800

0800113c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_I2C1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C1_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_I2C1_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_I2C1_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_I2C1_Init+0x50>)
 800117a:	f002 fa0f 	bl	800359c <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 fce8 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000250 	.word	0x20000250
 8001190:	40005400 	.word	0x40005400
 8001194:	000186a0 	.word	0x000186a0

08001198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <HAL_I2C_MspInit+0x84>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12c      	bne.n	8001214 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e8:	2304      	movs	r3, #4
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <HAL_I2C_MspInit+0x8c>)
 80011f4:	f001 ffea 	bl	80031cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_I2C_MspInit+0x88>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_I2C_MspInit+0x88>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_I2C_MspInit+0x88>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400

08001228 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t time){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <delay_us+0x30>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3)<time);
 800123a:	bf00      	nop
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <delay_us+0x30>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3f9      	bcc.n	800123c <delay_us+0x14>
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000324 	.word	0x20000324

0800125c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	/* HC_SR04 INTERRUPT*/
	if(htim->Instance == TIM3){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a97      	ldr	r2, [pc, #604]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d16a      	bne.n	8001344 <HAL_TIM_IC_CaptureCallback+0xe8>
		uint16_t val = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4896      	ldr	r0, [pc, #600]	; (80014cc <HAL_TIM_IC_CaptureCallback+0x270>)
 8001272:	f004 fa03 	bl	800567c <HAL_TIM_ReadCapturedValue>
 8001276:	4603      	mov	r3, r0
 8001278:	81fb      	strh	r3, [r7, #14]
		if(!rised_hc){
 800127a:	4b95      	ldr	r3, [pc, #596]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_TIM_IC_CaptureCallback+0x54>
			dist_time1 = val;
 8001282:	4a94      	ldr	r2, [pc, #592]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	8013      	strh	r3, [r2, #0]
			rised_hc = 1;
 8001288:	4b91      	ldr	r3, [pc, #580]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020a 	bic.w	r2, r2, #10
 800129c:	621a      	str	r2, [r3, #32]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0202 	orr.w	r2, r2, #2
 80012ac:	621a      	str	r2, [r3, #32]
 80012ae:	e049      	b.n	8001344 <HAL_TIM_IC_CaptureCallback+0xe8>
		}else{ //falling
			if(val >= dist_time1){
 80012b0:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	89fa      	ldrh	r2, [r7, #14]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d318      	bcc.n	80012ec <HAL_TIM_IC_CaptureCallback+0x90>
				distance = (uint32_t)((val - dist_time1)*100/58.0); // decimi di millimetro
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	4a85      	ldr	r2, [pc, #532]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012be:	8812      	ldrh	r2, [r2, #0]
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	2264      	movs	r2, #100	; 0x64
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f933 	bl	8000534 <__aeabi_i2d>
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80012d4:	f7ff fac2 	bl	800085c <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc6a 	bl	8000bb8 <__aeabi_d2uiz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a7d      	ldr	r2, [pc, #500]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x280>)
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e01a      	b.n	8001322 <HAL_TIM_IC_CaptureCallback+0xc6>
			}else{
				distance = (uint32_t)(((0xffff-dist_time1)+val)*100/58.0);
 80012ec:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x278>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80012f4:	33ff      	adds	r3, #255	; 0xff
 80012f6:	89fa      	ldrh	r2, [r7, #14]
 80012f8:	4413      	add	r3, r2
 80012fa:	2264      	movs	r2, #100	; 0x64
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f917 	bl	8000534 <__aeabi_i2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800130c:	f7ff faa6 	bl	800085c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc4e 	bl	8000bb8 <__aeabi_d2uiz>
 800131c:	4603      	mov	r3, r0
 800131e:	4a6f      	ldr	r2, [pc, #444]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x280>)
 8001320:	6013      	str	r3, [r2, #0]
			}
			rised_hc = 0;
 8001322:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a1a      	ldr	r2, [r3, #32]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 020a 	bic.w	r2, r2, #10
 8001336:	621a      	str	r2, [r3, #32]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6a12      	ldr	r2, [r2, #32]
 8001342:	621a      	str	r2, [r3, #32]
		}

	}
	/*CUSTOM PROTOCOL INTERRUPT*/
	if(htim->Instance == TIM4){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a65      	ldr	r2, [pc, #404]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0x284>)
 800134a:	4293      	cmp	r3, r2
 800134c:	f040 80b7 	bne.w	80014be <HAL_TIM_IC_CaptureCallback+0x262>

		uint16_t val = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001350:	2100      	movs	r1, #0
 8001352:	4864      	ldr	r0, [pc, #400]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001354:	f004 f992 	bl	800567c <HAL_TIM_ReadCapturedValue>
 8001358:	4603      	mov	r3, r0
 800135a:	81bb      	strh	r3, [r7, #12]
		if(first_wave_rec==0){
 800135c:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d145      	bne.n	80013f0 <HAL_TIM_IC_CaptureCallback+0x194>

			if(!rised_plc){
 8001364:	4b61      	ldr	r3, [pc, #388]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d116      	bne.n	800139a <HAL_TIM_IC_CaptureCallback+0x13e>

				dur_time1 = val;
 800136c:	4a60      	ldr	r2, [pc, #384]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	8013      	strh	r3, [r2, #0]
				rised_plc = 1;
 8001372:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 020a 	bic.w	r2, r2, #10
 8001386:	621a      	str	r2, [r3, #32]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a1a      	ldr	r2, [r3, #32]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0202 	orr.w	r2, r2, #2
 8001396:	621a      	str	r2, [r3, #32]
		}


	}

}
 8001398:	e091      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
					if(val>=dur_time1){
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	89ba      	ldrh	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d307      	bcc.n	80013b4 <HAL_TIM_IC_CaptureCallback+0x158>
						dur1= val-dur_time1;
 80013a4:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	89ba      	ldrh	r2, [r7, #12]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	e008      	b.n	80013c6 <HAL_TIM_IC_CaptureCallback+0x16a>
						dur1= (0xffff-dur_time1)+val;
 80013b4:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	89ba      	ldrh	r2, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3b01      	subs	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013c4:	801a      	strh	r2, [r3, #0]
					rised_plc=0;
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a1a      	ldr	r2, [r3, #32]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 020a 	bic.w	r2, r2, #10
 80013da:	621a      	str	r2, [r3, #32]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a12      	ldr	r2, [r2, #32]
 80013e6:	621a      	str	r2, [r3, #32]
					first_wave_rec=1;
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	e066      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
				if(!rised_plc){
 80013f0:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d116      	bne.n	8001426 <HAL_TIM_IC_CaptureCallback+0x1ca>
					dur_time1 = val;
 80013f8:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	8013      	strh	r3, [r2, #0]
					rised_plc = 1;
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020a 	bic.w	r2, r2, #10
 8001412:	621a      	str	r2, [r3, #32]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a1a      	ldr	r2, [r3, #32]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0202 	orr.w	r2, r2, #2
 8001422:	621a      	str	r2, [r3, #32]
}
 8001424:	e04b      	b.n	80014be <HAL_TIM_IC_CaptureCallback+0x262>
						if(val>=dur_time1){
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	89ba      	ldrh	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d307      	bcc.n	8001440 <HAL_TIM_IC_CaptureCallback+0x1e4>
							dur2= val-dur_time1;
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	89ba      	ldrh	r2, [r7, #12]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	e008      	b.n	8001452 <HAL_TIM_IC_CaptureCallback+0x1f6>
							dur2= (0xffff-dur_time1)+val;
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	89ba      	ldrh	r2, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001450:	801a      	strh	r2, [r3, #0]
						rised_plc=0;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x290>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 020a 	bic.w	r2, r2, #10
 8001466:	621a      	str	r2, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a12      	ldr	r2, [r2, #32]
 8001472:	621a      	str	r2, [r3, #32]
						first_wave_rec=0;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
						dur1 = (dur1/15)-15;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b0f      	subs	r3, #15
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 800148e:	801a      	strh	r2, [r3, #0]
						dur2 = (dur2/15)-15;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b0f      	subs	r3, #15
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014a4:	801a      	strh	r2, [r3, #0]
						magic_number = (dur1<<5)|dur2;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80014bc:	801a      	strh	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40000400 	.word	0x40000400
 80014cc:	20000324 	.word	0x20000324
 80014d0:	200001f8 	.word	0x200001f8
 80014d4:	200001fa 	.word	0x200001fa
 80014d8:	404d0000 	.word	0x404d0000
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	40000800 	.word	0x40000800
 80014e4:	200002dc 	.word	0x200002dc
 80014e8:	20000201 	.word	0x20000201
 80014ec:	20000200 	.word	0x20000200
 80014f0:	20000206 	.word	0x20000206
 80014f4:	20000202 	.word	0x20000202
 80014f8:	20000204 	.word	0x20000204
 80014fc:	88888889 	.word	0x88888889
 8001500:	20000208 	.word	0x20000208

08001504 <HCSR04_trigger>:

void HCSR04_trigger(){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HCSR_TRIG_GPIO_Port, HCSR_TRIG_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <HCSR04_trigger+0x28>)
 8001510:	f001 fff8 	bl	8003504 <HAL_GPIO_WritePin>
	delay_us(10);
 8001514:	200a      	movs	r0, #10
 8001516:	f7ff fe87 	bl	8001228 <delay_us>
	HAL_GPIO_WritePin(HCSR_TRIG_GPIO_Port, HCSR_TRIG_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <HCSR04_trigger+0x28>)
 8001522:	f001 ffef 	bl	8003504 <HAL_GPIO_WritePin>

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020000 	.word	0x40020000

08001530 <move_stepper>:


void move_stepper(uint32_t steps){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_DIRECTION_GPIO_Port, MOTOR_DIRECTION_Pin,direction );
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <move_stepper+0x6c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <move_stepper+0x70>)
 8001544:	f001 ffde 	bl	8003504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <move_stepper+0x74>)
 8001550:	f001 ffd8 	bl	8003504 <HAL_GPIO_WritePin>
	 for (int i = 0; i <steps ; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e012      	b.n	8001580 <move_stepper+0x50>
	  {

		 HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <move_stepper+0x78>)
 8001560:	f001 ffd0 	bl	8003504 <HAL_GPIO_WritePin>
		 delay_us(30);
 8001564:	201e      	movs	r0, #30
 8001566:	f7ff fe5f 	bl	8001228 <delay_us>
		 HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	480e      	ldr	r0, [pc, #56]	; (80015a8 <move_stepper+0x78>)
 8001570:	f001 ffc8 	bl	8003504 <HAL_GPIO_WritePin>
		 delay_us(30);
 8001574:	201e      	movs	r0, #30
 8001576:	f7ff fe57 	bl	8001228 <delay_us>
	 for (int i = 0; i <steps ; i++)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3301      	adds	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8e8      	bhi.n	800155a <move_stepper+0x2a>
	  }
	 HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <move_stepper+0x74>)
 8001590:	f001 ffb8 	bl	8003504 <HAL_GPIO_WritePin>

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000210 	.word	0x20000210
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020800 	.word	0x40020800
 80015ac:	00000000 	.word	0x00000000

080015b0 <move_stepper_dec_mm>:

void move_stepper_dec_mm(uint32_t dec_mm){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	moving = 1;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <move_stepper_dec_mm+0x80>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
	if(direction){
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <move_stepper_dec_mm+0x84>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <move_stepper_dec_mm+0x2e>
		open_loop_motor_position -= dec_mm;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <move_stepper_dec_mm+0x88>)
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <move_stepper_dec_mm+0x88>)
 80015da:	801a      	strh	r2, [r3, #0]
 80015dc:	e00a      	b.n	80015f4 <move_stepper_dec_mm+0x44>
	}else{

		open_loop_motor_position += dec_mm;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <move_stepper_dec_mm+0x88>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <move_stepper_dec_mm+0x88>)
 80015f2:	801a      	strh	r2, [r3, #0]

	}
	move_stepper((uint32_t)(dec_mm/DMILLIM_USTEP_CONSTANT));
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7fe ff8d 	bl	8000514 <__aeabi_ui2d>
 80015fa:	a30b      	add	r3, pc, #44	; (adr r3, 8001628 <move_stepper_dec_mm+0x78>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7ff f92c 	bl	800085c <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff fad4 	bl	8000bb8 <__aeabi_d2uiz>
 8001610:	4603      	mov	r3, r0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff8c 	bl	8001530 <move_stepper>
	moving = 0;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <move_stepper_dec_mm+0x80>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	4c327ffc 	.word	0x4c327ffc
 800162c:	3f89a8c1 	.word	0x3f89a8c1
 8001630:	2000020a 	.word	0x2000020a
 8001634:	20000210 	.word	0x20000210
 8001638:	2000020c 	.word	0x2000020c

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001642:	f001 fb89 	bl	8002d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001646:	f000 f899 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164a:	f7ff fca1 	bl	8000f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800164e:	f001 fadf 	bl	8002c10 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001652:	f001 f9a7 	bl	80029a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001656:	f001 f9f9 	bl	8002a4c <MX_TIM4_Init>
  MX_I2C1_Init();
 800165a:	f7ff fd6f 	bl	800113c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800165e:	2100      	movs	r1, #0
 8001660:	4839      	ldr	r0, [pc, #228]	; (8001748 <main+0x10c>)
 8001662:	f003 fd4d 	bl	8005100 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001666:	2100      	movs	r1, #0
 8001668:	4838      	ldr	r0, [pc, #224]	; (800174c <main+0x110>)
 800166a:	f003 fd49 	bl	8005100 <HAL_TIM_IC_Start_IT>


  HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	4937      	ldr	r1, [pc, #220]	; (8001750 <main+0x114>)
 8001672:	4838      	ldr	r0, [pc, #224]	; (8001754 <main+0x118>)
 8001674:	f004 fb3c 	bl	8005cf0 <HAL_UART_Receive_IT>
  si5351_Init();
 8001678:	f000 fa74 	bl	8001b64 <si5351_Init>
  si5351_setupPLLInt(SI5351_PLL_A, 32);
 800167c:	2120      	movs	r1, #32
 800167e:	2000      	movs	r0, #0
 8001680:	f000 fb26 	bl	8001cd0 <si5351_setupPLLInt>
  si5351_setupMultisynth(0, SI5351_PLL_A, 4, 1000-4, 1);
 8001684:	2301      	movs	r3, #1
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f44f 7379 	mov.w	r3, #996	; 0x3e4
 800168c:	2204      	movs	r2, #4
 800168e:	2100      	movs	r1, #0
 8001690:	2000      	movs	r0, #0
 8001692:	f000 fd83 	bl	800219c <si5351_setupMultisynth>
  si5351_setupRdiv(0, SI5351_R_DIV_8);
 8001696:	2103      	movs	r1, #3
 8001698:	2000      	movs	r0, #0
 800169a:	f000 fcf7 	bl	800208c <si5351_setupRdiv>
  si5351_enableOutputs(0xFF);
 800169e:	20ff      	movs	r0, #255	; 0xff
 80016a0:	f000 ffb4 	bl	800260c <si5351_enableOutputs>

  if(HAL_GPIO_ReadPin(END_STOPmin_GPIO_Port, END_STOPmin_Pin)){
 80016a4:	2110      	movs	r1, #16
 80016a6:	482c      	ldr	r0, [pc, #176]	; (8001758 <main+0x11c>)
 80016a8:	f001 ff14 	bl	80034d4 <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <main+0x7c>
  		back_movement = 1;
 80016b2:	4b2a      	ldr	r3, [pc, #168]	; (800175c <main+0x120>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 80016b8:	2064      	movs	r0, #100	; 0x64
 80016ba:	f001 fbbf 	bl	8002e3c <HAL_Delay>
	  HCSR04_trigger();
 80016be:	f7ff ff21 	bl	8001504 <HCSR04_trigger>
	  move_mot = !HAL_GPIO_ReadPin(PLC_EN_MOT_GPIO_Port, PLC_EN_MOT_Pin);
 80016c2:	2108      	movs	r1, #8
 80016c4:	4824      	ldr	r0, [pc, #144]	; (8001758 <main+0x11c>)
 80016c6:	f001 ff05 	bl	80034d4 <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <main+0x124>)
 80016da:	701a      	strb	r2, [r3, #0]
	  direction = HAL_GPIO_ReadPin(PLC_DIRECTION_GPIO_Port, PLC_DIRECTION_Pin);
 80016dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e0:	4820      	ldr	r0, [pc, #128]	; (8001764 <main+0x128>)
 80016e2:	f001 fef7 	bl	80034d4 <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <main+0x12c>)
 80016ec:	701a      	strb	r2, [r3, #0]
	  if(move_mot&&(!motor_moved)){
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <main+0x124>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <main+0xd2>
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <main+0x130>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <main+0xd2>

		  move_stepper_dec_mm(magic_number);
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <main+0x134>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff54 	bl	80015b0 <move_stepper_dec_mm>
		  motor_moved = 1;
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <main+0x130>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
	  }

	  if(startup_movement){
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <main+0x138>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <main+0xe8>
		  direction =0;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <main+0x12c>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
		  move_stepper(600);
 800171c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001720:	f7ff ff06 	bl	8001530 <move_stepper>
	  }

	  if(back_movement){
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <main+0x120>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0c5      	beq.n	80016b8 <main+0x7c>
		  direction = 1;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <main+0x12c>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
		  move_stepper(600);
 8001732:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001736:	f7ff fefb 	bl	8001530 <move_stepper>
		  tare_counter += 600;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <main+0x13c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001742:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <main+0x13c>)
 8001744:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8001746:	e7b7      	b.n	80016b8 <main+0x7c>
 8001748:	20000324 	.word	0x20000324
 800174c:	200002dc 	.word	0x200002dc
 8001750:	20000219 	.word	0x20000219
 8001754:	2000036c 	.word	0x2000036c
 8001758:	40020400 	.word	0x40020400
 800175c:	20000218 	.word	0x20000218
 8001760:	2000020e 	.word	0x2000020e
 8001764:	40020000 	.word	0x40020000
 8001768:	20000210 	.word	0x20000210
 800176c:	2000020f 	.word	0x2000020f
 8001770:	20000208 	.word	0x20000208
 8001774:	20000211 	.word	0x20000211
 8001778:	20000214 	.word	0x20000214

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	; 0x50
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	2230      	movs	r2, #48	; 0x30
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f005 f954 	bl	8006a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <SystemClock_Config+0xcc>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a27      	ldr	r2, [pc, #156]	; (8001848 <SystemClock_Config+0xcc>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <SystemClock_Config+0xcc>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <SystemClock_Config+0xd0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <SystemClock_Config+0xd0>)
 80017ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <SystemClock_Config+0xd0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017dc:	2302      	movs	r3, #2
 80017de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e4:	2310      	movs	r3, #16
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e8:	2302      	movs	r3, #2
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017f0:	2308      	movs	r3, #8
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 80017f4:	233c      	movs	r3, #60	; 0x3c
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017fc:	2307      	movs	r3, #7
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001800:	f107 0320 	add.w	r3, r7, #32
 8001804:	4618      	mov	r0, r3
 8001806:	f002 ffb7 	bl	8004778 <HAL_RCC_OscConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001810:	f000 f9a2 	bl	8001b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001814:	230f      	movs	r3, #15
 8001816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001818:	2302      	movs	r3, #2
 800181a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f003 fa19 	bl	8004c68 <HAL_RCC_ClockConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800183c:	f000 f98c 	bl	8001b58 <Error_Handler>
  }
}
 8001840:	bf00      	nop
 8001842:	3750      	adds	r7, #80	; 0x50
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	40007000 	.word	0x40007000

08001850 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	switch(cmd_char){
 8001858:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <HAL_UART_RxCpltCallback+0x230>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3b61      	subs	r3, #97	; 0x61
 8001860:	2b13      	cmp	r3, #19
 8001862:	f200 80f8 	bhi.w	8001a56 <HAL_UART_RxCpltCallback+0x206>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <HAL_UART_RxCpltCallback+0x1c>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	080018bd 	.word	0x080018bd
 8001870:	0800193d 	.word	0x0800193d
 8001874:	08001981 	.word	0x08001981
 8001878:	080019b1 	.word	0x080019b1
 800187c:	08001a57 	.word	0x08001a57
 8001880:	08001a57 	.word	0x08001a57
 8001884:	080019ef 	.word	0x080019ef
 8001888:	08001a57 	.word	0x08001a57
 800188c:	08001a57 	.word	0x08001a57
 8001890:	08001a57 	.word	0x08001a57
 8001894:	08001a57 	.word	0x08001a57
 8001898:	08001a57 	.word	0x08001a57
 800189c:	08001a57 	.word	0x08001a57
 80018a0:	08001a57 	.word	0x08001a57
 80018a4:	08001a57 	.word	0x08001a57
 80018a8:	08001a57 	.word	0x08001a57
 80018ac:	08001a57 	.word	0x08001a57
 80018b0:	08001a57 	.word	0x08001a57
 80018b4:	08001a57 	.word	0x08001a57
 80018b8:	080019e7 	.word	0x080019e7
	case 'a':
		distance_avg=0;
 80018bc:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <HAL_UART_RxCpltCallback+0x234>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
		for(int k=0; k<10;k++){
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e00b      	b.n	80018e0 <HAL_UART_RxCpltCallback+0x90>
			distance_avg += distance;
 80018c8:	4b6e      	ldr	r3, [pc, #440]	; (8001a84 <HAL_UART_RxCpltCallback+0x234>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b6e      	ldr	r3, [pc, #440]	; (8001a88 <HAL_UART_RxCpltCallback+0x238>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <HAL_UART_RxCpltCallback+0x234>)
 80018d8:	601a      	str	r2, [r3, #0]
		for(int k=0; k<10;k++){
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3301      	adds	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	ddf0      	ble.n	80018c8 <HAL_UART_RxCpltCallback+0x78>
		}
		buffer[32] = "";
 80018e6:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b69      	ldr	r3, [pc, #420]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",(float)(distance_avg/100.0)); //media + conversione in millimetri
 80018f0:	4b64      	ldr	r3, [pc, #400]	; (8001a84 <HAL_UART_RxCpltCallback+0x234>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe1d 	bl	8000534 <__aeabi_i2d>
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <HAL_UART_RxCpltCallback+0x244>)
 8001900:	f7fe ffac 	bl	800085c <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f974 	bl	8000bf8 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe20 	bl	8000558 <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	495e      	ldr	r1, [pc, #376]	; (8001a98 <HAL_UART_RxCpltCallback+0x248>)
 800191e:	485c      	ldr	r0, [pc, #368]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001920:	f005 fcfc 	bl	800731c <siprintf>
 8001924:	4603      	mov	r3, r0
 8001926:	4a5d      	ldr	r2, [pc, #372]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 8001928:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800192a:	4b5c      	ldr	r3, [pc, #368]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4957      	ldr	r1, [pc, #348]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001934:	485a      	ldr	r0, [pc, #360]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 8001936:	f004 f996 	bl	8005c66 <HAL_UART_Transmit_IT>
		//HAL_TIM_Base_Stop_IT(&htim11);
		break;
 800193a:	e091      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 'b':
		buffer[32] = "";
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001942:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",open_loop_motor_position/10.0);
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_UART_RxCpltCallback+0x254>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fdf1 	bl	8000534 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b54      	ldr	r3, [pc, #336]	; (8001aa8 <HAL_UART_RxCpltCallback+0x258>)
 8001958:	f7fe ff80 	bl	800085c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	494d      	ldr	r1, [pc, #308]	; (8001a98 <HAL_UART_RxCpltCallback+0x248>)
 8001962:	484b      	ldr	r0, [pc, #300]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001964:	f005 fcda 	bl	800731c <siprintf>
 8001968:	4603      	mov	r3, r0
 800196a:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 800196c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800196e:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	4946      	ldr	r1, [pc, #280]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001978:	4849      	ldr	r0, [pc, #292]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 800197a:	f004 f974 	bl	8005c66 <HAL_UART_Transmit_IT>
		break;
 800197e:	e06f      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 'c':
		buffer[32] = "";
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001986:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%d\n",moving);
 800198a:	4b48      	ldr	r3, [pc, #288]	; (8001aac <HAL_UART_RxCpltCallback+0x25c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4947      	ldr	r1, [pc, #284]	; (8001ab0 <HAL_UART_RxCpltCallback+0x260>)
 8001992:	483f      	ldr	r0, [pc, #252]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001994:	f005 fcc2 	bl	800731c <siprintf>
 8001998:	4603      	mov	r3, r0
 800199a:	4a40      	ldr	r2, [pc, #256]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 800199c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 800199e:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	493a      	ldr	r1, [pc, #232]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019a8:	483d      	ldr	r0, [pc, #244]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 80019aa:	f004 f95c 	bl	8005c66 <HAL_UART_Transmit_IT>
		break;
 80019ae:	e057      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 'd':
		buffer[32] = "";
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%d\n",magic_number);
 80019ba:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_UART_RxCpltCallback+0x264>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	493b      	ldr	r1, [pc, #236]	; (8001ab0 <HAL_UART_RxCpltCallback+0x260>)
 80019c2:	4833      	ldr	r0, [pc, #204]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019c4:	f005 fcaa 	bl	800731c <siprintf>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 80019cc:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	492e      	ldr	r1, [pc, #184]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019d8:	4831      	ldr	r0, [pc, #196]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 80019da:	f004 f944 	bl	8005c66 <HAL_UART_Transmit_IT>
		motor_moved = 0;
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_UART_RxCpltCallback+0x268>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
		break;
 80019e4:	e03c      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 't':
		startup_movement = 1;
 80019e6:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_UART_RxCpltCallback+0x26c>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
		break;
 80019ec:	e038      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	case 'g':
		buffer[32] = "";
 80019ee:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_UART_RxCpltCallback+0x23c>)
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 80019f4:	f883 2020 	strb.w	r2, [r3, #32]
		dim = sprintf(buffer,"%f\n",(float)(tare_counter*DMILLIM_USTEP_CONSTANT/10));
 80019f8:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_UART_RxCpltCallback+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd89 	bl	8000514 <__aeabi_ui2d>
 8001a02:	a31d      	add	r3, pc, #116	; (adr r3, 8001a78 <HAL_UART_RxCpltCallback+0x228>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdfe 	bl	8000608 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_UART_RxCpltCallback+0x258>)
 8001a1a:	f7fe ff1f 	bl	800085c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f8e7 	bl	8000bf8 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd93 	bl	8000558 <__aeabi_f2d>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4918      	ldr	r1, [pc, #96]	; (8001a98 <HAL_UART_RxCpltCallback+0x248>)
 8001a38:	4815      	ldr	r0, [pc, #84]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001a3a:	f005 fc6f 	bl	800731c <siprintf>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 8001a42:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, buffer,dim);
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_RxCpltCallback+0x24c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4910      	ldr	r1, [pc, #64]	; (8001a90 <HAL_UART_RxCpltCallback+0x240>)
 8001a4e:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 8001a50:	f004 f909 	bl	8005c66 <HAL_UART_Transmit_IT>
		break;
 8001a54:	e004      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x210>
	default:

		HAL_UART_Transmit_IT(&huart2, "unknown char\n",13);
 8001a56:	220d      	movs	r2, #13
 8001a58:	491a      	ldr	r1, [pc, #104]	; (8001ac4 <HAL_UART_RxCpltCallback+0x274>)
 8001a5a:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 8001a5c:	f004 f903 	bl	8005c66 <HAL_UART_Transmit_IT>


	}

	HAL_UART_Receive_IT(&huart2, &cmd_char, 1);
 8001a60:	2201      	movs	r2, #1
 8001a62:	4907      	ldr	r1, [pc, #28]	; (8001a80 <HAL_UART_RxCpltCallback+0x230>)
 8001a64:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <HAL_UART_RxCpltCallback+0x250>)
 8001a66:	f004 f943 	bl	8005cf0 <HAL_UART_Receive_IT>
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	f3af 8000 	nop.w
 8001a78:	4c327ffc 	.word	0x4c327ffc
 8001a7c:	3f89a8c1 	.word	0x3f89a8c1
 8001a80:	20000219 	.word	0x20000219
 8001a84:	2000021c 	.word	0x2000021c
 8001a88:	200001fc 	.word	0x200001fc
 8001a8c:	08009890 	.word	0x08009890
 8001a90:	20000220 	.word	0x20000220
 8001a94:	40590000 	.word	0x40590000
 8001a98:	08009894 	.word	0x08009894
 8001a9c:	20000240 	.word	0x20000240
 8001aa0:	2000036c 	.word	0x2000036c
 8001aa4:	2000020c 	.word	0x2000020c
 8001aa8:	40240000 	.word	0x40240000
 8001aac:	2000020a 	.word	0x2000020a
 8001ab0:	08009898 	.word	0x08009898
 8001ab4:	20000208 	.word	0x20000208
 8001ab8:	2000020f 	.word	0x2000020f
 8001abc:	20000211 	.word	0x20000211
 8001ac0:	20000214 	.word	0x20000214
 8001ac4:	0800989c 	.word	0x0800989c

08001ac8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11){
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d103      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001ada:	2120      	movs	r1, #32
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001ade:	f001 fd2a 	bl	8003536 <HAL_GPIO_TogglePin>
	}

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40014800 	.word	0x40014800
 8001af0:	40020000 	.word	0x40020000

08001af4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == END_STOPmax_Pin){ // quando tocco l'endstop finale
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d10e      	bne.n	8001b22 <HAL_GPIO_EXTI_Callback+0x2e>
		startup_movement = 0;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, "9\n",2);
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	490d      	ldr	r1, [pc, #52]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x50>)
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b10:	f004 f8a9 	bl	8005c66 <HAL_UART_Transmit_IT>
		back_movement = 1;
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x58>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
		tare_counter = 0;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

	}else if(GPIO_Pin==END_STOPmin_Pin){ // quando tocco l'endstop minimo
		back_movement = 0;
		HAL_UART_Transmit_IT(&huart2, "0\n",2);
	}
}
 8001b20:	e00a      	b.n	8001b38 <HAL_GPIO_EXTI_Callback+0x44>
	}else if(GPIO_Pin==END_STOPmin_Pin){ // quando tocco l'endstop minimo
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d107      	bne.n	8001b38 <HAL_GPIO_EXTI_Callback+0x44>
		back_movement = 0;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, "0\n",2);
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4908      	ldr	r1, [pc, #32]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b34:	f004 f897 	bl	8005c66 <HAL_UART_Transmit_IT>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000211 	.word	0x20000211
 8001b44:	080098ac 	.word	0x080098ac
 8001b48:	2000036c 	.word	0x2000036c
 8001b4c:	20000218 	.word	0x20000218
 8001b50:	20000214 	.word	0x20000214
 8001b54:	080098b0 	.word	0x080098b0

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>
	...

08001b64 <si5351_Init>:
*/
/**************************************************************************/

extern I2C_HandleTypeDef hi2c1;
err_t si5351_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0

	/*!
	    Constructor
	*/
	  m_si5351Config.initialised     = 0;
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <si5351_Init+0x164>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
	  m_si5351Config.crystalFreq     = SI5351_CRYSTAL_FREQ_25MHZ;
 8001b70:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <si5351_Init+0x164>)
 8001b72:	4a56      	ldr	r2, [pc, #344]	; (8001ccc <si5351_Init+0x168>)
 8001b74:	605a      	str	r2, [r3, #4]
	  m_si5351Config.crystalLoad     = SI5351_CRYSTAL_LOAD_10PF;
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <si5351_Init+0x164>)
 8001b78:	22c0      	movs	r2, #192	; 0xc0
 8001b7a:	721a      	strb	r2, [r3, #8]
	  m_si5351Config.crystalPPM      = 30;
 8001b7c:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <si5351_Init+0x164>)
 8001b7e:	221e      	movs	r2, #30
 8001b80:	60da      	str	r2, [r3, #12]
	  m_si5351Config.plla_configured = 0;
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <si5351_Init+0x164>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	741a      	strb	r2, [r3, #16]
	  m_si5351Config.plla_freq       = 0;
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <si5351_Init+0x164>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
	  m_si5351Config.pllb_configured = 0;
 8001b8e:	4b4e      	ldr	r3, [pc, #312]	; (8001cc8 <si5351_Init+0x164>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	761a      	strb	r2, [r3, #24]
	  m_si5351Config.pllb_freq       = 0;
 8001b94:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <si5351_Init+0x164>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
	  m_si5351Config.ms0_freq		 = 0;
 8001b9a:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <si5351_Init+0x164>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
	  m_si5351Config.ms1_freq		 = 0;
 8001ba0:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <si5351_Init+0x164>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
	  m_si5351Config.ms2_freq		 = 0;
 8001ba6:	4b48      	ldr	r3, [pc, #288]	; (8001cc8 <si5351_Init+0x164>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
	  m_si5351Config.ms0_r_div		 = 0;
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <si5351_Init+0x164>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
	  m_si5351Config.ms1_r_div		 = 0;
 8001bb2:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <si5351_Init+0x164>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
	  m_si5351Config.ms2_r_div		 = 0;
 8001bb8:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <si5351_Init+0x164>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34



  /* Disable all outputs setting CLKx_DIS high */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF));
 8001bbe:	21ff      	movs	r1, #255	; 0xff
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 fd47 	bl	8002654 <si5351_write8>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	82fb      	strh	r3, [r7, #22]
 8001bca:	8afb      	ldrh	r3, [r7, #22]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <si5351_Init+0x70>
 8001bd0:	8afb      	ldrh	r3, [r7, #22]
 8001bd2:	e074      	b.n	8001cbe <si5351_Init+0x15a>

  /* Power down all output drivers */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, 0x80));
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	2010      	movs	r0, #16
 8001bd8:	f000 fd3c 	bl	8002654 <si5351_write8>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	82bb      	strh	r3, [r7, #20]
 8001be0:	8abb      	ldrh	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <si5351_Init+0x86>
 8001be6:	8abb      	ldrh	r3, [r7, #20]
 8001be8:	e069      	b.n	8001cbe <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, 0x80));
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	2011      	movs	r0, #17
 8001bee:	f000 fd31 	bl	8002654 <si5351_write8>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	827b      	strh	r3, [r7, #18]
 8001bf6:	8a7b      	ldrh	r3, [r7, #18]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <si5351_Init+0x9c>
 8001bfc:	8a7b      	ldrh	r3, [r7, #18]
 8001bfe:	e05e      	b.n	8001cbe <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, 0x80));
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	2012      	movs	r0, #18
 8001c04:	f000 fd26 	bl	8002654 <si5351_write8>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	823b      	strh	r3, [r7, #16]
 8001c0c:	8a3b      	ldrh	r3, [r7, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <si5351_Init+0xb2>
 8001c12:	8a3b      	ldrh	r3, [r7, #16]
 8001c14:	e053      	b.n	8001cbe <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_19_CLK3_CONTROL, 0x80));
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	2013      	movs	r0, #19
 8001c1a:	f000 fd1b 	bl	8002654 <si5351_write8>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	81fb      	strh	r3, [r7, #14]
 8001c22:	89fb      	ldrh	r3, [r7, #14]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <si5351_Init+0xc8>
 8001c28:	89fb      	ldrh	r3, [r7, #14]
 8001c2a:	e048      	b.n	8001cbe <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_20_CLK4_CONTROL, 0x80));
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	2014      	movs	r0, #20
 8001c30:	f000 fd10 	bl	8002654 <si5351_write8>
 8001c34:	4603      	mov	r3, r0
 8001c36:	81bb      	strh	r3, [r7, #12]
 8001c38:	89bb      	ldrh	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <si5351_Init+0xde>
 8001c3e:	89bb      	ldrh	r3, [r7, #12]
 8001c40:	e03d      	b.n	8001cbe <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_21_CLK5_CONTROL, 0x80));
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	2015      	movs	r0, #21
 8001c46:	f000 fd05 	bl	8002654 <si5351_write8>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	817b      	strh	r3, [r7, #10]
 8001c4e:	897b      	ldrh	r3, [r7, #10]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <si5351_Init+0xf4>
 8001c54:	897b      	ldrh	r3, [r7, #10]
 8001c56:	e032      	b.n	8001cbe <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_22_CLK6_CONTROL, 0x80));
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	2016      	movs	r0, #22
 8001c5c:	f000 fcfa 	bl	8002654 <si5351_write8>
 8001c60:	4603      	mov	r3, r0
 8001c62:	813b      	strh	r3, [r7, #8]
 8001c64:	893b      	ldrh	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <si5351_Init+0x10a>
 8001c6a:	893b      	ldrh	r3, [r7, #8]
 8001c6c:	e027      	b.n	8001cbe <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_23_CLK7_CONTROL, 0x80));
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	2017      	movs	r0, #23
 8001c72:	f000 fcef 	bl	8002654 <si5351_write8>
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <si5351_Init+0x120>
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	e01c      	b.n	8001cbe <si5351_Init+0x15a>

  /* Set the load capacitance for the XTAL */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <si5351_Init+0x164>)
 8001c86:	7a1b      	ldrb	r3, [r3, #8]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	20b7      	movs	r0, #183	; 0xb7
 8001c8c:	f000 fce2 	bl	8002654 <si5351_write8>
 8001c90:	4603      	mov	r3, r0
 8001c92:	80bb      	strh	r3, [r7, #4]
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <si5351_Init+0x13a>
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	e00f      	b.n	8001cbe <si5351_Init+0x15a>
     By default, ClockBuilder Desktop sets this register to 0x18.
     Note that the least significant nibble must remain 0x8, but the most
     significant nibble may be modified to suit your needs. */

  /* Reset the PLL config fields just in case we call init again */
  m_si5351Config.plla_configured = 0;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <si5351_Init+0x164>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	741a      	strb	r2, [r3, #16]
  m_si5351Config.plla_freq = 0;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <si5351_Init+0x164>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  m_si5351Config.pllb_configured = 0;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <si5351_Init+0x164>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	761a      	strb	r2, [r3, #24]
  m_si5351Config.pllb_freq = 0;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <si5351_Init+0x164>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]

  /* All done! */
  m_si5351Config.initialised = 1;
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <si5351_Init+0x164>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]

  return ERROR_NONE;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002a4 	.word	0x200002a4
 8001ccc:	017d7840 	.word	0x017d7840

08001cd0 <si5351_setupPLLInt>:
                - SI5351_PLL_B
  @param  mult  The PLL integer multiplier (must be between 15 and 90)
*/
/**************************************************************************/
err_t si5351_setupPLLInt(si5351PLL_t pll, uint8_t mult)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
  return si5351_setupPLL(pll, mult, 0, 1);
 8001ce0:	79b9      	ldrb	r1, [r7, #6]
 8001ce2:	79f8      	ldrb	r0, [r7, #7]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f000 f806 	bl	8001cf8 <si5351_setupPLL>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <si5351_setupPLL>:
/**************************************************************************/
err_t si5351_setupPLL(si5351PLL_t pll,
                                uint8_t     mult,
                                uint32_t    num,
                                uint32_t    denom)
{
 8001cf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cfc:	b08e      	sub	sp, #56	; 0x38
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* PLL config register P1 */
  uint32_t P2;	     /* PLL config register P2 */
  uint32_t P3;	     /* PLL config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 8001d0c:	4ba5      	ldr	r3, [pc, #660]	; (8001fa4 <si5351_setupPLL+0x2ac>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <si5351_setupPLL+0x20>
 8001d14:	2305      	movs	r3, #5
 8001d16:	e1b2      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT( (mult > 14) && (mult < 91), ERROR_INVALIDPARAMETER ); /* mult = 15..90 */
 8001d18:	7bbb      	ldrb	r3, [r7, #14]
 8001d1a:	2b0e      	cmp	r3, #14
 8001d1c:	d902      	bls.n	8001d24 <si5351_setupPLL+0x2c>
 8001d1e:	7bbb      	ldrb	r3, [r7, #14]
 8001d20:	2b5a      	cmp	r3, #90	; 0x5a
 8001d22:	d901      	bls.n	8001d28 <si5351_setupPLL+0x30>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e1aa      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT( denom > 0,                  ERROR_INVALIDPARAMETER ); /* Avoid divide by zero */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <si5351_setupPLL+0x3a>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e1a5      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d38:	d301      	bcc.n	8001d3e <si5351_setupPLL+0x46>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e19f      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d44:	d301      	bcc.n	8001d4a <si5351_setupPLL+0x52>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e199      	b.n	800207e <si5351_setupPLL+0x386>
   *
   * 	P3[19:0] = denom
   */

  /* Set the main PLL config registers */
  if (num == 0)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d108      	bne.n	8001d62 <si5351_setupPLL+0x6a>
  {
    /* Integer mode */
    P1 = 128 * mult - 512;
 8001d50:	7bbb      	ldrb	r3, [r7, #14]
 8001d52:	3b04      	subs	r3, #4
 8001d54:	01db      	lsls	r3, r3, #7
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
    P2 = num;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
    P3 = denom;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d60:	e074      	b.n	8001e4c <si5351_setupPLL+0x154>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * mult + floor(128 * ((float)num/(float)denom)) - 512);
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	01db      	lsls	r3, r3, #7
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbe4 	bl	8000534 <__aeabi_i2d>
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	460d      	mov	r5, r1
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	ee07 3a90 	vmov	s15, r3
 8001d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d88:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001fa8 <si5351_setupPLL+0x2b0>
 8001d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d90:	ee17 0a90 	vmov	r0, s15
 8001d94:	f7fe fbe0 	bl	8000558 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	ec43 2b10 	vmov	d0, r2, r3
 8001da0:	f007 fcea 	bl	8009778 <floor>
 8001da4:	ec53 2b10 	vmov	r2, r3, d0
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe fa76 	bl	800029c <__adddf3>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001dc0:	f7fe fa6a 	bl	8000298 <__aeabi_dsub>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fef4 	bl	8000bb8 <__aeabi_d2uiz>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb9b 	bl	8000514 <__aeabi_ui2d>
 8001dde:	4604      	mov	r4, r0
 8001de0:	460d      	mov	r5, r1
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fb96 	bl	8000514 <__aeabi_ui2d>
 8001de8:	4680      	mov	r8, r0
 8001dea:	4689      	mov	r9, r1
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e04:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001fa8 <si5351_setupPLL+0x2b0>
 8001e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0c:	ee17 0a90 	vmov	r0, s15
 8001e10:	f7fe fba2 	bl	8000558 <__aeabi_f2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	ec43 2b10 	vmov	d0, r2, r3
 8001e1c:	f007 fcac 	bl	8009778 <floor>
 8001e20:	ec53 2b10 	vmov	r2, r3, d0
 8001e24:	4640      	mov	r0, r8
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe fbee 	bl	8000608 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe fa30 	bl	8000298 <__aeabi_dsub>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe feba 	bl	8000bb8 <__aeabi_d2uiz>
 8001e44:	4603      	mov	r3, r0
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
    P3 = denom;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <si5351_setupPLL+0x15e>
 8001e52:	231a      	movs	r3, #26
 8001e54:	e000      	b.n	8001e58 <si5351_setupPLL+0x160>
 8001e56:	2322      	movs	r3, #34	; 0x22
 8001e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* The datasheet is a nightmare of typos and inconsistencies here! */
  ASSERT_STATUS( si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8));
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fbf3 	bl	8002654 <si5351_write8>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <si5351_setupPLL+0x184>
 8001e78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e7a:	e100      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+1, (P3 & 0x000000FF)));
 8001e7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fbe2 	bl	8002654 <si5351_write8>
 8001e90:	4603      	mov	r3, r0
 8001e92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <si5351_setupPLL+0x1a6>
 8001e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e9c:	e0ef      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16));
 8001e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f000 fbcd 	bl	8002654 <si5351_write8>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <si5351_setupPLL+0x1d0>
 8001ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ec6:	e0da      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8));
 8001ec8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ecc:	3303      	adds	r3, #3
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4610      	mov	r0, r2
 8001eda:	f000 fbbb 	bl	8002654 <si5351_write8>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <si5351_setupPLL+0x1f4>
 8001ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001eea:	e0c8      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+4, (P1 & 0x000000FF)));
 8001eec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fbaa 	bl	8002654 <si5351_write8>
 8001f00:	4603      	mov	r3, r0
 8001f02:	843b      	strh	r3, [r7, #32]
 8001f04:	8c3b      	ldrh	r3, [r7, #32]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <si5351_setupPLL+0x216>
 8001f0a:	8c3b      	ldrh	r3, [r7, #32]
 8001f0c:	e0b7      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) ));
 8001f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f12:	3305      	adds	r3, #5
 8001f14:	b2d8      	uxtb	r0, r3
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	0b1b      	lsrs	r3, r3, #12
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f023 030f 	bic.w	r3, r3, #15
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	f000 fb8e 	bl	8002654 <si5351_write8>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	83fb      	strh	r3, [r7, #30]
 8001f3c:	8bfb      	ldrh	r3, [r7, #30]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <si5351_setupPLL+0x24e>
 8001f42:	8bfb      	ldrh	r3, [r7, #30]
 8001f44:	e09b      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8));
 8001f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f4a:	3306      	adds	r3, #6
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f000 fb7c 	bl	8002654 <si5351_write8>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	83bb      	strh	r3, [r7, #28]
 8001f60:	8bbb      	ldrh	r3, [r7, #28]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <si5351_setupPLL+0x272>
 8001f66:	8bbb      	ldrh	r3, [r7, #28]
 8001f68:	e089      	b.n	800207e <si5351_setupPLL+0x386>
  ASSERT_STATUS( si5351_write8( baseaddr+7, (P2 & 0x000000FF)));
 8001f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f6e:	3307      	adds	r3, #7
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fb6b 	bl	8002654 <si5351_write8>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	837b      	strh	r3, [r7, #26]
 8001f82:	8b7b      	ldrh	r3, [r7, #26]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <si5351_setupPLL+0x294>
 8001f88:	8b7b      	ldrh	r3, [r7, #26]
 8001f8a:	e078      	b.n	800207e <si5351_setupPLL+0x386>

  /* Reset both PLLs */
  ASSERT_STATUS( si5351_write8(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) ));
 8001f8c:	21a0      	movs	r1, #160	; 0xa0
 8001f8e:	20b1      	movs	r0, #177	; 0xb1
 8001f90:	f000 fb60 	bl	8002654 <si5351_write8>
 8001f94:	4603      	mov	r3, r0
 8001f96:	833b      	strh	r3, [r7, #24]
 8001f98:	8b3b      	ldrh	r3, [r7, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <si5351_setupPLL+0x2b4>
 8001f9e:	8b3b      	ldrh	r3, [r7, #24]
 8001fa0:	e06d      	b.n	800207e <si5351_setupPLL+0x386>
 8001fa2:	bf00      	nop
 8001fa4:	200002a4 	.word	0x200002a4
 8001fa8:	43000000 	.word	0x43000000

  /* Store the frequency settings for use with the Multisynth helper */
  if (pll == SI5351_PLL_A)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d132      	bne.n	8002018 <si5351_setupPLL+0x320>
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <si5351_setupPLL+0x390>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001fdc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe8:	edc7 7a04 	vstr	s15, [r7, #16]
    m_si5351Config.plla_configured = 1; //true
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <si5351_setupPLL+0x390>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	741a      	strb	r2, [r3, #16]
    m_si5351Config.plla_freq = (uint32_t)floor(fvco);
 8001ff2:	6938      	ldr	r0, [r7, #16]
 8001ff4:	f7fe fab0 	bl	8000558 <__aeabi_f2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	ec43 2b10 	vmov	d0, r2, r3
 8002000:	f007 fbba 	bl	8009778 <floor>
 8002004:	ec53 2b10 	vmov	r2, r3, d0
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fdd4 	bl	8000bb8 <__aeabi_d2uiz>
 8002010:	4603      	mov	r3, r0
 8002012:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <si5351_setupPLL+0x390>)
 8002014:	6153      	str	r3, [r2, #20]
 8002016:	e031      	b.n	800207c <si5351_setupPLL+0x384>
  }
  else
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <si5351_setupPLL+0x390>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002042:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800204a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204e:	edc7 7a05 	vstr	s15, [r7, #20]
    m_si5351Config.pllb_configured = 1; //true
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <si5351_setupPLL+0x390>)
 8002054:	2201      	movs	r2, #1
 8002056:	761a      	strb	r2, [r3, #24]
    m_si5351Config.pllb_freq = (uint32_t)floor(fvco);
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7fe fa7d 	bl	8000558 <__aeabi_f2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	ec43 2b10 	vmov	d0, r2, r3
 8002066:	f007 fb87 	bl	8009778 <floor>
 800206a:	ec53 2b10 	vmov	r2, r3, d0
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fda1 	bl	8000bb8 <__aeabi_d2uiz>
 8002076:	4603      	mov	r3, r0
 8002078:	4a03      	ldr	r2, [pc, #12]	; (8002088 <si5351_setupPLL+0x390>)
 800207a:	61d3      	str	r3, [r2, #28]
  }

  return ERROR_NONE;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3738      	adds	r7, #56	; 0x38
 8002082:	46bd      	mov	sp, r7
 8002084:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002088:	200002a4 	.word	0x200002a4

0800208c <si5351_setupRdiv>:
{
  return si5351_setupMultisynth(output, pllSource, div, 0, 1);
}


err_t si5351_setupRdiv(uint8_t  output, si5351RDiv_t div) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	460a      	mov	r2, r1
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	4613      	mov	r3, r2
 800209a:	71bb      	strb	r3, [r7, #6]
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <si5351_setupRdiv+0x1a>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e073      	b.n	800218e <si5351_setupRdiv+0x102>
  
  uint8_t Rreg, regval, rDiv;

  if (output == 0) Rreg = SI5351_REGISTER_44_MULTISYNTH0_PARAMETERS_3;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <si5351_setupRdiv+0x24>
 80020ac:	232c      	movs	r3, #44	; 0x2c
 80020ae:	73fb      	strb	r3, [r7, #15]
  if (output == 1) Rreg = SI5351_REGISTER_52_MULTISYNTH1_PARAMETERS_3;
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <si5351_setupRdiv+0x2e>
 80020b6:	2334      	movs	r3, #52	; 0x34
 80020b8:	73fb      	strb	r3, [r7, #15]
  if (output == 2) Rreg = SI5351_REGISTER_60_MULTISYNTH2_PARAMETERS_3;
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d101      	bne.n	80020c4 <si5351_setupRdiv+0x38>
 80020c0:	233c      	movs	r3, #60	; 0x3c
 80020c2:	73fb      	strb	r3, [r7, #15]

  si5351_read8(Rreg, &regval);
 80020c4:	f107 020c 	add.w	r2, r7, #12
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 faeb 	bl	80026a8 <si5351_read8>

  regval &= 0x0F;
 80020d2:	7b3b      	ldrb	r3, [r7, #12]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	733b      	strb	r3, [r7, #12]
  uint8_t divider = div;
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	737b      	strb	r3, [r7, #13]
  divider &= 0x07;
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	737b      	strb	r3, [r7, #13]
  divider <<= 4;
 80020e8:	7b7b      	ldrb	r3, [r7, #13]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	737b      	strb	r3, [r7, #13]
  regval |= divider;
 80020ee:	7b3a      	ldrb	r2, [r7, #12]
 80020f0:	7b7b      	ldrb	r3, [r7, #13]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	733b      	strb	r3, [r7, #12]
  si5351_write8(Rreg, regval);
 80020f8:	7b3a      	ldrb	r2, [r7, #12]
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 faa8 	bl	8002654 <si5351_write8>

  switch(div)
 8002104:	79bb      	ldrb	r3, [r7, #6]
 8002106:	2b07      	cmp	r3, #7
 8002108:	d82a      	bhi.n	8002160 <si5351_setupRdiv+0xd4>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <si5351_setupRdiv+0x84>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002131 	.word	0x08002131
 8002114:	08002137 	.word	0x08002137
 8002118:	0800213d 	.word	0x0800213d
 800211c:	08002143 	.word	0x08002143
 8002120:	08002149 	.word	0x08002149
 8002124:	0800214f 	.word	0x0800214f
 8002128:	08002155 	.word	0x08002155
 800212c:	0800215b 	.word	0x0800215b
  {
  case 0:
  rDiv = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	73bb      	strb	r3, [r7, #14]
  break;
 8002134:	e014      	b.n	8002160 <si5351_setupRdiv+0xd4>

  case 1:
  rDiv = 2;
 8002136:	2302      	movs	r3, #2
 8002138:	73bb      	strb	r3, [r7, #14]
  break;
 800213a:	e011      	b.n	8002160 <si5351_setupRdiv+0xd4>

  case 2:
  rDiv = 4;
 800213c:	2304      	movs	r3, #4
 800213e:	73bb      	strb	r3, [r7, #14]
  break;
 8002140:	e00e      	b.n	8002160 <si5351_setupRdiv+0xd4>

  case 3:
  rDiv = 8;
 8002142:	2308      	movs	r3, #8
 8002144:	73bb      	strb	r3, [r7, #14]
  break;
 8002146:	e00b      	b.n	8002160 <si5351_setupRdiv+0xd4>

  case 4:
  rDiv = 16;
 8002148:	2310      	movs	r3, #16
 800214a:	73bb      	strb	r3, [r7, #14]
  break;
 800214c:	e008      	b.n	8002160 <si5351_setupRdiv+0xd4>

  case 5:
  rDiv = 32;
 800214e:	2320      	movs	r3, #32
 8002150:	73bb      	strb	r3, [r7, #14]
  break;
 8002152:	e005      	b.n	8002160 <si5351_setupRdiv+0xd4>

  case 6:
  rDiv = 64;
 8002154:	2340      	movs	r3, #64	; 0x40
 8002156:	73bb      	strb	r3, [r7, #14]
  break;
 8002158:	e002      	b.n	8002160 <si5351_setupRdiv+0xd4>

  case 7:
  rDiv = 128;
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	73bb      	strb	r3, [r7, #14]
  break;
 800215e:	bf00      	nop
  }

  switch(output)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d00e      	beq.n	8002184 <si5351_setupRdiv+0xf8>
 8002166:	2b02      	cmp	r3, #2
 8002168:	dc10      	bgt.n	800218c <si5351_setupRdiv+0x100>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <si5351_setupRdiv+0xe8>
 800216e:	2b01      	cmp	r3, #1
 8002170:	d004      	beq.n	800217c <si5351_setupRdiv+0xf0>
 8002172:	e00b      	b.n	800218c <si5351_setupRdiv+0x100>
  {
  case 0:
  m_si5351Config.ms0_r_div = rDiv;
 8002174:	7bbb      	ldrb	r3, [r7, #14]
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <si5351_setupRdiv+0x10c>)
 8002178:	62d3      	str	r3, [r2, #44]	; 0x2c
  break;
 800217a:	e007      	b.n	800218c <si5351_setupRdiv+0x100>

  case 1:
  m_si5351Config.ms1_r_div = rDiv;
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	4a06      	ldr	r2, [pc, #24]	; (8002198 <si5351_setupRdiv+0x10c>)
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
  break;
 8002182:	e003      	b.n	800218c <si5351_setupRdiv+0x100>

  case 2:
  m_si5351Config.ms2_r_div = rDiv;
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <si5351_setupRdiv+0x10c>)
 8002188:	6353      	str	r3, [r2, #52]	; 0x34
  break;
 800218a:	bf00      	nop
  }

  return ERROR_NONE;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200002a4 	.word	0x200002a4

0800219c <si5351_setupMultisynth>:
err_t si5351_setupMultisynth(uint8_t     output,
                                       si5351PLL_t pllSource,
                                       uint32_t    div,
                                       uint32_t    num,
                                       uint32_t    denom)
{
 800219c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021a0:	b08c      	sub	sp, #48	; 0x30
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	4603      	mov	r3, r0
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	460b      	mov	r3, r1
 80021ae:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* Multisynth config register P1 */
  uint32_t P2;	     /* Multisynth config register P2 */
  uint32_t P3;	     /* Multisynth config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 80021b0:	4bba      	ldr	r3, [pc, #744]	; (800249c <si5351_setupMultisynth+0x300>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <si5351_setupMultisynth+0x20>
 80021b8:	2305      	movs	r3, #5
 80021ba:	e21f      	b.n	80025fc <si5351_setupMultisynth+0x460>
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <si5351_setupMultisynth+0x2a>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e21a      	b.n	80025fc <si5351_setupMultisynth+0x460>
  //ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
  //ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */


  /* Make sure the requested PLL has been initialised */
  if (pllSource == SI5351_PLL_A)
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d103      	bne.n	80021d4 <si5351_setupMultisynth+0x38>
  {
    ASSERT(m_si5351Config.plla_configured = 1, ERROR_INVALIDPARAMETER);
 80021cc:	4bb3      	ldr	r3, [pc, #716]	; (800249c <si5351_setupMultisynth+0x300>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	741a      	strb	r2, [r3, #16]
 80021d2:	e002      	b.n	80021da <si5351_setupMultisynth+0x3e>
  }
  else
  {
    ASSERT(m_si5351Config.pllb_configured = 1, ERROR_INVALIDPARAMETER);
 80021d4:	4bb1      	ldr	r3, [pc, #708]	; (800249c <si5351_setupMultisynth+0x300>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	761a      	strb	r2, [r3, #24]
   *
   * 	P3[19:0] = c
   */

  /* Set the main PLL config registers */
  if (num == 0)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <si5351_setupMultisynth+0x5a>
  {
    /* Integer mode */
    P1 = 128 * div - 512;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80021e6:	3b04      	subs	r3, #4
 80021e8:	01db      	lsls	r3, r3, #7
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    P2 = num;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
    P3 = denom;
 80021f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	e074      	b.n	80022e0 <si5351_setupMultisynth+0x144>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * div + floor(128 * ((float)num/(float)denom)) - 512);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	01db      	lsls	r3, r3, #7
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f98a 	bl	8000514 <__aeabi_ui2d>
 8002200:	4604      	mov	r4, r0
 8002202:	460d      	mov	r5, r1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800220e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80024a0 <si5351_setupMultisynth+0x304>
 8002220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002224:	ee17 0a90 	vmov	r0, s15
 8002228:	f7fe f996 	bl	8000558 <__aeabi_f2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	ec43 2b10 	vmov	d0, r2, r3
 8002234:	f007 faa0 	bl	8009778 <floor>
 8002238:	ec53 2b10 	vmov	r2, r3, d0
 800223c:	4620      	mov	r0, r4
 800223e:	4629      	mov	r1, r5
 8002240:	f7fe f82c 	bl	800029c <__adddf3>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002254:	f7fe f820 	bl	8000298 <__aeabi_dsub>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fcaa 	bl	8000bb8 <__aeabi_d2uiz>
 8002264:	4603      	mov	r3, r0
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	01db      	lsls	r3, r3, #7
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f951 	bl	8000514 <__aeabi_ui2d>
 8002272:	4604      	mov	r4, r0
 8002274:	460d      	mov	r5, r1
 8002276:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002278:	f7fe f94c 	bl	8000514 <__aeabi_ui2d>
 800227c:	4680      	mov	r8, r0
 800227e:	4689      	mov	r9, r1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002298:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80024a0 <si5351_setupMultisynth+0x304>
 800229c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a0:	ee17 0a90 	vmov	r0, s15
 80022a4:	f7fe f958 	bl	8000558 <__aeabi_f2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	ec43 2b10 	vmov	d0, r2, r3
 80022b0:	f007 fa62 	bl	8009778 <floor>
 80022b4:	ec53 2b10 	vmov	r2, r3, d0
 80022b8:	4640      	mov	r0, r8
 80022ba:	4649      	mov	r1, r9
 80022bc:	f7fe f9a4 	bl	8000608 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4620      	mov	r0, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	f7fd ffe6 	bl	8000298 <__aeabi_dsub>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fc70 	bl	8000bb8 <__aeabi_d2uiz>
 80022d8:	4603      	mov	r3, r0
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
    P3 = denom;
 80022dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  switch (output)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d00e      	beq.n	800230a <si5351_setupMultisynth+0x16e>
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	dc10      	bgt.n	8002312 <si5351_setupMultisynth+0x176>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <si5351_setupMultisynth+0x15e>
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d004      	beq.n	8002302 <si5351_setupMultisynth+0x166>
 80022f8:	e00b      	b.n	8002312 <si5351_setupMultisynth+0x176>
  {
    case 0:
      baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 80022fa:	232a      	movs	r3, #42	; 0x2a
 80022fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      break;
 8002300:	e007      	b.n	8002312 <si5351_setupMultisynth+0x176>
    case 1:
      baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 8002302:	2332      	movs	r3, #50	; 0x32
 8002304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      break;
 8002308:	e003      	b.n	8002312 <si5351_setupMultisynth+0x176>
    case 2:
      baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800230a:	233a      	movs	r3, #58	; 0x3a
 800230c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      break;
 8002310:	bf00      	nop
  }

  /* Set the MSx config registers */
  si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	b2da      	uxtb	r2, r3
 8002318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f998 	bl	8002654 <si5351_write8>
  si5351_write8( baseaddr+1, (P3 & 0x000000FF));
 8002324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002328:	3301      	adds	r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f98e 	bl	8002654 <si5351_write8>
  si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16);	/* ToDo: Add DIVBY4 (>150MHz) and R0 support (<500kHz) later */
 8002338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800233c:	3302      	adds	r3, #2
 800233e:	b2da      	uxtb	r2, r3
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	0c1b      	lsrs	r3, r3, #16
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f000 f980 	bl	8002654 <si5351_write8>
  si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8);
 8002354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002358:	3303      	adds	r3, #3
 800235a:	b2da      	uxtb	r2, r3
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f000 f975 	bl	8002654 <si5351_write8>
  si5351_write8( baseaddr+4, (P1 & 0x000000FF));
 800236a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800236e:	3304      	adds	r3, #4
 8002370:	b2db      	uxtb	r3, r3
 8002372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f96b 	bl	8002654 <si5351_write8>
  si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) );
 800237e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002382:	3305      	adds	r3, #5
 8002384:	b2d8      	uxtb	r0, r3
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	0b1b      	lsrs	r3, r3, #12
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f023 030f 	bic.w	r3, r3, #15
 8002390:	b2da      	uxtb	r2, r3
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	f000 f956 	bl	8002654 <si5351_write8>
  si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8);
 80023a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023ac:	3306      	adds	r3, #6
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f000 f94b 	bl	8002654 <si5351_write8>
  si5351_write8( baseaddr+7, (P2 & 0x000000FF));
 80023be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023c2:	3307      	adds	r3, #7
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f941 	bl	8002654 <si5351_write8>


  if (pllSource == SI5351_PLL_A)
 80023d2:	7bbb      	ldrb	r3, [r7, #14]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d165      	bne.n	80024a4 <si5351_setupMultisynth+0x308>
  {
          float fvco = m_si5351Config.plla_freq / (div + ( (float)num / (float)denom ));
 80023d8:	4b30      	ldr	r3, [pc, #192]	; (800249c <si5351_setupMultisynth+0x300>)
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 5a67 	vcvt.f32.u32	s11, s15
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002402:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800240e:	edc7 7a06 	vstr	s15, [r7, #24]
          switch (output)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d02d      	beq.n	8002474 <si5351_setupMultisynth+0x2d8>
 8002418:	2b02      	cmp	r3, #2
 800241a:	f300 80a3 	bgt.w	8002564 <si5351_setupMultisynth+0x3c8>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <si5351_setupMultisynth+0x28c>
 8002422:	2b01      	cmp	r3, #1
 8002424:	d013      	beq.n	800244e <si5351_setupMultisynth+0x2b2>
 8002426:	e09d      	b.n	8002564 <si5351_setupMultisynth+0x3c8>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 8002428:	69b8      	ldr	r0, [r7, #24]
 800242a:	f7fe f895 	bl	8000558 <__aeabi_f2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	ec43 2b10 	vmov	d0, r2, r3
 8002436:	f007 f99f 	bl	8009778 <floor>
 800243a:	ec53 2b10 	vmov	r2, r3, d0
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe fbb9 	bl	8000bb8 <__aeabi_d2uiz>
 8002446:	4603      	mov	r3, r0
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <si5351_setupMultisynth+0x300>)
 800244a:	6213      	str	r3, [r2, #32]
           break;
 800244c:	e08a      	b.n	8002564 <si5351_setupMultisynth+0x3c8>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 800244e:	69b8      	ldr	r0, [r7, #24]
 8002450:	f7fe f882 	bl	8000558 <__aeabi_f2d>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	ec43 2b10 	vmov	d0, r2, r3
 800245c:	f007 f98c 	bl	8009778 <floor>
 8002460:	ec53 2b10 	vmov	r2, r3, d0
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fba6 	bl	8000bb8 <__aeabi_d2uiz>
 800246c:	4603      	mov	r3, r0
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <si5351_setupMultisynth+0x300>)
 8002470:	6253      	str	r3, [r2, #36]	; 0x24
           break;
 8002472:	e077      	b.n	8002564 <si5351_setupMultisynth+0x3c8>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 8002474:	69b8      	ldr	r0, [r7, #24]
 8002476:	f7fe f86f 	bl	8000558 <__aeabi_f2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	ec43 2b10 	vmov	d0, r2, r3
 8002482:	f007 f979 	bl	8009778 <floor>
 8002486:	ec53 2b10 	vmov	r2, r3, d0
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fb93 	bl	8000bb8 <__aeabi_d2uiz>
 8002492:	4603      	mov	r3, r0
 8002494:	4a01      	ldr	r2, [pc, #4]	; (800249c <si5351_setupMultisynth+0x300>)
 8002496:	6293      	str	r3, [r2, #40]	; 0x28
           break;
 8002498:	e064      	b.n	8002564 <si5351_setupMultisynth+0x3c8>
 800249a:	bf00      	nop
 800249c:	200002a4 	.word	0x200002a4
 80024a0:	43000000 	.word	0x43000000
          }
  }
  else
  {
          float fvco = m_si5351Config.pllb_freq / (div + ( (float)num / (float)denom));
 80024a4:	4b58      	ldr	r3, [pc, #352]	; (8002608 <si5351_setupMultisynth+0x46c>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 5a67 	vcvt.f32.u32	s11, s15
 80024c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80024ce:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80024d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024da:	edc7 7a07 	vstr	s15, [r7, #28]
          switch (output)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d02c      	beq.n	800253e <si5351_setupMultisynth+0x3a2>
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	dc3d      	bgt.n	8002564 <si5351_setupMultisynth+0x3c8>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <si5351_setupMultisynth+0x356>
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d013      	beq.n	8002518 <si5351_setupMultisynth+0x37c>
 80024f0:	e038      	b.n	8002564 <si5351_setupMultisynth+0x3c8>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 80024f2:	69f8      	ldr	r0, [r7, #28]
 80024f4:	f7fe f830 	bl	8000558 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	ec43 2b10 	vmov	d0, r2, r3
 8002500:	f007 f93a 	bl	8009778 <floor>
 8002504:	ec53 2b10 	vmov	r2, r3, d0
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe fb54 	bl	8000bb8 <__aeabi_d2uiz>
 8002510:	4603      	mov	r3, r0
 8002512:	4a3d      	ldr	r2, [pc, #244]	; (8002608 <si5351_setupMultisynth+0x46c>)
 8002514:	6213      	str	r3, [r2, #32]
           break;
 8002516:	e025      	b.n	8002564 <si5351_setupMultisynth+0x3c8>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 8002518:	69f8      	ldr	r0, [r7, #28]
 800251a:	f7fe f81d 	bl	8000558 <__aeabi_f2d>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	ec43 2b10 	vmov	d0, r2, r3
 8002526:	f007 f927 	bl	8009778 <floor>
 800252a:	ec53 2b10 	vmov	r2, r3, d0
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe fb41 	bl	8000bb8 <__aeabi_d2uiz>
 8002536:	4603      	mov	r3, r0
 8002538:	4a33      	ldr	r2, [pc, #204]	; (8002608 <si5351_setupMultisynth+0x46c>)
 800253a:	6253      	str	r3, [r2, #36]	; 0x24
           break;
 800253c:	e012      	b.n	8002564 <si5351_setupMultisynth+0x3c8>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 800253e:	69f8      	ldr	r0, [r7, #28]
 8002540:	f7fe f80a 	bl	8000558 <__aeabi_f2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	ec43 2b10 	vmov	d0, r2, r3
 800254c:	f007 f914 	bl	8009778 <floor>
 8002550:	ec53 2b10 	vmov	r2, r3, d0
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fb2e 	bl	8000bb8 <__aeabi_d2uiz>
 800255c:	4603      	mov	r3, r0
 800255e:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <si5351_setupMultisynth+0x46c>)
 8002560:	6293      	str	r3, [r2, #40]	; 0x28
           break;
 8002562:	bf00      	nop
  }



  /* Configure the clk control and enable the output */
  uint8_t clkControlReg = 0x0F;                             /* 8mA drive strength, MS0 as CLK0 source, Clock not inverted, powered up */
 8002564:	230f      	movs	r3, #15
 8002566:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  if (pllSource == SI5351_PLL_B) clkControlReg |= (1 << 5); /* Uses PLLB */
 800256a:	7bbb      	ldrb	r3, [r7, #14]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <si5351_setupMultisynth+0x3e0>
 8002570:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <si5351_setupMultisynth+0x3f2>
 8002582:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  switch (output)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d020      	beq.n	80025d6 <si5351_setupMultisynth+0x43a>
 8002594:	2b02      	cmp	r3, #2
 8002596:	dc30      	bgt.n	80025fa <si5351_setupMultisynth+0x45e>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <si5351_setupMultisynth+0x406>
 800259c:	2b01      	cmp	r3, #1
 800259e:	d00d      	beq.n	80025bc <si5351_setupMultisynth+0x420>
 80025a0:	e02b      	b.n	80025fa <si5351_setupMultisynth+0x45e>
  {
    case 0:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg));
 80025a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80025a6:	4619      	mov	r1, r3
 80025a8:	2010      	movs	r0, #16
 80025aa:	f000 f853 	bl	8002654 <si5351_write8>
 80025ae:	4603      	mov	r3, r0
 80025b0:	827b      	strh	r3, [r7, #18]
 80025b2:	8a7b      	ldrh	r3, [r7, #18]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <si5351_setupMultisynth+0x454>
 80025b8:	8a7b      	ldrh	r3, [r7, #18]
 80025ba:	e01f      	b.n	80025fc <si5351_setupMultisynth+0x460>
      break;
    case 1:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg));
 80025bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80025c0:	4619      	mov	r1, r3
 80025c2:	2011      	movs	r0, #17
 80025c4:	f000 f846 	bl	8002654 <si5351_write8>
 80025c8:	4603      	mov	r3, r0
 80025ca:	82bb      	strh	r3, [r7, #20]
 80025cc:	8abb      	ldrh	r3, [r7, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d010      	beq.n	80025f4 <si5351_setupMultisynth+0x458>
 80025d2:	8abb      	ldrh	r3, [r7, #20]
 80025d4:	e012      	b.n	80025fc <si5351_setupMultisynth+0x460>
      break;
    case 2:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg));
 80025d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80025da:	4619      	mov	r1, r3
 80025dc:	2012      	movs	r0, #18
 80025de:	f000 f839 	bl	8002654 <si5351_write8>
 80025e2:	4603      	mov	r3, r0
 80025e4:	82fb      	strh	r3, [r7, #22]
 80025e6:	8afb      	ldrh	r3, [r7, #22]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <si5351_setupMultisynth+0x45c>
 80025ec:	8afb      	ldrh	r3, [r7, #22]
 80025ee:	e005      	b.n	80025fc <si5351_setupMultisynth+0x460>
      break;
 80025f0:	bf00      	nop
 80025f2:	e002      	b.n	80025fa <si5351_setupMultisynth+0x45e>
      break;
 80025f4:	bf00      	nop
 80025f6:	e000      	b.n	80025fa <si5351_setupMultisynth+0x45e>
      break;
 80025f8:	bf00      	nop
  }

  return ERROR_NONE;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002606:	bf00      	nop
 8002608:	200002a4 	.word	0x200002a4

0800260c <si5351_enableOutputs>:
/*!
    @brief  Enables or disables all clock outputs
*/
/**************************************************************************/
err_t si5351_enableOutputs(uint8_t enabled)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  /* Make sure we've called init first */
  ASSERT(m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <si5351_enableOutputs+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <si5351_enableOutputs+0x16>
 800261e:	2305      	movs	r3, #5
 8002620:	e011      	b.n	8002646 <si5351_enableOutputs+0x3a>

  /* Enabled desired outputs (see Register 3) */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, enabled ? 0x00: 0xFF));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <si5351_enableOutputs+0x20>
 8002628:	2300      	movs	r3, #0
 800262a:	e000      	b.n	800262e <si5351_enableOutputs+0x22>
 800262c:	23ff      	movs	r3, #255	; 0xff
 800262e:	4619      	mov	r1, r3
 8002630:	2003      	movs	r0, #3
 8002632:	f000 f80f 	bl	8002654 <si5351_write8>
 8002636:	4603      	mov	r3, r0
 8002638:	81fb      	strh	r3, [r7, #14]
 800263a:	89fb      	ldrh	r3, [r7, #14]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <si5351_enableOutputs+0x38>
 8002640:	89fb      	ldrh	r3, [r7, #14]
 8002642:	e000      	b.n	8002646 <si5351_enableOutputs+0x3a>

  return ERROR_NONE;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200002a4 	.word	0x200002a4

08002654 <si5351_write8>:
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_write8 (uint8_t reg, uint8_t value)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af04      	add	r7, sp, #16
 800265a:	4603      	mov	r3, r0
 800265c:	460a      	mov	r2, r1
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	4613      	mov	r3, r2
 8002662:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  
	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8002668:	bf00      	nop
 800266a:	2364      	movs	r3, #100	; 0x64
 800266c:	2203      	movs	r2, #3
 800266e:	21c0      	movs	r1, #192	; 0xc0
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <si5351_write8+0x50>)
 8002672:	f001 fbf7 	bl	8003e64 <HAL_I2C_IsDeviceReady>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f6      	bne.n	800266a <si5351_write8+0x16>

    status = HAL_I2C_Mem_Write(&hi2c1,							// i2c handle
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	b29a      	uxth	r2, r3
 8002680:	2364      	movs	r3, #100	; 0x64
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	2301      	movs	r3, #1
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	1dbb      	adds	r3, r7, #6
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2301      	movs	r3, #1
 800268e:	21c0      	movs	r1, #192	; 0xc0
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <si5351_write8+0x50>)
 8002692:	f001 f8c7 	bl	8003824 <HAL_I2C_Mem_Write>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000250 	.word	0x20000250

080026a8 <si5351_read8>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_read8(uint8_t reg, uint8_t *value)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af04      	add	r7, sp, #16
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 80026b8:	bf00      	nop
 80026ba:	2364      	movs	r3, #100	; 0x64
 80026bc:	2203      	movs	r2, #3
 80026be:	21c0      	movs	r1, #192	; 0xc0
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <si5351_read8+0x4c>)
 80026c2:	f001 fbcf 	bl	8003e64 <HAL_I2C_IsDeviceReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f6      	bne.n	80026ba <si5351_read8+0x12>

    status = HAL_I2C_Mem_Read(&hi2c1,							// i2c handle
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	2364      	movs	r3, #100	; 0x64
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	2301      	movs	r3, #1
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	463b      	mov	r3, r7
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	21c0      	movs	r1, #192	; 0xc0
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <si5351_read8+0x4c>)
 80026e2:	f001 f999 	bl	8003a18 <HAL_I2C_Mem_Read>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000250 	.word	0x20000250

080026f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_MspInit+0x4c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <HAL_MspInit+0x4c>)
 8002708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_MspInit+0x4c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_MspInit+0x4c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_MspInit+0x4c>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_MspInit+0x4c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002736:	2005      	movs	r0, #5
 8002738:	f000 fc74 	bl	8003024 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800274c:	e7fe      	b.n	800274c <NMI_Handler+0x4>

0800274e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler+0x4>

0800275a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <BusFault_Handler+0x4>

08002760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <UsageFault_Handler+0x4>

08002766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002794:	f000 fb32 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80027a0:	2010      	movs	r0, #16
 80027a2:	f000 fee3 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}

080027aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80027ae:	2020      	movs	r0, #32
 80027b0:	f000 fedc 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <TIM3_IRQHandler+0x10>)
 80027be:	f002 fdb9 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000324 	.word	0x20000324

080027cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <TIM4_IRQHandler+0x10>)
 80027d2:	f002 fdaf 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200002dc 	.word	0x200002dc

080027e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <USART2_IRQHandler+0x10>)
 80027e6:	f003 fab3 	bl	8005d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000036c 	.word	0x2000036c

080027f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
	return 1;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_kill>:

int _kill(int pid, int sig)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800280e:	f004 f8e9 	bl	80069e4 <__errno>
 8002812:	4603      	mov	r3, r0
 8002814:	2216      	movs	r2, #22
 8002816:	601a      	str	r2, [r3, #0]
	return -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <_exit>:

void _exit (int status)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ffe7 	bl	8002804 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002836:	e7fe      	b.n	8002836 <_exit+0x12>

08002838 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e00a      	b.n	8002860 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800284a:	f3af 8000 	nop.w
 800284e:	4601      	mov	r1, r0
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	60ba      	str	r2, [r7, #8]
 8002856:	b2ca      	uxtb	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbf0      	blt.n	800284a <_read+0x12>
	}

return len;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e009      	b.n	8002898 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	60ba      	str	r2, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	dbf1      	blt.n	8002884 <_write+0x12>
	}
	return len;
 80028a0:	687b      	ldr	r3, [r7, #4]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_close>:

int _close(int file)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
	return -1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d2:	605a      	str	r2, [r3, #4]
	return 0;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <_isatty>:

int _isatty(int file)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
	return 1;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
	return 0;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <_sbrk+0x5c>)
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <_sbrk+0x60>)
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <_sbrk+0x64>)
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <_sbrk+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002944:	f004 f84e 	bl	80069e4 <__errno>
 8002948:	4603      	mov	r3, r0
 800294a:	220c      	movs	r2, #12
 800294c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	e009      	b.n	8002968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <_sbrk+0x64>)
 8002964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20018000 	.word	0x20018000
 8002974:	00000400 	.word	0x00000400
 8002978:	20000244 	.word	0x20000244
 800297c:	200003c8 	.word	0x200003c8

08002980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <SystemInit+0x20>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <SystemInit+0x20>)
 800298c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029b4:	463b      	mov	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <MX_TIM3_Init+0xa0>)
 80029c2:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <MX_TIM3_Init+0xa4>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 80029c6:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <MX_TIM3_Init+0xa0>)
 80029c8:	223b      	movs	r2, #59	; 0x3b
 80029ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_TIM3_Init+0xa0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <MX_TIM3_Init+0xa0>)
 80029d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <MX_TIM3_Init+0xa0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_TIM3_Init+0xa0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80029e6:	4817      	ldr	r0, [pc, #92]	; (8002a44 <MX_TIM3_Init+0xa0>)
 80029e8:	f002 fb3a 	bl	8005060 <HAL_TIM_IC_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80029f2:	f7ff f8b1 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	4619      	mov	r1, r3
 8002a04:	480f      	ldr	r0, [pc, #60]	; (8002a44 <MX_TIM3_Init+0xa0>)
 8002a06:	f003 f85f 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002a10:	f7ff f8a2 	bl	8001b58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a14:	2300      	movs	r3, #0
 8002a16:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a24:	463b      	mov	r3, r7
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4806      	ldr	r0, [pc, #24]	; (8002a44 <MX_TIM3_Init+0xa0>)
 8002a2c:	f002 fd8a 	bl	8005544 <HAL_TIM_IC_ConfigChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002a36:	f7ff f88f 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000324 	.word	0x20000324
 8002a48:	40000400 	.word	0x40000400

08002a4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <MX_TIM4_Init+0xa4>)
 8002a6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59999;
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a70:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002a74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002a90:	4816      	ldr	r0, [pc, #88]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002a92:	f002 fae5 	bl	8005060 <HAL_TIM_IC_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002a9c:	f7ff f85c 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4619      	mov	r1, r3
 8002aae:	480f      	ldr	r0, [pc, #60]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002ab0:	f003 f80a 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002aba:	f7ff f84d 	bl	8001b58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ace:	463b      	mov	r3, r7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <MX_TIM4_Init+0xa0>)
 8002ad6:	f002 fd35 	bl	8005544 <HAL_TIM_IC_ConfigChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ae0:	f7ff f83a 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ae4:	bf00      	nop
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200002dc 	.word	0x200002dc
 8002af0:	40000800 	.word	0x40000800

08002af4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <HAL_TIM_IC_MspInit+0x108>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d134      	bne.n	8002b80 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a38      	ldr	r2, [pc, #224]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a31      	ldr	r2, [pc, #196]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HCSR_ECHO_Pin;
 8002b4e:	2340      	movs	r3, #64	; 0x40
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HCSR_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4619      	mov	r1, r3
 8002b68:	4826      	ldr	r0, [pc, #152]	; (8002c04 <HAL_TIM_IC_MspInit+0x110>)
 8002b6a:	f000 fb2f 	bl	80031cc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2101      	movs	r1, #1
 8002b72:	201d      	movs	r0, #29
 8002b74:	f000 fa61 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b78:	201d      	movs	r0, #29
 8002b7a:	f000 fa7a 	bl	8003072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b7e:	e038      	b.n	8002bf2 <HAL_TIM_IC_MspInit+0xfe>
  else if(tim_icHandle->Instance==TIM4)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_TIM_IC_MspInit+0x114>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d133      	bne.n	8002bf2 <HAL_TIM_IC_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_TIM_IC_MspInit+0x10c>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PLC_PulsePort_Pin;
 8002bc2:	2340      	movs	r3, #64	; 0x40
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PLC_PulsePort_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480b      	ldr	r0, [pc, #44]	; (8002c0c <HAL_TIM_IC_MspInit+0x118>)
 8002bde:	f000 faf5 	bl	80031cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	201e      	movs	r0, #30
 8002be8:	f000 fa27 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bec:	201e      	movs	r0, #30
 8002bee:	f000 fa40 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 8002bf2:	bf00      	nop
 8002bf4:	3730      	adds	r7, #48	; 0x30
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40020400 	.word	0x40020400

08002c10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <MX_USART2_UART_Init+0x50>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c48:	f002 ffc0 	bl	8005bcc <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c52:	f7fe ff81 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000036c 	.word	0x2000036c
 8002c60:	40004400 	.word	0x40004400

08002c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_UART_MspInit+0x94>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d133      	bne.n	8002cee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_UART_MspInit+0x98>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_UART_MspInit+0x98>)
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_UART_MspInit+0x98>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_UART_MspInit+0x98>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_UART_MspInit+0x98>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_UART_MspInit+0x98>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cce:	2307      	movs	r3, #7
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4809      	ldr	r0, [pc, #36]	; (8002d00 <HAL_UART_MspInit+0x9c>)
 8002cda:	f000 fa77 	bl	80031cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	2026      	movs	r0, #38	; 0x26
 8002ce4:	f000 f9a9 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ce8:	2026      	movs	r0, #38	; 0x26
 8002cea:	f000 f9c2 	bl	8003072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40004400 	.word	0x40004400
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000

08002d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d08:	480d      	ldr	r0, [pc, #52]	; (8002d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d0a:	490e      	ldr	r1, [pc, #56]	; (8002d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d10:	e002      	b.n	8002d18 <LoopCopyDataInit>

08002d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d16:	3304      	adds	r3, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d1c:	d3f9      	bcc.n	8002d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d20:	4c0b      	ldr	r4, [pc, #44]	; (8002d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d24:	e001      	b.n	8002d2a <LoopFillZerobss>

08002d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d28:	3204      	adds	r2, #4

08002d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d2c:	d3fb      	bcc.n	8002d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d2e:	f7ff fe27 	bl	8002980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d32:	f003 fe5d 	bl	80069f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d36:	f7fe fc81 	bl	800163c <main>
  bx  lr    
 8002d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d44:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002d48:	08009cbc 	.word	0x08009cbc
  ldr r2, =_sbss
 8002d4c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002d50:	200003c4 	.word	0x200003c4

08002d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC_IRQHandler>
	...

08002d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_Init+0x40>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_Init+0x40>)
 8002d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_Init+0x40>)
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 f94f 	bl	8003024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f808 	bl	8002d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8c:	f7ff fcb4 	bl	80026f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023c00 	.word	0x40023c00

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_InitTick+0x54>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_InitTick+0x58>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f967 	bl	800308e <HAL_SYSTICK_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00e      	b.n	8002de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d80a      	bhi.n	8002de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f000 f92f 	bl	800303a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ddc:	4a06      	ldr	r2, [pc, #24]	; (8002df8 <HAL_InitTick+0x5c>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000000 	.word	0x20000000
 8002df4:	20000008 	.word	0x20000008
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_IncTick+0x20>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_IncTick+0x24>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <HAL_IncTick+0x24>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	200003b0 	.word	0x200003b0

08002e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return uwTick;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_GetTick+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	200003b0 	.word	0x200003b0

08002e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff ffee 	bl	8002e24 <HAL_GetTick>
 8002e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d005      	beq.n	8002e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_Delay+0x44>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e62:	bf00      	nop
 8002e64:	f7ff ffde 	bl	8002e24 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d8f7      	bhi.n	8002e64 <HAL_Delay+0x28>
  {
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000008 	.word	0x20000008

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <__NVIC_EnableIRQ+0x38>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2001      	movs	r0, #1
 8002f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	; (8002f70 <__NVIC_SetPriority+0x4c>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f4c:	e00a      	b.n	8002f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <__NVIC_SetPriority+0x50>)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	440b      	add	r3, r1
 8002f62:	761a      	strb	r2, [r3, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000e100 	.word	0xe000e100
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f1c3 0307 	rsb	r3, r3, #7
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf28      	it	cs
 8002f96:	2304      	movcs	r3, #4
 8002f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d902      	bls.n	8002fa8 <NVIC_EncodePriority+0x30>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3b03      	subs	r3, #3
 8002fa6:	e000      	b.n	8002faa <NVIC_EncodePriority+0x32>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	4313      	orrs	r3, r2
         );
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff0:	d301      	bcc.n	8002ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00f      	b.n	8003016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <SysTick_Config+0x40>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffe:	210f      	movs	r1, #15
 8003000:	f04f 30ff 	mov.w	r0, #4294967295
 8003004:	f7ff ff8e 	bl	8002f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <SysTick_Config+0x40>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <SysTick_Config+0x40>)
 8003010:	2207      	movs	r2, #7
 8003012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	e000e010 	.word	0xe000e010

08003024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff29 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800304c:	f7ff ff3e 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 8003050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	f7ff ff8e 	bl	8002f78 <NVIC_EncodePriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff5d 	bl	8002f24 <__NVIC_SetPriority>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff31 	bl	8002ee8 <__NVIC_EnableIRQ>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffa2 	bl	8002fe0 <SysTick_Config>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff feb6 	bl	8002e24 <HAL_GetTick>
 80030b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d008      	beq.n	80030d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e052      	b.n	800317e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0216 	bic.w	r2, r2, #22
 80030e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <HAL_DMA_Abort+0x62>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0208 	bic.w	r2, r2, #8
 8003116:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003128:	e013      	b.n	8003152 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800312a:	f7ff fe7b 	bl	8002e24 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b05      	cmp	r3, #5
 8003136:	d90c      	bls.n	8003152 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e015      	b.n	800317e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e4      	bne.n	800312a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	223f      	movs	r2, #63	; 0x3f
 8003166:	409a      	lsls	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d004      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e00c      	b.n	80031be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2205      	movs	r2, #5
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	e159      	b.n	800349c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	429a      	cmp	r2, r3
 8003202:	f040 8148 	bne.w	8003496 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d005      	beq.n	800321e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321a:	2b02      	cmp	r3, #2
 800321c:	d130      	bne.n	8003280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 0201 	and.w	r2, r3, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b03      	cmp	r3, #3
 800328a:	d017      	beq.n	80032bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d123      	bne.n	8003310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3208      	adds	r2, #8
 80032d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	220f      	movs	r2, #15
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	08da      	lsrs	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3208      	adds	r2, #8
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0203 	and.w	r2, r3, #3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a2 	beq.w	8003496 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <HAL_GPIO_Init+0x2e8>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a56      	ldr	r2, [pc, #344]	; (80034b4 <HAL_GPIO_Init+0x2e8>)
 800335c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b54      	ldr	r3, [pc, #336]	; (80034b4 <HAL_GPIO_Init+0x2e8>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800336e:	4a52      	ldr	r2, [pc, #328]	; (80034b8 <HAL_GPIO_Init+0x2ec>)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	220f      	movs	r2, #15
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a49      	ldr	r2, [pc, #292]	; (80034bc <HAL_GPIO_Init+0x2f0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d019      	beq.n	80033ce <HAL_GPIO_Init+0x202>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a48      	ldr	r2, [pc, #288]	; (80034c0 <HAL_GPIO_Init+0x2f4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_GPIO_Init+0x1fe>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a47      	ldr	r2, [pc, #284]	; (80034c4 <HAL_GPIO_Init+0x2f8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00d      	beq.n	80033c6 <HAL_GPIO_Init+0x1fa>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a46      	ldr	r2, [pc, #280]	; (80034c8 <HAL_GPIO_Init+0x2fc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <HAL_GPIO_Init+0x1f6>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a45      	ldr	r2, [pc, #276]	; (80034cc <HAL_GPIO_Init+0x300>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_GPIO_Init+0x1f2>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033be:	2307      	movs	r3, #7
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033ce:	2300      	movs	r3, #0
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e0:	4935      	ldr	r1, [pc, #212]	; (80034b8 <HAL_GPIO_Init+0x2ec>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_GPIO_Init+0x304>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003412:	4a2f      	ldr	r2, [pc, #188]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_GPIO_Init+0x304>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343c:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <HAL_GPIO_Init+0x304>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_GPIO_Init+0x304>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a0f      	ldr	r2, [pc, #60]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	f67f aea2 	bls.w	80031e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020800 	.word	0x40020800
 80034c8:	40020c00 	.word	0x40020c00
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40013c00 	.word	0x40013c00

080034d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e001      	b.n	80034f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003548:	887a      	ldrh	r2, [r7, #2]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4013      	ands	r3, r2
 800354e:	041a      	lsls	r2, r3, #16
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43d9      	mvns	r1, r3
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	400b      	ands	r3, r1
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	619a      	str	r2, [r3, #24]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003582:	4a05      	ldr	r2, [pc, #20]	; (8003598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fab2 	bl	8001af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e12b      	b.n	8003806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fd fde8 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	; 0x24
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003600:	f001 fd06 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 8003604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a81      	ldr	r2, [pc, #516]	; (8003810 <HAL_I2C_Init+0x274>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d807      	bhi.n	8003620 <HAL_I2C_Init+0x84>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a80      	ldr	r2, [pc, #512]	; (8003814 <HAL_I2C_Init+0x278>)
 8003614:	4293      	cmp	r3, r2
 8003616:	bf94      	ite	ls
 8003618:	2301      	movls	r3, #1
 800361a:	2300      	movhi	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e006      	b.n	800362e <HAL_I2C_Init+0x92>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a7d      	ldr	r2, [pc, #500]	; (8003818 <HAL_I2C_Init+0x27c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0e7      	b.n	8003806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a78      	ldr	r2, [pc, #480]	; (800381c <HAL_I2C_Init+0x280>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0c9b      	lsrs	r3, r3, #18
 8003640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a6a      	ldr	r2, [pc, #424]	; (8003810 <HAL_I2C_Init+0x274>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d802      	bhi.n	8003670 <HAL_I2C_Init+0xd4>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3301      	adds	r3, #1
 800366e:	e009      	b.n	8003684 <HAL_I2C_Init+0xe8>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	4a69      	ldr	r2, [pc, #420]	; (8003820 <HAL_I2C_Init+0x284>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	3301      	adds	r3, #1
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003696:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	495c      	ldr	r1, [pc, #368]	; (8003810 <HAL_I2C_Init+0x274>)
 80036a0:	428b      	cmp	r3, r1
 80036a2:	d819      	bhi.n	80036d8 <HAL_I2C_Init+0x13c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e59      	subs	r1, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036b8:	400b      	ands	r3, r1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_I2C_Init+0x138>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e59      	subs	r1, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d2:	e051      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e04f      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d111      	bne.n	8003704 <HAL_I2C_Init+0x168>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	440b      	add	r3, r1
 80036ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e012      	b.n	800372a <HAL_I2C_Init+0x18e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	0099      	lsls	r1, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Init+0x196>
 800372e:	2301      	movs	r3, #1
 8003730:	e022      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10e      	bne.n	8003758 <HAL_I2C_Init+0x1bc>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e58      	subs	r0, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	440b      	add	r3, r1
 8003748:	fbb0 f3f3 	udiv	r3, r0, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003756:	e00f      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	0099      	lsls	r1, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6911      	ldr	r1, [r2, #16]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68d2      	ldr	r2, [r2, #12]
 80037b2:	4311      	orrs	r1, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	000186a0 	.word	0x000186a0
 8003814:	001e847f 	.word	0x001e847f
 8003818:	003d08ff 	.word	0x003d08ff
 800381c:	431bde83 	.word	0x431bde83
 8003820:	10624dd3 	.word	0x10624dd3

08003824 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	4608      	mov	r0, r1
 800382e:	4611      	mov	r1, r2
 8003830:	461a      	mov	r2, r3
 8003832:	4603      	mov	r3, r0
 8003834:	817b      	strh	r3, [r7, #10]
 8003836:	460b      	mov	r3, r1
 8003838:	813b      	strh	r3, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800383e:	f7ff faf1 	bl	8002e24 <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b20      	cmp	r3, #32
 800384e:	f040 80d9 	bne.w	8003a04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	2319      	movs	r3, #25
 8003858:	2201      	movs	r2, #1
 800385a:	496d      	ldr	r1, [pc, #436]	; (8003a10 <HAL_I2C_Mem_Write+0x1ec>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fdad 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
 800386a:	e0cc      	b.n	8003a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_I2C_Mem_Write+0x56>
 8003876:	2302      	movs	r3, #2
 8003878:	e0c5      	b.n	8003a06 <HAL_I2C_Mem_Write+0x1e2>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d007      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2221      	movs	r2, #33	; 0x21
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a4d      	ldr	r2, [pc, #308]	; (8003a14 <HAL_I2C_Mem_Write+0x1f0>)
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e2:	88f8      	ldrh	r0, [r7, #6]
 80038e4:	893a      	ldrh	r2, [r7, #8]
 80038e6:	8979      	ldrh	r1, [r7, #10]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	4603      	mov	r3, r0
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fbe4 	bl	80040c0 <I2C_RequestMemoryWrite>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d052      	beq.n	80039a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e081      	b.n	8003a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fe2e 	bl	8004568 <I2C_WaitOnTXEFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b04      	cmp	r3, #4
 8003918:	d107      	bne.n	800392a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003928:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06b      	b.n	8003a06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b04      	cmp	r3, #4
 800396a:	d11b      	bne.n	80039a4 <HAL_I2C_Mem_Write+0x180>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d017      	beq.n	80039a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1aa      	bne.n	8003902 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fe1a 	bl	80045ea <I2C_WaitOnBTFFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d107      	bne.n	80039d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e016      	b.n	8003a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	00100002 	.word	0x00100002
 8003a14:	ffff0000 	.word	0xffff0000

08003a18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08c      	sub	sp, #48	; 0x30
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	813b      	strh	r3, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a32:	f7ff f9f7 	bl	8002e24 <HAL_GetTick>
 8003a36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	f040 8208 	bne.w	8003e56 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2319      	movs	r3, #25
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	497b      	ldr	r1, [pc, #492]	; (8003c3c <HAL_I2C_Mem_Read+0x224>)
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fcb3 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e1fb      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_I2C_Mem_Read+0x56>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e1f4      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d007      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2222      	movs	r2, #34	; 0x22
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a5b      	ldr	r2, [pc, #364]	; (8003c40 <HAL_I2C_Mem_Read+0x228>)
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ad6:	88f8      	ldrh	r0, [r7, #6]
 8003ad8:	893a      	ldrh	r2, [r7, #8]
 8003ada:	8979      	ldrh	r1, [r7, #10]
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fb80 	bl	80041ec <I2C_RequestMemoryRead>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e1b0      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d113      	bne.n	8003b26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	623b      	str	r3, [r7, #32]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	623b      	str	r3, [r7, #32]
 8003b12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e184      	b.n	8003e30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d11b      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e164      	b.n	8003e30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d11b      	bne.n	8003ba6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	e144      	b.n	8003e30 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bbc:	e138      	b.n	8003e30 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	f200 80f1 	bhi.w	8003daa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d123      	bne.n	8003c18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fd49 	bl	800466c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e139      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c16:	e10b      	b.n	8003e30 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d14e      	bne.n	8003cbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	2200      	movs	r2, #0
 8003c28:	4906      	ldr	r1, [pc, #24]	; (8003c44 <HAL_I2C_Mem_Read+0x22c>)
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fbc6 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e10e      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
 8003c3a:	bf00      	nop
 8003c3c:	00100002 	.word	0x00100002
 8003c40:	ffff0000 	.word	0xffff0000
 8003c44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cbc:	e0b8      	b.n	8003e30 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4966      	ldr	r1, [pc, #408]	; (8003e60 <HAL_I2C_Mem_Read+0x448>)
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fb77 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0bf      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	2200      	movs	r2, #0
 8003d22:	494f      	ldr	r1, [pc, #316]	; (8003e60 <HAL_I2C_Mem_Read+0x448>)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fb49 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e091      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003da8:	e042      	b.n	8003e30 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fc5c 	bl	800466c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e04c      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d118      	bne.n	8003e30 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f aec2 	bne.w	8003bbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3728      	adds	r7, #40	; 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	00010004 	.word	0x00010004

08003e64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	460b      	mov	r3, r1
 8003e72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e74:	f7fe ffd6 	bl	8002e24 <HAL_GetTick>
 8003e78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	f040 8111 	bne.w	80040ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	2319      	movs	r3, #25
 8003e92:	2201      	movs	r2, #1
 8003e94:	4988      	ldr	r1, [pc, #544]	; (80040b8 <HAL_I2C_IsDeviceReady+0x254>)
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa90 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e104      	b.n	80040b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2C_IsDeviceReady+0x50>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0fd      	b.n	80040b0 <HAL_I2C_IsDeviceReady+0x24c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d007      	beq.n	8003eda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2224      	movs	r2, #36	; 0x24
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a70      	ldr	r2, [pc, #448]	; (80040bc <HAL_I2C_IsDeviceReady+0x258>)
 8003efc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fa4e 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	d103      	bne.n	8003f3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0b6      	b.n	80040b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe ff67 	bl	8002e24 <HAL_GetTick>
 8003f56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	bf0c      	ite	eq
 8003f66:	2301      	moveq	r3, #1
 8003f68:	2300      	movne	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f86:	e025      	b.n	8003fd4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f88:	f7fe ff4c 	bl	8002e24 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d302      	bcc.n	8003f9e <HAL_I2C_IsDeviceReady+0x13a>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22a0      	movs	r2, #160	; 0xa0
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2ba0      	cmp	r3, #160	; 0xa0
 8003fde:	d005      	beq.n	8003fec <HAL_I2C_IsDeviceReady+0x188>
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <HAL_I2C_IsDeviceReady+0x188>
 8003fe6:	7dbb      	ldrb	r3, [r7, #22]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0cd      	beq.n	8003f88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d129      	bne.n	8004056 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004010:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2319      	movs	r3, #25
 800402e:	2201      	movs	r2, #1
 8004030:	4921      	ldr	r1, [pc, #132]	; (80040b8 <HAL_I2C_IsDeviceReady+0x254>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f9c2 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e036      	b.n	80040b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e02c      	b.n	80040b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004064:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800406e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2319      	movs	r3, #25
 8004076:	2201      	movs	r2, #1
 8004078:	490f      	ldr	r1, [pc, #60]	; (80040b8 <HAL_I2C_IsDeviceReady+0x254>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f99e 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e012      	b.n	80040b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	3301      	adds	r3, #1
 800408e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	f4ff af32 	bcc.w	8003efe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	00100002 	.word	0x00100002
 80040bc:	ffff0000 	.word	0xffff0000

080040c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	817b      	strh	r3, [r7, #10]
 80040d2:	460b      	mov	r3, r1
 80040d4:	813b      	strh	r3, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f960 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004110:	d103      	bne.n	800411a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e05f      	b.n	80041de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800411e:	897b      	ldrh	r3, [r7, #10]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800412c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	492d      	ldr	r1, [pc, #180]	; (80041e8 <I2C_RequestMemoryWrite+0x128>)
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f998 	bl	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e04c      	b.n	80041de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fa02 	bl	8004568 <I2C_WaitOnTXEFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e02b      	b.n	80041de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800418c:	893b      	ldrh	r3, [r7, #8]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	611a      	str	r2, [r3, #16]
 8004196:	e021      	b.n	80041dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	b29b      	uxth	r3, r3
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a8:	6a39      	ldr	r1, [r7, #32]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f9dc 	bl	8004568 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00d      	beq.n	80041d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d107      	bne.n	80041ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e005      	b.n	80041de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041d2:	893b      	ldrh	r3, [r7, #8]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	00010002 	.word	0x00010002

080041ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	817b      	strh	r3, [r7, #10]
 80041fe:	460b      	mov	r3, r1
 8004200:	813b      	strh	r3, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004214:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004224:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2200      	movs	r2, #0
 800422e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f8c2 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424c:	d103      	bne.n	8004256 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e0aa      	b.n	80043b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800425a:	897b      	ldrh	r3, [r7, #10]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004268:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	4952      	ldr	r1, [pc, #328]	; (80043b8 <I2C_RequestMemoryRead+0x1cc>)
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f8fa 	bl	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e097      	b.n	80043b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f964 	bl	8004568 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d107      	bne.n	80042be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e076      	b.n	80043b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c8:	893b      	ldrh	r3, [r7, #8]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]
 80042d2:	e021      	b.n	8004318 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042d4:	893b      	ldrh	r3, [r7, #8]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	b29b      	uxth	r3, r3
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	6a39      	ldr	r1, [r7, #32]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f93e 	bl	8004568 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d107      	bne.n	800430a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004308:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e050      	b.n	80043b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800430e:	893b      	ldrh	r3, [r7, #8]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431a:	6a39      	ldr	r1, [r7, #32]
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f923 	bl	8004568 <I2C_WaitOnTXEFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	2b04      	cmp	r3, #4
 800432e:	d107      	bne.n	8004340 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e035      	b.n	80043b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004352:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	2200      	movs	r2, #0
 800435c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f82b 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437a:	d103      	bne.n	8004384 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004382:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e013      	b.n	80043b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004388:	897b      	ldrh	r3, [r7, #10]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	6a3a      	ldr	r2, [r7, #32]
 800439c:	4906      	ldr	r1, [pc, #24]	; (80043b8 <I2C_RequestMemoryRead+0x1cc>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f863 	bl	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	00010002 	.word	0x00010002

080043bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043cc:	e025      	b.n	800441a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d021      	beq.n	800441a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fe fd25 	bl	8002e24 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d116      	bne.n	800441a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f043 0220 	orr.w	r2, r3, #32
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e023      	b.n	8004462 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d10d      	bne.n	8004440 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	e00c      	b.n	800445a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	43da      	mvns	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	429a      	cmp	r2, r3
 800445e:	d0b6      	beq.n	80043ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004478:	e051      	b.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004488:	d123      	bne.n	80044d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0204 	orr.w	r2, r3, #4
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e046      	b.n	8004560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d021      	beq.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fe fca3 	bl	8002e24 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e020      	b.n	8004560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d10c      	bne.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	43da      	mvns	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4013      	ands	r3, r2
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	e00b      	b.n	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	43da      	mvns	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4013      	ands	r3, r2
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d18d      	bne.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004574:	e02d      	b.n	80045d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f8ce 	bl	8004718 <I2C_IsAcknowledgeFailed>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e02d      	b.n	80045e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d021      	beq.n	80045d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7fe fc49 	bl	8002e24 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d116      	bne.n	80045d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e007      	b.n	80045e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d1ca      	bne.n	8004576 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f6:	e02d      	b.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f88d 	bl	8004718 <I2C_IsAcknowledgeFailed>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e02d      	b.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d021      	beq.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004610:	f7fe fc08 	bl	8002e24 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d116      	bne.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f043 0220 	orr.w	r2, r3, #32
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e007      	b.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b04      	cmp	r3, #4
 8004660:	d1ca      	bne.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004678:	e042      	b.n	8004700 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d119      	bne.n	80046bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0210 	mvn.w	r2, #16
 8004690:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e029      	b.n	8004710 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046bc:	f7fe fbb2 	bl	8002e24 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d302      	bcc.n	80046d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d116      	bne.n	8004700 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d1b5      	bne.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472e:	d11b      	bne.n	8004768 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004738:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f043 0204 	orr.w	r2, r3, #4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e264      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d075      	beq.n	8004882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004796:	4ba3      	ldr	r3, [pc, #652]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d00c      	beq.n	80047bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a2:	4ba0      	ldr	r3, [pc, #640]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d112      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ae:	4b9d      	ldr	r3, [pc, #628]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	4b99      	ldr	r3, [pc, #612]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05b      	beq.n	8004880 <HAL_RCC_OscConfig+0x108>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d157      	bne.n	8004880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e23f      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d106      	bne.n	80047ec <HAL_RCC_OscConfig+0x74>
 80047de:	4b91      	ldr	r3, [pc, #580]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a90      	ldr	r2, [pc, #576]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e01d      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x98>
 80047f6:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a8a      	ldr	r2, [pc, #552]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4b88      	ldr	r3, [pc, #544]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a87      	ldr	r2, [pc, #540]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 8004810:	4b84      	ldr	r3, [pc, #528]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a83      	ldr	r2, [pc, #524]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a80      	ldr	r2, [pc, #512]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fe faf8 	bl	8002e24 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004838:	f7fe faf4 	bl	8002e24 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e204      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0xc0>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fe fae4 	bl	8002e24 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004860:	f7fe fae0 	bl	8002e24 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1f0      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004872:	4b6c      	ldr	r3, [pc, #432]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0xe8>
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d063      	beq.n	8004956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800488e:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489a:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d11c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a6:	4b5f      	ldr	r3, [pc, #380]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d116      	bne.n	80048e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	4b5c      	ldr	r3, [pc, #368]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_RCC_OscConfig+0x152>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e1c4      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4952      	ldr	r1, [pc, #328]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048de:	e03a      	b.n	8004956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e8:	4b4f      	ldr	r3, [pc, #316]	; (8004a28 <HAL_RCC_OscConfig+0x2b0>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fe fa99 	bl	8002e24 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f6:	f7fe fa95 	bl	8002e24 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e1a5      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	4b46      	ldr	r3, [pc, #280]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4940      	ldr	r1, [pc, #256]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
 8004928:	e015      	b.n	8004956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <HAL_RCC_OscConfig+0x2b0>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fe fa78 	bl	8002e24 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004938:	f7fe fa74 	bl	8002e24 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e184      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d030      	beq.n	80049c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <HAL_RCC_OscConfig+0x2b4>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fe fa58 	bl	8002e24 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004978:	f7fe fa54 	bl	8002e24 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e164      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498a:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x200>
 8004996:	e015      	b.n	80049c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_RCC_OscConfig+0x2b4>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499e:	f7fe fa41 	bl	8002e24 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a6:	f7fe fa3d 	bl	8002e24 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e14d      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f0      	bne.n	80049a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a0 	beq.w	8004b12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x2b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d121      	bne.n	8004a52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_RCC_OscConfig+0x2b8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <HAL_RCC_OscConfig+0x2b8>)
 8004a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1a:	f7fe fa03 	bl	8002e24 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	e011      	b.n	8004a46 <HAL_RCC_OscConfig+0x2ce>
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	42470000 	.word	0x42470000
 8004a2c:	42470e80 	.word	0x42470e80
 8004a30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fe f9f6 	bl	8002e24 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e106      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b85      	ldr	r3, [pc, #532]	; (8004c5c <HAL_RCC_OscConfig+0x4e4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d106      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2f0>
 8004a5a:	4b81      	ldr	r3, [pc, #516]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5e:	4a80      	ldr	r2, [pc, #512]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6713      	str	r3, [r2, #112]	; 0x70
 8004a66:	e01c      	b.n	8004aa2 <HAL_RCC_OscConfig+0x32a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b05      	cmp	r3, #5
 8004a6e:	d10c      	bne.n	8004a8a <HAL_RCC_OscConfig+0x312>
 8004a70:	4b7b      	ldr	r3, [pc, #492]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a7a      	ldr	r2, [pc, #488]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a76:	f043 0304 	orr.w	r3, r3, #4
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7c:	4b78      	ldr	r3, [pc, #480]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4a77      	ldr	r2, [pc, #476]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
 8004a88:	e00b      	b.n	8004aa2 <HAL_RCC_OscConfig+0x32a>
 8004a8a:	4b75      	ldr	r3, [pc, #468]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	4a74      	ldr	r2, [pc, #464]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	6713      	str	r3, [r2, #112]	; 0x70
 8004a96:	4b72      	ldr	r3, [pc, #456]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	4a71      	ldr	r2, [pc, #452]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a9c:	f023 0304 	bic.w	r3, r3, #4
 8004aa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d015      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fe f9bb 	bl	8002e24 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fe f9b7 	bl	8002e24 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0c5      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	4b65      	ldr	r3, [pc, #404]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0ee      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x33a>
 8004ad4:	e014      	b.n	8004b00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fe f9a5 	bl	8002e24 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ade:	f7fe f9a1 	bl	8002e24 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e0af      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af4:	4b5a      	ldr	r3, [pc, #360]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ee      	bne.n	8004ade <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b06:	4b56      	ldr	r3, [pc, #344]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a55      	ldr	r2, [pc, #340]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 809b 	beq.w	8004c52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1c:	4b50      	ldr	r3, [pc, #320]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 030c 	and.w	r3, r3, #12
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d05c      	beq.n	8004be2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d141      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b30:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <HAL_RCC_OscConfig+0x4ec>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b36:	f7fe f975 	bl	8002e24 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fe f971 	bl	8002e24 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e081      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	019b      	lsls	r3, r3, #6
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	3b01      	subs	r3, #1
 8004b76:	041b      	lsls	r3, r3, #16
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	4937      	ldr	r1, [pc, #220]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b86:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <HAL_RCC_OscConfig+0x4ec>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fe f94a 	bl	8002e24 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fe f946 	bl	8002e24 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e056      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x41c>
 8004bb2:	e04e      	b.n	8004c52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb4:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <HAL_RCC_OscConfig+0x4ec>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bba:	f7fe f933 	bl	8002e24 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc2:	f7fe f92f 	bl	8002e24 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e03f      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd4:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x44a>
 8004be0:	e037      	b.n	8004c52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e032      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bee:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d028      	beq.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d121      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d11a      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c1e:	4013      	ands	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d111      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	3b01      	subs	r3, #1
 8004c38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	40023800 	.word	0x40023800
 8004c64:	42470060 	.word	0x42470060

08004c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0cc      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b68      	ldr	r3, [pc, #416]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d90c      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d044      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d119      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d107      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e06f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e067      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d46:	4b37      	ldr	r3, [pc, #220]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 0203 	bic.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4934      	ldr	r1, [pc, #208]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d58:	f7fe f864 	bl	8002e24 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d60:	f7fe f860 	bl	8002e24 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e04f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 020c 	and.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1eb      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d20c      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	490a      	ldr	r1, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd ffc4 	bl	8002d9c <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023c00 	.word	0x40023c00
 8004e24:	40023800 	.word	0x40023800
 8004e28:	080098b4 	.word	0x080098b4
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000004 	.word	0x20000004

08004e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	2300      	movs	r3, #0
 8004e46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4c:	4b67      	ldr	r3, [pc, #412]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 030c 	and.w	r3, r3, #12
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d00d      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x40>
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	f200 80bd 	bhi.w	8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_GetSysClockFreq+0x34>
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d003      	beq.n	8004e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e66:	e0b7      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e68:	4b61      	ldr	r3, [pc, #388]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e6a:	60bb      	str	r3, [r7, #8]
       break;
 8004e6c:	e0b7      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e6e:	4b61      	ldr	r3, [pc, #388]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e70:	60bb      	str	r3, [r7, #8]
      break;
 8004e72:	e0b4      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e74:	4b5d      	ldr	r3, [pc, #372]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04d      	beq.n	8004f26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8a:	4b58      	ldr	r3, [pc, #352]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	461a      	mov	r2, r3
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	ea02 0800 	and.w	r8, r2, r0
 8004ea2:	ea03 0901 	and.w	r9, r3, r1
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	014b      	lsls	r3, r1, #5
 8004eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004eb8:	0142      	lsls	r2, r0, #5
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	ebb0 0008 	subs.w	r0, r0, r8
 8004ec2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	018b      	lsls	r3, r1, #6
 8004ed0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ed4:	0182      	lsls	r2, r0, #6
 8004ed6:	1a12      	subs	r2, r2, r0
 8004ed8:	eb63 0301 	sbc.w	r3, r3, r1
 8004edc:	f04f 0000 	mov.w	r0, #0
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	00d9      	lsls	r1, r3, #3
 8004ee6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eea:	00d0      	lsls	r0, r2, #3
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	eb12 0208 	adds.w	r2, r2, r8
 8004ef4:	eb43 0309 	adc.w	r3, r3, r9
 8004ef8:	f04f 0000 	mov.w	r0, #0
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	0259      	lsls	r1, r3, #9
 8004f02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f06:	0250      	lsls	r0, r2, #9
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	f7fb febe 	bl	8000c98 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4613      	mov	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e04a      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	099b      	lsrs	r3, r3, #6
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	ea02 0400 	and.w	r4, r2, r0
 8004f3e:	ea03 0501 	and.w	r5, r3, r1
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	014b      	lsls	r3, r1, #5
 8004f50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f54:	0142      	lsls	r2, r0, #5
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	1b00      	subs	r0, r0, r4
 8004f5c:	eb61 0105 	sbc.w	r1, r1, r5
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	018b      	lsls	r3, r1, #6
 8004f6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f6e:	0182      	lsls	r2, r0, #6
 8004f70:	1a12      	subs	r2, r2, r0
 8004f72:	eb63 0301 	sbc.w	r3, r3, r1
 8004f76:	f04f 0000 	mov.w	r0, #0
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	00d9      	lsls	r1, r3, #3
 8004f80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f84:	00d0      	lsls	r0, r2, #3
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	1912      	adds	r2, r2, r4
 8004f8c:	eb45 0303 	adc.w	r3, r5, r3
 8004f90:	f04f 0000 	mov.w	r0, #0
 8004f94:	f04f 0100 	mov.w	r1, #0
 8004f98:	0299      	lsls	r1, r3, #10
 8004f9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f9e:	0290      	lsls	r0, r2, #10
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	f7fb fe72 	bl	8000c98 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	0c1b      	lsrs	r3, r3, #16
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	60bb      	str	r3, [r7, #8]
      break;
 8004fd6:	e002      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fda:	60bb      	str	r3, [r7, #8]
      break;
 8004fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fde:	68bb      	ldr	r3, [r7, #8]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	00f42400 	.word	0x00f42400
 8004ff4:	007a1200 	.word	0x007a1200

08004ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <HAL_RCC_GetHCLKFreq+0x14>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
}
 8005000:	4618      	mov	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000000 	.word	0x20000000

08005010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005014:	f7ff fff0 	bl	8004ff8 <HAL_RCC_GetHCLKFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	0a9b      	lsrs	r3, r3, #10
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4903      	ldr	r1, [pc, #12]	; (8005034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40023800 	.word	0x40023800
 8005034:	080098c4 	.word	0x080098c4

08005038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800503c:	f7ff ffdc 	bl	8004ff8 <HAL_RCC_GetHCLKFreq>
 8005040:	4602      	mov	r2, r0
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	0b5b      	lsrs	r3, r3, #13
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	4903      	ldr	r1, [pc, #12]	; (800505c <HAL_RCC_GetPCLK2Freq+0x24>)
 800504e:	5ccb      	ldrb	r3, [r1, r3]
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005054:	4618      	mov	r0, r3
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40023800 	.word	0x40023800
 800505c:	080098c4 	.word	0x080098c4

08005060 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e041      	b.n	80050f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fd fd34 	bl	8002af4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f000 fb4e 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <HAL_TIM_IC_Start_IT+0x1e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511a:	b2db      	uxtb	r3, r3
 800511c:	e013      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x46>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d104      	bne.n	800512e <HAL_TIM_IC_Start_IT+0x2e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800512a:	b2db      	uxtb	r3, r3
 800512c:	e00b      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x46>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d104      	bne.n	800513e <HAL_TIM_IC_Start_IT+0x3e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e003      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x46>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005144:	b2db      	uxtb	r3, r3
 8005146:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <HAL_TIM_IC_Start_IT+0x58>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e013      	b.n	8005180 <HAL_TIM_IC_Start_IT+0x80>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b04      	cmp	r3, #4
 800515c:	d104      	bne.n	8005168 <HAL_TIM_IC_Start_IT+0x68>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e00b      	b.n	8005180 <HAL_TIM_IC_Start_IT+0x80>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b08      	cmp	r3, #8
 800516c:	d104      	bne.n	8005178 <HAL_TIM_IC_Start_IT+0x78>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e003      	b.n	8005180 <HAL_TIM_IC_Start_IT+0x80>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800517e:	b2db      	uxtb	r3, r3
 8005180:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005182:	7bbb      	ldrb	r3, [r7, #14]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d102      	bne.n	800518e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005188:	7b7b      	ldrb	r3, [r7, #13]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d001      	beq.n	8005192 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0c2      	b.n	8005318 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_IC_Start_IT+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	e013      	b.n	80051ca <HAL_TIM_IC_Start_IT+0xca>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_IC_Start_IT+0xb2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	e00b      	b.n	80051ca <HAL_TIM_IC_Start_IT+0xca>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_IC_Start_IT+0xc2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c0:	e003      	b.n	80051ca <HAL_TIM_IC_Start_IT+0xca>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <HAL_TIM_IC_Start_IT+0xda>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d8:	e013      	b.n	8005202 <HAL_TIM_IC_Start_IT+0x102>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d104      	bne.n	80051ea <HAL_TIM_IC_Start_IT+0xea>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051e8:	e00b      	b.n	8005202 <HAL_TIM_IC_Start_IT+0x102>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_IC_Start_IT+0xfa>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f8:	e003      	b.n	8005202 <HAL_TIM_IC_Start_IT+0x102>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d841      	bhi.n	800528c <HAL_TIM_IC_Start_IT+0x18c>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <HAL_TIM_IC_Start_IT+0x110>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005245 	.word	0x08005245
 8005214:	0800528d 	.word	0x0800528d
 8005218:	0800528d 	.word	0x0800528d
 800521c:	0800528d 	.word	0x0800528d
 8005220:	08005257 	.word	0x08005257
 8005224:	0800528d 	.word	0x0800528d
 8005228:	0800528d 	.word	0x0800528d
 800522c:	0800528d 	.word	0x0800528d
 8005230:	08005269 	.word	0x08005269
 8005234:	0800528d 	.word	0x0800528d
 8005238:	0800528d 	.word	0x0800528d
 800523c:	0800528d 	.word	0x0800528d
 8005240:	0800527b 	.word	0x0800527b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0202 	orr.w	r2, r2, #2
 8005252:	60da      	str	r2, [r3, #12]
      break;
 8005254:	e01d      	b.n	8005292 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0204 	orr.w	r2, r2, #4
 8005264:	60da      	str	r2, [r3, #12]
      break;
 8005266:	e014      	b.n	8005292 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0208 	orr.w	r2, r2, #8
 8005276:	60da      	str	r2, [r3, #12]
      break;
 8005278:	e00b      	b.n	8005292 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0210 	orr.w	r2, r2, #16
 8005288:	60da      	str	r2, [r3, #12]
      break;
 800528a:	e002      	b.n	8005292 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	bf00      	nop
  }

  if (status == HAL_OK)
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d13e      	bne.n	8005316 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fbeb 	bl	8005a7c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1d      	ldr	r2, [pc, #116]	; (8005320 <HAL_TIM_IC_Start_IT+0x220>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d018      	beq.n	80052e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d013      	beq.n	80052e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <HAL_TIM_IC_Start_IT+0x224>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00e      	beq.n	80052e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a17      	ldr	r2, [pc, #92]	; (8005328 <HAL_TIM_IC_Start_IT+0x228>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d009      	beq.n	80052e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <HAL_TIM_IC_Start_IT+0x22c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a14      	ldr	r2, [pc, #80]	; (8005330 <HAL_TIM_IC_Start_IT+0x230>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d111      	bne.n	8005306 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b06      	cmp	r3, #6
 80052f2:	d010      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	e007      	b.n	8005316 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40014000 	.word	0x40014000

08005334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0202 	mvn.w	r2, #2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fb ff70 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9c0 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9c7 	bl	8005718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0204 	mvn.w	r2, #4
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fb ff46 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f996 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f99d 	bl	8005718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0208 	mvn.w	r2, #8
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fb ff1c 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f96c 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f973 	bl	8005718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0210 	mvn.w	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2208      	movs	r2, #8
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fb fef2 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f942 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f949 	bl	8005718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fc fb08 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fb6a 	bl	8005bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f90e 	bl	800572c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d10e      	bne.n	800553c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b20      	cmp	r3, #32
 800552a:	d107      	bne.n	800553c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0220 	mvn.w	r2, #32
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fb34 	bl	8005ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_TIM_IC_ConfigChannel+0x1e>
 800555e:	2302      	movs	r3, #2
 8005560:	e088      	b.n	8005674 <HAL_TIM_IC_ConfigChannel+0x130>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d11b      	bne.n	80055a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6819      	ldr	r1, [r3, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f000 f95e 	bl	8005840 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 020c 	bic.w	r2, r2, #12
 8005592:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6999      	ldr	r1, [r3, #24]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	619a      	str	r2, [r3, #24]
 80055a6:	e060      	b.n	800566a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d11c      	bne.n	80055e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f000 f9a7 	bl	8005910 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6999      	ldr	r1, [r3, #24]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	021a      	lsls	r2, r3, #8
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	619a      	str	r2, [r3, #24]
 80055e6:	e040      	b.n	800566a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d11b      	bne.n	8005626 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f000 f9c4 	bl	800598a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 020c 	bic.w	r2, r2, #12
 8005610:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69d9      	ldr	r1, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	61da      	str	r2, [r3, #28]
 8005624:	e021      	b.n	800566a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b0c      	cmp	r3, #12
 800562a:	d11c      	bne.n	8005666 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f000 f9e1 	bl	8005a02 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800564e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69d9      	ldr	r1, [r3, #28]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	61da      	str	r2, [r3, #28]
 8005664:	e001      	b.n	800566a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005672:	7dfb      	ldrb	r3, [r7, #23]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b0c      	cmp	r3, #12
 800568e:	d831      	bhi.n	80056f4 <HAL_TIM_ReadCapturedValue+0x78>
 8005690:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005696:	bf00      	nop
 8005698:	080056cd 	.word	0x080056cd
 800569c:	080056f5 	.word	0x080056f5
 80056a0:	080056f5 	.word	0x080056f5
 80056a4:	080056f5 	.word	0x080056f5
 80056a8:	080056d7 	.word	0x080056d7
 80056ac:	080056f5 	.word	0x080056f5
 80056b0:	080056f5 	.word	0x080056f5
 80056b4:	080056f5 	.word	0x080056f5
 80056b8:	080056e1 	.word	0x080056e1
 80056bc:	080056f5 	.word	0x080056f5
 80056c0:	080056f5 	.word	0x080056f5
 80056c4:	080056f5 	.word	0x080056f5
 80056c8:	080056eb 	.word	0x080056eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	60fb      	str	r3, [r7, #12]

      break;
 80056d4:	e00f      	b.n	80056f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	60fb      	str	r3, [r7, #12]

      break;
 80056de:	e00a      	b.n	80056f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	60fb      	str	r3, [r7, #12]

      break;
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	60fb      	str	r3, [r7, #12]

      break;
 80056f2:	e000      	b.n	80056f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80056f4:	bf00      	nop
  }

  return tmpreg;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a34      	ldr	r2, [pc, #208]	; (8005824 <TIM_Base_SetConfig+0xe4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a31      	ldr	r2, [pc, #196]	; (8005828 <TIM_Base_SetConfig+0xe8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a30      	ldr	r2, [pc, #192]	; (800582c <TIM_Base_SetConfig+0xec>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <TIM_Base_SetConfig+0xf0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <TIM_Base_SetConfig+0xe4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d017      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a22      	ldr	r2, [pc, #136]	; (8005828 <TIM_Base_SetConfig+0xe8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a21      	ldr	r2, [pc, #132]	; (800582c <TIM_Base_SetConfig+0xec>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a20      	ldr	r2, [pc, #128]	; (8005830 <TIM_Base_SetConfig+0xf0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <TIM_Base_SetConfig+0xf4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <TIM_Base_SetConfig+0xf8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1d      	ldr	r2, [pc, #116]	; (800583c <TIM_Base_SetConfig+0xfc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d108      	bne.n	80057dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a08      	ldr	r2, [pc, #32]	; (8005824 <TIM_Base_SetConfig+0xe4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d103      	bne.n	8005810 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	615a      	str	r2, [r3, #20]
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800

08005840 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0201 	bic.w	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a24      	ldr	r2, [pc, #144]	; (80058fc <TIM_TI1_SetConfig+0xbc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <TIM_TI1_SetConfig+0x56>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005874:	d00f      	beq.n	8005896 <TIM_TI1_SetConfig+0x56>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a21      	ldr	r2, [pc, #132]	; (8005900 <TIM_TI1_SetConfig+0xc0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00b      	beq.n	8005896 <TIM_TI1_SetConfig+0x56>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a20      	ldr	r2, [pc, #128]	; (8005904 <TIM_TI1_SetConfig+0xc4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <TIM_TI1_SetConfig+0x56>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <TIM_TI1_SetConfig+0xc8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_TI1_SetConfig+0x56>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a1e      	ldr	r2, [pc, #120]	; (800590c <TIM_TI1_SetConfig+0xcc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d101      	bne.n	800589a <TIM_TI1_SetConfig+0x5a>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <TIM_TI1_SetConfig+0x5c>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e003      	b.n	80058ba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f023 030a 	bic.w	r3, r3, #10
 80058d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f003 030a 	and.w	r3, r3, #10
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40010000 	.word	0x40010000
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40014000 	.word	0x40014000

08005910 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0210 	bic.w	r2, r3, #16
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800594e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	031b      	lsls	r3, r3, #12
 8005954:	b29b      	uxth	r3, r3
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005962:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800598a:	b480      	push	{r7}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
 8005996:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80059da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b087      	sub	sp, #28
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2201      	movs	r2, #1
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1a      	ldr	r2, [r3, #32]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1a      	ldr	r2, [r3, #32]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e050      	b.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d018      	beq.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2c:	d013      	beq.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d10c      	bne.n	8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40000c00 	.word	0x40000c00
 8005ba0:	40014000 	.word	0x40014000

08005ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e03f      	b.n	8005c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fd f836 	bl	8002c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	; 0x24
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fd1f 	bl	8006654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	4613      	mov	r3, r2
 8005c72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d130      	bne.n	8005ce2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_UART_Transmit_IT+0x26>
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e029      	b.n	8005ce4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Transmit_IT+0x38>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e022      	b.n	8005ce4 <HAL_UART_Transmit_IT+0x7e>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	88fa      	ldrh	r2, [r7, #6]
 8005cb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	88fa      	ldrh	r2, [r7, #6]
 8005cb6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2221      	movs	r2, #33	; 0x21
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cdc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e000      	b.n	8005ce4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d11d      	bne.n	8005d46 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_UART_Receive_IT+0x26>
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e016      	b.n	8005d48 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_UART_Receive_IT+0x38>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e00f      	b.n	8005d48 <HAL_UART_Receive_IT+0x58>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fab5 	bl	80062ac <UART_Start_Receive_IT>
 8005d42:	4603      	mov	r3, r0
 8005d44:	e000      	b.n	8005d48 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d46:	2302      	movs	r3, #2
  }
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b0ba      	sub	sp, #232	; 0xe8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10f      	bne.n	8005db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <HAL_UART_IRQHandler+0x66>
 8005da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb95 	bl	80064de <UART_Receive_IT>
      return;
 8005db4:	e256      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 80de 	beq.w	8005f7c <HAL_UART_IRQHandler+0x22c>
 8005dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80d1 	beq.w	8005f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_UART_IRQHandler+0xae>
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f043 0201 	orr.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_UART_IRQHandler+0xd2>
 8005e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f043 0202 	orr.w	r2, r3, #2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_UART_IRQHandler+0xf6>
 8005e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d011      	beq.n	8005e76 <HAL_UART_IRQHandler+0x126>
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d105      	bne.n	8005e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f043 0208 	orr.w	r2, r3, #8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 81ed 	beq.w	800625a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_UART_IRQHandler+0x14e>
 8005e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fb20 	bl	80064de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <HAL_UART_IRQHandler+0x17a>
 8005ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d04f      	beq.n	8005f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa28 	bl	8006320 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d141      	bne.n	8005f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1d9      	bne.n	8005ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d013      	beq.n	8005f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	4a7d      	ldr	r2, [pc, #500]	; (800612c <HAL_UART_IRQHandler+0x3dc>)
 8005f38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fd f921 	bl	8003186 <HAL_DMA_Abort_IT>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f54:	4610      	mov	r0, r2
 8005f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	e00e      	b.n	8005f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f990 	bl	8006280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	e00a      	b.n	8005f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f98c 	bl	8006280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	e006      	b.n	8005f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f988 	bl	8006280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f76:	e170      	b.n	800625a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	bf00      	nop
    return;
 8005f7a:	e16e      	b.n	800625a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	f040 814a 	bne.w	800621a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 8143 	beq.w	800621a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 813c 	beq.w	800621a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b40      	cmp	r3, #64	; 0x40
 8005fc4:	f040 80b4 	bne.w	8006130 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8140 	beq.w	800625e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	f080 8139 	bcs.w	800625e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffe:	f000 8088 	beq.w	8006112 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800601c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800602e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800603a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1d9      	bne.n	8006002 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3314      	adds	r3, #20
 8006054:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800605e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3314      	adds	r3, #20
 800606e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006072:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006076:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800607a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e1      	bne.n	800604e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800609a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800609c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3314      	adds	r3, #20
 80060aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e3      	bne.n	800608a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e2:	f023 0310 	bic.w	r3, r3, #16
 80060e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80060f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e3      	bne.n	80060d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	4618      	mov	r0, r3
 800610e:	f7fc ffca 	bl	80030a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800611a:	b29b      	uxth	r3, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	b29b      	uxth	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f8b6 	bl	8006294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006128:	e099      	b.n	800625e <HAL_UART_IRQHandler+0x50e>
 800612a:	bf00      	nop
 800612c:	080063e7 	.word	0x080063e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006138:	b29b      	uxth	r3, r3
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 808b 	beq.w	8006262 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800614c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8086 	beq.w	8006262 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800616c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800617a:	647a      	str	r2, [r7, #68]	; 0x44
 800617c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e3      	bne.n	8006156 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	623b      	str	r3, [r7, #32]
   return(result);
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3314      	adds	r3, #20
 80061ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061b2:	633a      	str	r2, [r7, #48]	; 0x30
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e3      	bne.n	800618e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0310 	bic.w	r3, r3, #16
 80061ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061f8:	61fa      	str	r2, [r7, #28]
 80061fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	617b      	str	r3, [r7, #20]
   return(result);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e3      	bne.n	80061d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800620c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f83e 	bl	8006294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006218:	e023      	b.n	8006262 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <HAL_UART_IRQHandler+0x4ea>
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f8eb 	bl	800640e <UART_Transmit_IT>
    return;
 8006238:	e014      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <HAL_UART_IRQHandler+0x514>
 8006246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f92b 	bl	80064ae <UART_EndTransmit_IT>
    return;
 8006258:	e004      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
    return;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
      return;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_UART_IRQHandler+0x514>
      return;
 8006262:	bf00      	nop
  }
}
 8006264:	37e8      	adds	r7, #232	; 0xe8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop

0800626c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	88fa      	ldrh	r2, [r7, #6]
 80062ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2222      	movs	r2, #34	; 0x22
 80062d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0220 	orr.w	r2, r2, #32
 8006310:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b095      	sub	sp, #84	; 0x54
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800633e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006348:	643a      	str	r2, [r7, #64]	; 0x40
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800634e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e5      	bne.n	8006328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3314      	adds	r3, #20
 8006362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	61fb      	str	r3, [r7, #28]
   return(result);
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	64bb      	str	r3, [r7, #72]	; 0x48
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3314      	adds	r3, #20
 800637a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e5      	bne.n	800635c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	2b01      	cmp	r3, #1
 8006396:	d119      	bne.n	80063cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f023 0310 	bic.w	r3, r3, #16
 80063ae:	647b      	str	r3, [r7, #68]	; 0x44
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	330c      	adds	r3, #12
 80063b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b8:	61ba      	str	r2, [r7, #24]
 80063ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6979      	ldr	r1, [r7, #20]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	613b      	str	r3, [r7, #16]
   return(result);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e5      	bne.n	8006398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063da:	bf00      	nop
 80063dc:	3754      	adds	r7, #84	; 0x54
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff ff3d 	bl	8006280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b21      	cmp	r3, #33	; 0x21
 8006420:	d13e      	bne.n	80064a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642a:	d114      	bne.n	8006456 <UART_Transmit_IT+0x48>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d110      	bne.n	8006456 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006448:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	1c9a      	adds	r2, r3, #2
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	621a      	str	r2, [r3, #32]
 8006454:	e008      	b.n	8006468 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	1c59      	adds	r1, r3, #1
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6211      	str	r1, [r2, #32]
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29b      	uxth	r3, r3
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4619      	mov	r1, r3
 8006476:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10f      	bne.n	800649c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800648a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fecc 	bl	800626c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b08c      	sub	sp, #48	; 0x30
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b22      	cmp	r3, #34	; 0x22
 80064f0:	f040 80ab 	bne.w	800664a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fc:	d117      	bne.n	800652e <UART_Receive_IT+0x50>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d113      	bne.n	800652e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	b29b      	uxth	r3, r3
 8006518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651c:	b29a      	uxth	r2, r3
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	1c9a      	adds	r2, r3, #2
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	629a      	str	r2, [r3, #40]	; 0x28
 800652c:	e026      	b.n	800657c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006534:	2300      	movs	r3, #0
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006540:	d007      	beq.n	8006552 <UART_Receive_IT+0x74>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <UART_Receive_IT+0x82>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	e008      	b.n	8006572 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800656c:	b2da      	uxtb	r2, r3
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29b      	uxth	r3, r3
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4619      	mov	r1, r3
 800658a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800658c:	2b00      	cmp	r3, #0
 800658e:	d15a      	bne.n	8006646 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0220 	bic.w	r2, r2, #32
 800659e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695a      	ldr	r2, [r3, #20]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d135      	bne.n	800663c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	613b      	str	r3, [r7, #16]
   return(result);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f023 0310 	bic.w	r3, r3, #16
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	623a      	str	r2, [r7, #32]
 80065f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	69f9      	ldr	r1, [r7, #28]
 80065fc:	6a3a      	ldr	r2, [r7, #32]
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	61bb      	str	r3, [r7, #24]
   return(result);
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e5      	bne.n	80065d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b10      	cmp	r3, #16
 8006616:	d10a      	bne.n	800662e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff fe2d 	bl	8006294 <HAL_UARTEx_RxEventCallback>
 800663a:	e002      	b.n	8006642 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fb f907 	bl	8001850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	e002      	b.n	800664c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e000      	b.n	800664c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800664a:	2302      	movs	r3, #2
  }
}
 800664c:	4618      	mov	r0, r3
 800664e:	3730      	adds	r7, #48	; 0x30
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	b09f      	sub	sp, #124	; 0x7c
 800665a:	af00      	add	r7, sp, #0
 800665c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800665e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666a:	68d9      	ldr	r1, [r3, #12]
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	ea40 0301 	orr.w	r3, r0, r1
 8006674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	431a      	orrs	r2, r3
 8006680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	431a      	orrs	r2, r3
 8006686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	4313      	orrs	r3, r2
 800668c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800668e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006698:	f021 010c 	bic.w	r1, r1, #12
 800669c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a2:	430b      	orrs	r3, r1
 80066a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b2:	6999      	ldr	r1, [r3, #24]
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	ea40 0301 	orr.w	r3, r0, r1
 80066bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4bc5      	ldr	r3, [pc, #788]	; (80069d8 <UART_SetConfig+0x384>)
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d004      	beq.n	80066d2 <UART_SetConfig+0x7e>
 80066c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4bc3      	ldr	r3, [pc, #780]	; (80069dc <UART_SetConfig+0x388>)
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d103      	bne.n	80066da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d2:	f7fe fcb1 	bl	8005038 <HAL_RCC_GetPCLK2Freq>
 80066d6:	6778      	str	r0, [r7, #116]	; 0x74
 80066d8:	e002      	b.n	80066e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066da:	f7fe fc99 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 80066de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e8:	f040 80b6 	bne.w	8006858 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ee:	461c      	mov	r4, r3
 80066f0:	f04f 0500 	mov.w	r5, #0
 80066f4:	4622      	mov	r2, r4
 80066f6:	462b      	mov	r3, r5
 80066f8:	1891      	adds	r1, r2, r2
 80066fa:	6439      	str	r1, [r7, #64]	; 0x40
 80066fc:	415b      	adcs	r3, r3
 80066fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006700:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006704:	1912      	adds	r2, r2, r4
 8006706:	eb45 0303 	adc.w	r3, r5, r3
 800670a:	f04f 0000 	mov.w	r0, #0
 800670e:	f04f 0100 	mov.w	r1, #0
 8006712:	00d9      	lsls	r1, r3, #3
 8006714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006718:	00d0      	lsls	r0, r2, #3
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	1911      	adds	r1, r2, r4
 8006720:	6639      	str	r1, [r7, #96]	; 0x60
 8006722:	416b      	adcs	r3, r5
 8006724:	667b      	str	r3, [r7, #100]	; 0x64
 8006726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	461a      	mov	r2, r3
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	1891      	adds	r1, r2, r2
 8006732:	63b9      	str	r1, [r7, #56]	; 0x38
 8006734:	415b      	adcs	r3, r3
 8006736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800673c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006740:	f7fa faaa 	bl	8000c98 <__aeabi_uldivmod>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4ba5      	ldr	r3, [pc, #660]	; (80069e0 <UART_SetConfig+0x38c>)
 800674a:	fba3 2302 	umull	r2, r3, r3, r2
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	011e      	lsls	r6, r3, #4
 8006752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006754:	461c      	mov	r4, r3
 8006756:	f04f 0500 	mov.w	r5, #0
 800675a:	4622      	mov	r2, r4
 800675c:	462b      	mov	r3, r5
 800675e:	1891      	adds	r1, r2, r2
 8006760:	6339      	str	r1, [r7, #48]	; 0x30
 8006762:	415b      	adcs	r3, r3
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
 8006766:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800676a:	1912      	adds	r2, r2, r4
 800676c:	eb45 0303 	adc.w	r3, r5, r3
 8006770:	f04f 0000 	mov.w	r0, #0
 8006774:	f04f 0100 	mov.w	r1, #0
 8006778:	00d9      	lsls	r1, r3, #3
 800677a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800677e:	00d0      	lsls	r0, r2, #3
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	1911      	adds	r1, r2, r4
 8006786:	65b9      	str	r1, [r7, #88]	; 0x58
 8006788:	416b      	adcs	r3, r5
 800678a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800678c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	461a      	mov	r2, r3
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	1891      	adds	r1, r2, r2
 8006798:	62b9      	str	r1, [r7, #40]	; 0x28
 800679a:	415b      	adcs	r3, r3
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067a6:	f7fa fa77 	bl	8000c98 <__aeabi_uldivmod>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4b8c      	ldr	r3, [pc, #560]	; (80069e0 <UART_SetConfig+0x38c>)
 80067b0:	fba3 1302 	umull	r1, r3, r3, r2
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	2164      	movs	r1, #100	; 0x64
 80067b8:	fb01 f303 	mul.w	r3, r1, r3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	3332      	adds	r3, #50	; 0x32
 80067c2:	4a87      	ldr	r2, [pc, #540]	; (80069e0 <UART_SetConfig+0x38c>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067d0:	441e      	add	r6, r3
 80067d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d4:	4618      	mov	r0, r3
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	1894      	adds	r4, r2, r2
 80067e0:	623c      	str	r4, [r7, #32]
 80067e2:	415b      	adcs	r3, r3
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
 80067e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ea:	1812      	adds	r2, r2, r0
 80067ec:	eb41 0303 	adc.w	r3, r1, r3
 80067f0:	f04f 0400 	mov.w	r4, #0
 80067f4:	f04f 0500 	mov.w	r5, #0
 80067f8:	00dd      	lsls	r5, r3, #3
 80067fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067fe:	00d4      	lsls	r4, r2, #3
 8006800:	4622      	mov	r2, r4
 8006802:	462b      	mov	r3, r5
 8006804:	1814      	adds	r4, r2, r0
 8006806:	653c      	str	r4, [r7, #80]	; 0x50
 8006808:	414b      	adcs	r3, r1
 800680a:	657b      	str	r3, [r7, #84]	; 0x54
 800680c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	461a      	mov	r2, r3
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	1891      	adds	r1, r2, r2
 8006818:	61b9      	str	r1, [r7, #24]
 800681a:	415b      	adcs	r3, r3
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006822:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006826:	f7fa fa37 	bl	8000c98 <__aeabi_uldivmod>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4b6c      	ldr	r3, [pc, #432]	; (80069e0 <UART_SetConfig+0x38c>)
 8006830:	fba3 1302 	umull	r1, r3, r3, r2
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	2164      	movs	r1, #100	; 0x64
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	3332      	adds	r3, #50	; 0x32
 8006842:	4a67      	ldr	r2, [pc, #412]	; (80069e0 <UART_SetConfig+0x38c>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	f003 0207 	and.w	r2, r3, #7
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4432      	add	r2, r6
 8006854:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006856:	e0b9      	b.n	80069cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685a:	461c      	mov	r4, r3
 800685c:	f04f 0500 	mov.w	r5, #0
 8006860:	4622      	mov	r2, r4
 8006862:	462b      	mov	r3, r5
 8006864:	1891      	adds	r1, r2, r2
 8006866:	6139      	str	r1, [r7, #16]
 8006868:	415b      	adcs	r3, r3
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006870:	1912      	adds	r2, r2, r4
 8006872:	eb45 0303 	adc.w	r3, r5, r3
 8006876:	f04f 0000 	mov.w	r0, #0
 800687a:	f04f 0100 	mov.w	r1, #0
 800687e:	00d9      	lsls	r1, r3, #3
 8006880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006884:	00d0      	lsls	r0, r2, #3
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	eb12 0804 	adds.w	r8, r2, r4
 800688e:	eb43 0905 	adc.w	r9, r3, r5
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4618      	mov	r0, r3
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	008b      	lsls	r3, r1, #2
 80068a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068aa:	0082      	lsls	r2, r0, #2
 80068ac:	4640      	mov	r0, r8
 80068ae:	4649      	mov	r1, r9
 80068b0:	f7fa f9f2 	bl	8000c98 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4b49      	ldr	r3, [pc, #292]	; (80069e0 <UART_SetConfig+0x38c>)
 80068ba:	fba3 2302 	umull	r2, r3, r3, r2
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	011e      	lsls	r6, r3, #4
 80068c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c4:	4618      	mov	r0, r3
 80068c6:	f04f 0100 	mov.w	r1, #0
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	1894      	adds	r4, r2, r2
 80068d0:	60bc      	str	r4, [r7, #8]
 80068d2:	415b      	adcs	r3, r3
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068da:	1812      	adds	r2, r2, r0
 80068dc:	eb41 0303 	adc.w	r3, r1, r3
 80068e0:	f04f 0400 	mov.w	r4, #0
 80068e4:	f04f 0500 	mov.w	r5, #0
 80068e8:	00dd      	lsls	r5, r3, #3
 80068ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068ee:	00d4      	lsls	r4, r2, #3
 80068f0:	4622      	mov	r2, r4
 80068f2:	462b      	mov	r3, r5
 80068f4:	1814      	adds	r4, r2, r0
 80068f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80068f8:	414b      	adcs	r3, r1
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4618      	mov	r0, r3
 8006902:	f04f 0100 	mov.w	r1, #0
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	008b      	lsls	r3, r1, #2
 8006910:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006914:	0082      	lsls	r2, r0, #2
 8006916:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800691a:	f7fa f9bd 	bl	8000c98 <__aeabi_uldivmod>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <UART_SetConfig+0x38c>)
 8006924:	fba3 1302 	umull	r1, r3, r3, r2
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	2164      	movs	r1, #100	; 0x64
 800692c:	fb01 f303 	mul.w	r3, r1, r3
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	3332      	adds	r3, #50	; 0x32
 8006936:	4a2a      	ldr	r2, [pc, #168]	; (80069e0 <UART_SetConfig+0x38c>)
 8006938:	fba2 2303 	umull	r2, r3, r2, r3
 800693c:	095b      	lsrs	r3, r3, #5
 800693e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006942:	441e      	add	r6, r3
 8006944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006946:	4618      	mov	r0, r3
 8006948:	f04f 0100 	mov.w	r1, #0
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	1894      	adds	r4, r2, r2
 8006952:	603c      	str	r4, [r7, #0]
 8006954:	415b      	adcs	r3, r3
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695c:	1812      	adds	r2, r2, r0
 800695e:	eb41 0303 	adc.w	r3, r1, r3
 8006962:	f04f 0400 	mov.w	r4, #0
 8006966:	f04f 0500 	mov.w	r5, #0
 800696a:	00dd      	lsls	r5, r3, #3
 800696c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006970:	00d4      	lsls	r4, r2, #3
 8006972:	4622      	mov	r2, r4
 8006974:	462b      	mov	r3, r5
 8006976:	eb12 0a00 	adds.w	sl, r2, r0
 800697a:	eb43 0b01 	adc.w	fp, r3, r1
 800697e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4618      	mov	r0, r3
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	008b      	lsls	r3, r1, #2
 8006992:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006996:	0082      	lsls	r2, r0, #2
 8006998:	4650      	mov	r0, sl
 800699a:	4659      	mov	r1, fp
 800699c:	f7fa f97c 	bl	8000c98 <__aeabi_uldivmod>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <UART_SetConfig+0x38c>)
 80069a6:	fba3 1302 	umull	r1, r3, r3, r2
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	2164      	movs	r1, #100	; 0x64
 80069ae:	fb01 f303 	mul.w	r3, r1, r3
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	3332      	adds	r3, #50	; 0x32
 80069b8:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <UART_SetConfig+0x38c>)
 80069ba:	fba2 2303 	umull	r2, r3, r2, r3
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	f003 020f 	and.w	r2, r3, #15
 80069c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4432      	add	r2, r6
 80069ca:	609a      	str	r2, [r3, #8]
}
 80069cc:	bf00      	nop
 80069ce:	377c      	adds	r7, #124	; 0x7c
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d6:	bf00      	nop
 80069d8:	40011000 	.word	0x40011000
 80069dc:	40011400 	.word	0x40011400
 80069e0:	51eb851f 	.word	0x51eb851f

080069e4 <__errno>:
 80069e4:	4b01      	ldr	r3, [pc, #4]	; (80069ec <__errno+0x8>)
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	2000000c 	.word	0x2000000c

080069f0 <__libc_init_array>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4d0d      	ldr	r5, [pc, #52]	; (8006a28 <__libc_init_array+0x38>)
 80069f4:	4c0d      	ldr	r4, [pc, #52]	; (8006a2c <__libc_init_array+0x3c>)
 80069f6:	1b64      	subs	r4, r4, r5
 80069f8:	10a4      	asrs	r4, r4, #2
 80069fa:	2600      	movs	r6, #0
 80069fc:	42a6      	cmp	r6, r4
 80069fe:	d109      	bne.n	8006a14 <__libc_init_array+0x24>
 8006a00:	4d0b      	ldr	r5, [pc, #44]	; (8006a30 <__libc_init_array+0x40>)
 8006a02:	4c0c      	ldr	r4, [pc, #48]	; (8006a34 <__libc_init_array+0x44>)
 8006a04:	f002 ff38 	bl	8009878 <_init>
 8006a08:	1b64      	subs	r4, r4, r5
 8006a0a:	10a4      	asrs	r4, r4, #2
 8006a0c:	2600      	movs	r6, #0
 8006a0e:	42a6      	cmp	r6, r4
 8006a10:	d105      	bne.n	8006a1e <__libc_init_array+0x2e>
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a18:	4798      	blx	r3
 8006a1a:	3601      	adds	r6, #1
 8006a1c:	e7ee      	b.n	80069fc <__libc_init_array+0xc>
 8006a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a22:	4798      	blx	r3
 8006a24:	3601      	adds	r6, #1
 8006a26:	e7f2      	b.n	8006a0e <__libc_init_array+0x1e>
 8006a28:	08009cb4 	.word	0x08009cb4
 8006a2c:	08009cb4 	.word	0x08009cb4
 8006a30:	08009cb4 	.word	0x08009cb4
 8006a34:	08009cb8 	.word	0x08009cb8

08006a38 <memset>:
 8006a38:	4402      	add	r2, r0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d100      	bne.n	8006a42 <memset+0xa>
 8006a40:	4770      	bx	lr
 8006a42:	f803 1b01 	strb.w	r1, [r3], #1
 8006a46:	e7f9      	b.n	8006a3c <memset+0x4>

08006a48 <__cvt>:
 8006a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	ec55 4b10 	vmov	r4, r5, d0
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	460e      	mov	r6, r1
 8006a54:	4619      	mov	r1, r3
 8006a56:	462b      	mov	r3, r5
 8006a58:	bfbb      	ittet	lt
 8006a5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a5e:	461d      	movlt	r5, r3
 8006a60:	2300      	movge	r3, #0
 8006a62:	232d      	movlt	r3, #45	; 0x2d
 8006a64:	700b      	strb	r3, [r1, #0]
 8006a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a6c:	4691      	mov	r9, r2
 8006a6e:	f023 0820 	bic.w	r8, r3, #32
 8006a72:	bfbc      	itt	lt
 8006a74:	4622      	movlt	r2, r4
 8006a76:	4614      	movlt	r4, r2
 8006a78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a7c:	d005      	beq.n	8006a8a <__cvt+0x42>
 8006a7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a82:	d100      	bne.n	8006a86 <__cvt+0x3e>
 8006a84:	3601      	adds	r6, #1
 8006a86:	2102      	movs	r1, #2
 8006a88:	e000      	b.n	8006a8c <__cvt+0x44>
 8006a8a:	2103      	movs	r1, #3
 8006a8c:	ab03      	add	r3, sp, #12
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	ab02      	add	r3, sp, #8
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	ec45 4b10 	vmov	d0, r4, r5
 8006a98:	4653      	mov	r3, sl
 8006a9a:	4632      	mov	r2, r6
 8006a9c:	f000 fcec 	bl	8007478 <_dtoa_r>
 8006aa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	d102      	bne.n	8006aae <__cvt+0x66>
 8006aa8:	f019 0f01 	tst.w	r9, #1
 8006aac:	d022      	beq.n	8006af4 <__cvt+0xac>
 8006aae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ab2:	eb07 0906 	add.w	r9, r7, r6
 8006ab6:	d110      	bne.n	8006ada <__cvt+0x92>
 8006ab8:	783b      	ldrb	r3, [r7, #0]
 8006aba:	2b30      	cmp	r3, #48	; 0x30
 8006abc:	d10a      	bne.n	8006ad4 <__cvt+0x8c>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	f7fa f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aca:	b918      	cbnz	r0, 8006ad4 <__cvt+0x8c>
 8006acc:	f1c6 0601 	rsb	r6, r6, #1
 8006ad0:	f8ca 6000 	str.w	r6, [sl]
 8006ad4:	f8da 3000 	ldr.w	r3, [sl]
 8006ad8:	4499      	add	r9, r3
 8006ada:	2200      	movs	r2, #0
 8006adc:	2300      	movs	r3, #0
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7f9 fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ae6:	b108      	cbz	r0, 8006aec <__cvt+0xa4>
 8006ae8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006aec:	2230      	movs	r2, #48	; 0x30
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	454b      	cmp	r3, r9
 8006af2:	d307      	bcc.n	8006b04 <__cvt+0xbc>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006af8:	1bdb      	subs	r3, r3, r7
 8006afa:	4638      	mov	r0, r7
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	b004      	add	sp, #16
 8006b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b04:	1c59      	adds	r1, r3, #1
 8006b06:	9103      	str	r1, [sp, #12]
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e7f0      	b.n	8006aee <__cvt+0xa6>

08006b0c <__exponent>:
 8006b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2900      	cmp	r1, #0
 8006b12:	bfb8      	it	lt
 8006b14:	4249      	neglt	r1, r1
 8006b16:	f803 2b02 	strb.w	r2, [r3], #2
 8006b1a:	bfb4      	ite	lt
 8006b1c:	222d      	movlt	r2, #45	; 0x2d
 8006b1e:	222b      	movge	r2, #43	; 0x2b
 8006b20:	2909      	cmp	r1, #9
 8006b22:	7042      	strb	r2, [r0, #1]
 8006b24:	dd2a      	ble.n	8006b7c <__exponent+0x70>
 8006b26:	f10d 0407 	add.w	r4, sp, #7
 8006b2a:	46a4      	mov	ip, r4
 8006b2c:	270a      	movs	r7, #10
 8006b2e:	46a6      	mov	lr, r4
 8006b30:	460a      	mov	r2, r1
 8006b32:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b36:	fb07 1516 	mls	r5, r7, r6, r1
 8006b3a:	3530      	adds	r5, #48	; 0x30
 8006b3c:	2a63      	cmp	r2, #99	; 0x63
 8006b3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b46:	4631      	mov	r1, r6
 8006b48:	dcf1      	bgt.n	8006b2e <__exponent+0x22>
 8006b4a:	3130      	adds	r1, #48	; 0x30
 8006b4c:	f1ae 0502 	sub.w	r5, lr, #2
 8006b50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b54:	1c44      	adds	r4, r0, #1
 8006b56:	4629      	mov	r1, r5
 8006b58:	4561      	cmp	r1, ip
 8006b5a:	d30a      	bcc.n	8006b72 <__exponent+0x66>
 8006b5c:	f10d 0209 	add.w	r2, sp, #9
 8006b60:	eba2 020e 	sub.w	r2, r2, lr
 8006b64:	4565      	cmp	r5, ip
 8006b66:	bf88      	it	hi
 8006b68:	2200      	movhi	r2, #0
 8006b6a:	4413      	add	r3, r2
 8006b6c:	1a18      	subs	r0, r3, r0
 8006b6e:	b003      	add	sp, #12
 8006b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b7a:	e7ed      	b.n	8006b58 <__exponent+0x4c>
 8006b7c:	2330      	movs	r3, #48	; 0x30
 8006b7e:	3130      	adds	r1, #48	; 0x30
 8006b80:	7083      	strb	r3, [r0, #2]
 8006b82:	70c1      	strb	r1, [r0, #3]
 8006b84:	1d03      	adds	r3, r0, #4
 8006b86:	e7f1      	b.n	8006b6c <__exponent+0x60>

08006b88 <_printf_float>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	ed2d 8b02 	vpush	{d8}
 8006b90:	b08d      	sub	sp, #52	; 0x34
 8006b92:	460c      	mov	r4, r1
 8006b94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b98:	4616      	mov	r6, r2
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	f001 fa57 	bl	8008050 <_localeconv_r>
 8006ba2:	f8d0 a000 	ldr.w	sl, [r0]
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	f7f9 fb1a 	bl	80001e0 <strlen>
 8006bac:	2300      	movs	r3, #0
 8006bae:	930a      	str	r3, [sp, #40]	; 0x28
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bbc:	3307      	adds	r3, #7
 8006bbe:	f023 0307 	bic.w	r3, r3, #7
 8006bc2:	f103 0208 	add.w	r2, r3, #8
 8006bc6:	f8c8 2000 	str.w	r2, [r8]
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bda:	9307      	str	r3, [sp, #28]
 8006bdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006be0:	ee08 0a10 	vmov	s16, r0
 8006be4:	4b9f      	ldr	r3, [pc, #636]	; (8006e64 <_printf_float+0x2dc>)
 8006be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bea:	f04f 32ff 	mov.w	r2, #4294967295
 8006bee:	f7f9 ffa5 	bl	8000b3c <__aeabi_dcmpun>
 8006bf2:	bb88      	cbnz	r0, 8006c58 <_printf_float+0xd0>
 8006bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf8:	4b9a      	ldr	r3, [pc, #616]	; (8006e64 <_printf_float+0x2dc>)
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	f7f9 ff7f 	bl	8000b00 <__aeabi_dcmple>
 8006c02:	bb48      	cbnz	r0, 8006c58 <_printf_float+0xd0>
 8006c04:	2200      	movs	r2, #0
 8006c06:	2300      	movs	r3, #0
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 ff6e 	bl	8000aec <__aeabi_dcmplt>
 8006c10:	b110      	cbz	r0, 8006c18 <_printf_float+0x90>
 8006c12:	232d      	movs	r3, #45	; 0x2d
 8006c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c18:	4b93      	ldr	r3, [pc, #588]	; (8006e68 <_printf_float+0x2e0>)
 8006c1a:	4894      	ldr	r0, [pc, #592]	; (8006e6c <_printf_float+0x2e4>)
 8006c1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c20:	bf94      	ite	ls
 8006c22:	4698      	movls	r8, r3
 8006c24:	4680      	movhi	r8, r0
 8006c26:	2303      	movs	r3, #3
 8006c28:	6123      	str	r3, [r4, #16]
 8006c2a:	9b05      	ldr	r3, [sp, #20]
 8006c2c:	f023 0204 	bic.w	r2, r3, #4
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	f04f 0900 	mov.w	r9, #0
 8006c36:	9700      	str	r7, [sp, #0]
 8006c38:	4633      	mov	r3, r6
 8006c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f9d8 	bl	8006ff4 <_printf_common>
 8006c44:	3001      	adds	r0, #1
 8006c46:	f040 8090 	bne.w	8006d6a <_printf_float+0x1e2>
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	b00d      	add	sp, #52	; 0x34
 8006c50:	ecbd 8b02 	vpop	{d8}
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	4642      	mov	r2, r8
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	f7f9 ff6c 	bl	8000b3c <__aeabi_dcmpun>
 8006c64:	b140      	cbz	r0, 8006c78 <_printf_float+0xf0>
 8006c66:	464b      	mov	r3, r9
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bfbc      	itt	lt
 8006c6c:	232d      	movlt	r3, #45	; 0x2d
 8006c6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c72:	487f      	ldr	r0, [pc, #508]	; (8006e70 <_printf_float+0x2e8>)
 8006c74:	4b7f      	ldr	r3, [pc, #508]	; (8006e74 <_printf_float+0x2ec>)
 8006c76:	e7d1      	b.n	8006c1c <_printf_float+0x94>
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c7e:	9206      	str	r2, [sp, #24]
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	d13f      	bne.n	8006d04 <_printf_float+0x17c>
 8006c84:	2306      	movs	r3, #6
 8006c86:	6063      	str	r3, [r4, #4]
 8006c88:	9b05      	ldr	r3, [sp, #20]
 8006c8a:	6861      	ldr	r1, [r4, #4]
 8006c8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c90:	2300      	movs	r3, #0
 8006c92:	9303      	str	r3, [sp, #12]
 8006c94:	ab0a      	add	r3, sp, #40	; 0x28
 8006c96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c9a:	ab09      	add	r3, sp, #36	; 0x24
 8006c9c:	ec49 8b10 	vmov	d0, r8, r9
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	6022      	str	r2, [r4, #0]
 8006ca4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f7ff fecd 	bl	8006a48 <__cvt>
 8006cae:	9b06      	ldr	r3, [sp, #24]
 8006cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cb2:	2b47      	cmp	r3, #71	; 0x47
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	d108      	bne.n	8006cca <_printf_float+0x142>
 8006cb8:	1cc8      	adds	r0, r1, #3
 8006cba:	db02      	blt.n	8006cc2 <_printf_float+0x13a>
 8006cbc:	6863      	ldr	r3, [r4, #4]
 8006cbe:	4299      	cmp	r1, r3
 8006cc0:	dd41      	ble.n	8006d46 <_printf_float+0x1be>
 8006cc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8006cc6:	fa5f fb8b 	uxtb.w	fp, fp
 8006cca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cce:	d820      	bhi.n	8006d12 <_printf_float+0x18a>
 8006cd0:	3901      	subs	r1, #1
 8006cd2:	465a      	mov	r2, fp
 8006cd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cd8:	9109      	str	r1, [sp, #36]	; 0x24
 8006cda:	f7ff ff17 	bl	8006b0c <__exponent>
 8006cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ce0:	1813      	adds	r3, r2, r0
 8006ce2:	2a01      	cmp	r2, #1
 8006ce4:	4681      	mov	r9, r0
 8006ce6:	6123      	str	r3, [r4, #16]
 8006ce8:	dc02      	bgt.n	8006cf0 <_printf_float+0x168>
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	07d2      	lsls	r2, r2, #31
 8006cee:	d501      	bpl.n	8006cf4 <_printf_float+0x16c>
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d09c      	beq.n	8006c36 <_printf_float+0xae>
 8006cfc:	232d      	movs	r3, #45	; 0x2d
 8006cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d02:	e798      	b.n	8006c36 <_printf_float+0xae>
 8006d04:	9a06      	ldr	r2, [sp, #24]
 8006d06:	2a47      	cmp	r2, #71	; 0x47
 8006d08:	d1be      	bne.n	8006c88 <_printf_float+0x100>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1bc      	bne.n	8006c88 <_printf_float+0x100>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e7b9      	b.n	8006c86 <_printf_float+0xfe>
 8006d12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d16:	d118      	bne.n	8006d4a <_printf_float+0x1c2>
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	dd0b      	ble.n	8006d36 <_printf_float+0x1ae>
 8006d1e:	6121      	str	r1, [r4, #16]
 8006d20:	b913      	cbnz	r3, 8006d28 <_printf_float+0x1a0>
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	07d0      	lsls	r0, r2, #31
 8006d26:	d502      	bpl.n	8006d2e <_printf_float+0x1a6>
 8006d28:	3301      	adds	r3, #1
 8006d2a:	440b      	add	r3, r1
 8006d2c:	6123      	str	r3, [r4, #16]
 8006d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d30:	f04f 0900 	mov.w	r9, #0
 8006d34:	e7de      	b.n	8006cf4 <_printf_float+0x16c>
 8006d36:	b913      	cbnz	r3, 8006d3e <_printf_float+0x1b6>
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	07d2      	lsls	r2, r2, #31
 8006d3c:	d501      	bpl.n	8006d42 <_printf_float+0x1ba>
 8006d3e:	3302      	adds	r3, #2
 8006d40:	e7f4      	b.n	8006d2c <_printf_float+0x1a4>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e7f2      	b.n	8006d2c <_printf_float+0x1a4>
 8006d46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4c:	4299      	cmp	r1, r3
 8006d4e:	db05      	blt.n	8006d5c <_printf_float+0x1d4>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	6121      	str	r1, [r4, #16]
 8006d54:	07d8      	lsls	r0, r3, #31
 8006d56:	d5ea      	bpl.n	8006d2e <_printf_float+0x1a6>
 8006d58:	1c4b      	adds	r3, r1, #1
 8006d5a:	e7e7      	b.n	8006d2c <_printf_float+0x1a4>
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	bfd4      	ite	le
 8006d60:	f1c1 0202 	rsble	r2, r1, #2
 8006d64:	2201      	movgt	r2, #1
 8006d66:	4413      	add	r3, r2
 8006d68:	e7e0      	b.n	8006d2c <_printf_float+0x1a4>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	055a      	lsls	r2, r3, #21
 8006d6e:	d407      	bmi.n	8006d80 <_printf_float+0x1f8>
 8006d70:	6923      	ldr	r3, [r4, #16]
 8006d72:	4642      	mov	r2, r8
 8006d74:	4631      	mov	r1, r6
 8006d76:	4628      	mov	r0, r5
 8006d78:	47b8      	blx	r7
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d12c      	bne.n	8006dd8 <_printf_float+0x250>
 8006d7e:	e764      	b.n	8006c4a <_printf_float+0xc2>
 8006d80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d84:	f240 80e0 	bls.w	8006f48 <_printf_float+0x3c0>
 8006d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f7f9 fea2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d034      	beq.n	8006e02 <_printf_float+0x27a>
 8006d98:	4a37      	ldr	r2, [pc, #220]	; (8006e78 <_printf_float+0x2f0>)
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	f43f af51 	beq.w	8006c4a <_printf_float+0xc2>
 8006da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dac:	429a      	cmp	r2, r3
 8006dae:	db02      	blt.n	8006db6 <_printf_float+0x22e>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	07d8      	lsls	r0, r3, #31
 8006db4:	d510      	bpl.n	8006dd8 <_printf_float+0x250>
 8006db6:	ee18 3a10 	vmov	r3, s16
 8006dba:	4652      	mov	r2, sl
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f af41 	beq.w	8006c4a <_printf_float+0xc2>
 8006dc8:	f04f 0800 	mov.w	r8, #0
 8006dcc:	f104 091a 	add.w	r9, r4, #26
 8006dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	4543      	cmp	r3, r8
 8006dd6:	dc09      	bgt.n	8006dec <_printf_float+0x264>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	079b      	lsls	r3, r3, #30
 8006ddc:	f100 8105 	bmi.w	8006fea <_printf_float+0x462>
 8006de0:	68e0      	ldr	r0, [r4, #12]
 8006de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de4:	4298      	cmp	r0, r3
 8006de6:	bfb8      	it	lt
 8006de8:	4618      	movlt	r0, r3
 8006dea:	e730      	b.n	8006c4e <_printf_float+0xc6>
 8006dec:	2301      	movs	r3, #1
 8006dee:	464a      	mov	r2, r9
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f af27 	beq.w	8006c4a <_printf_float+0xc2>
 8006dfc:	f108 0801 	add.w	r8, r8, #1
 8006e00:	e7e6      	b.n	8006dd0 <_printf_float+0x248>
 8006e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dc39      	bgt.n	8006e7c <_printf_float+0x2f4>
 8006e08:	4a1b      	ldr	r2, [pc, #108]	; (8006e78 <_printf_float+0x2f0>)
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f af19 	beq.w	8006c4a <_printf_float+0xc2>
 8006e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	d102      	bne.n	8006e26 <_printf_float+0x29e>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	d5d8      	bpl.n	8006dd8 <_printf_float+0x250>
 8006e26:	ee18 3a10 	vmov	r3, s16
 8006e2a:	4652      	mov	r2, sl
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4628      	mov	r0, r5
 8006e30:	47b8      	blx	r7
 8006e32:	3001      	adds	r0, #1
 8006e34:	f43f af09 	beq.w	8006c4a <_printf_float+0xc2>
 8006e38:	f04f 0900 	mov.w	r9, #0
 8006e3c:	f104 0a1a 	add.w	sl, r4, #26
 8006e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e42:	425b      	negs	r3, r3
 8006e44:	454b      	cmp	r3, r9
 8006e46:	dc01      	bgt.n	8006e4c <_printf_float+0x2c4>
 8006e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4a:	e792      	b.n	8006d72 <_printf_float+0x1ea>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4652      	mov	r2, sl
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f aef7 	beq.w	8006c4a <_printf_float+0xc2>
 8006e5c:	f109 0901 	add.w	r9, r9, #1
 8006e60:	e7ee      	b.n	8006e40 <_printf_float+0x2b8>
 8006e62:	bf00      	nop
 8006e64:	7fefffff 	.word	0x7fefffff
 8006e68:	080098d0 	.word	0x080098d0
 8006e6c:	080098d4 	.word	0x080098d4
 8006e70:	080098dc 	.word	0x080098dc
 8006e74:	080098d8 	.word	0x080098d8
 8006e78:	080098e0 	.word	0x080098e0
 8006e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e80:	429a      	cmp	r2, r3
 8006e82:	bfa8      	it	ge
 8006e84:	461a      	movge	r2, r3
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	4691      	mov	r9, r2
 8006e8a:	dc37      	bgt.n	8006efc <_printf_float+0x374>
 8006e8c:	f04f 0b00 	mov.w	fp, #0
 8006e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e94:	f104 021a 	add.w	r2, r4, #26
 8006e98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e9a:	9305      	str	r3, [sp, #20]
 8006e9c:	eba3 0309 	sub.w	r3, r3, r9
 8006ea0:	455b      	cmp	r3, fp
 8006ea2:	dc33      	bgt.n	8006f0c <_printf_float+0x384>
 8006ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	db3b      	blt.n	8006f24 <_printf_float+0x39c>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	07da      	lsls	r2, r3, #31
 8006eb0:	d438      	bmi.n	8006f24 <_printf_float+0x39c>
 8006eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	eba2 0901 	sub.w	r9, r2, r1
 8006ebe:	4599      	cmp	r9, r3
 8006ec0:	bfa8      	it	ge
 8006ec2:	4699      	movge	r9, r3
 8006ec4:	f1b9 0f00 	cmp.w	r9, #0
 8006ec8:	dc35      	bgt.n	8006f36 <_printf_float+0x3ae>
 8006eca:	f04f 0800 	mov.w	r8, #0
 8006ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ed2:	f104 0a1a 	add.w	sl, r4, #26
 8006ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eda:	1a9b      	subs	r3, r3, r2
 8006edc:	eba3 0309 	sub.w	r3, r3, r9
 8006ee0:	4543      	cmp	r3, r8
 8006ee2:	f77f af79 	ble.w	8006dd8 <_printf_float+0x250>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4652      	mov	r2, sl
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f43f aeaa 	beq.w	8006c4a <_printf_float+0xc2>
 8006ef6:	f108 0801 	add.w	r8, r8, #1
 8006efa:	e7ec      	b.n	8006ed6 <_printf_float+0x34e>
 8006efc:	4613      	mov	r3, r2
 8006efe:	4631      	mov	r1, r6
 8006f00:	4642      	mov	r2, r8
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	d1c0      	bne.n	8006e8c <_printf_float+0x304>
 8006f0a:	e69e      	b.n	8006c4a <_printf_float+0xc2>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	9205      	str	r2, [sp, #20]
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f ae97 	beq.w	8006c4a <_printf_float+0xc2>
 8006f1c:	9a05      	ldr	r2, [sp, #20]
 8006f1e:	f10b 0b01 	add.w	fp, fp, #1
 8006f22:	e7b9      	b.n	8006e98 <_printf_float+0x310>
 8006f24:	ee18 3a10 	vmov	r3, s16
 8006f28:	4652      	mov	r2, sl
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	d1be      	bne.n	8006eb2 <_printf_float+0x32a>
 8006f34:	e689      	b.n	8006c4a <_printf_float+0xc2>
 8006f36:	9a05      	ldr	r2, [sp, #20]
 8006f38:	464b      	mov	r3, r9
 8006f3a:	4442      	add	r2, r8
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b8      	blx	r7
 8006f42:	3001      	adds	r0, #1
 8006f44:	d1c1      	bne.n	8006eca <_printf_float+0x342>
 8006f46:	e680      	b.n	8006c4a <_printf_float+0xc2>
 8006f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4a:	2a01      	cmp	r2, #1
 8006f4c:	dc01      	bgt.n	8006f52 <_printf_float+0x3ca>
 8006f4e:	07db      	lsls	r3, r3, #31
 8006f50:	d538      	bpl.n	8006fc4 <_printf_float+0x43c>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4642      	mov	r2, r8
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f43f ae74 	beq.w	8006c4a <_printf_float+0xc2>
 8006f62:	ee18 3a10 	vmov	r3, s16
 8006f66:	4652      	mov	r2, sl
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	f43f ae6b 	beq.w	8006c4a <_printf_float+0xc2>
 8006f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f7f9 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f80:	b9d8      	cbnz	r0, 8006fba <_printf_float+0x432>
 8006f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f84:	f108 0201 	add.w	r2, r8, #1
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	d10e      	bne.n	8006fb2 <_printf_float+0x42a>
 8006f94:	e659      	b.n	8006c4a <_printf_float+0xc2>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4652      	mov	r2, sl
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f ae52 	beq.w	8006c4a <_printf_float+0xc2>
 8006fa6:	f108 0801 	add.w	r8, r8, #1
 8006faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fac:	3b01      	subs	r3, #1
 8006fae:	4543      	cmp	r3, r8
 8006fb0:	dcf1      	bgt.n	8006f96 <_printf_float+0x40e>
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fb8:	e6dc      	b.n	8006d74 <_printf_float+0x1ec>
 8006fba:	f04f 0800 	mov.w	r8, #0
 8006fbe:	f104 0a1a 	add.w	sl, r4, #26
 8006fc2:	e7f2      	b.n	8006faa <_printf_float+0x422>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	4642      	mov	r2, r8
 8006fc8:	e7df      	b.n	8006f8a <_printf_float+0x402>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	464a      	mov	r2, r9
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b8      	blx	r7
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	f43f ae38 	beq.w	8006c4a <_printf_float+0xc2>
 8006fda:	f108 0801 	add.w	r8, r8, #1
 8006fde:	68e3      	ldr	r3, [r4, #12]
 8006fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fe2:	1a5b      	subs	r3, r3, r1
 8006fe4:	4543      	cmp	r3, r8
 8006fe6:	dcf0      	bgt.n	8006fca <_printf_float+0x442>
 8006fe8:	e6fa      	b.n	8006de0 <_printf_float+0x258>
 8006fea:	f04f 0800 	mov.w	r8, #0
 8006fee:	f104 0919 	add.w	r9, r4, #25
 8006ff2:	e7f4      	b.n	8006fde <_printf_float+0x456>

08006ff4 <_printf_common>:
 8006ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff8:	4616      	mov	r6, r2
 8006ffa:	4699      	mov	r9, r3
 8006ffc:	688a      	ldr	r2, [r1, #8]
 8006ffe:	690b      	ldr	r3, [r1, #16]
 8007000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007004:	4293      	cmp	r3, r2
 8007006:	bfb8      	it	lt
 8007008:	4613      	movlt	r3, r2
 800700a:	6033      	str	r3, [r6, #0]
 800700c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007010:	4607      	mov	r7, r0
 8007012:	460c      	mov	r4, r1
 8007014:	b10a      	cbz	r2, 800701a <_printf_common+0x26>
 8007016:	3301      	adds	r3, #1
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	0699      	lsls	r1, r3, #26
 800701e:	bf42      	ittt	mi
 8007020:	6833      	ldrmi	r3, [r6, #0]
 8007022:	3302      	addmi	r3, #2
 8007024:	6033      	strmi	r3, [r6, #0]
 8007026:	6825      	ldr	r5, [r4, #0]
 8007028:	f015 0506 	ands.w	r5, r5, #6
 800702c:	d106      	bne.n	800703c <_printf_common+0x48>
 800702e:	f104 0a19 	add.w	sl, r4, #25
 8007032:	68e3      	ldr	r3, [r4, #12]
 8007034:	6832      	ldr	r2, [r6, #0]
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	42ab      	cmp	r3, r5
 800703a:	dc26      	bgt.n	800708a <_printf_common+0x96>
 800703c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007040:	1e13      	subs	r3, r2, #0
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	bf18      	it	ne
 8007046:	2301      	movne	r3, #1
 8007048:	0692      	lsls	r2, r2, #26
 800704a:	d42b      	bmi.n	80070a4 <_printf_common+0xb0>
 800704c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007050:	4649      	mov	r1, r9
 8007052:	4638      	mov	r0, r7
 8007054:	47c0      	blx	r8
 8007056:	3001      	adds	r0, #1
 8007058:	d01e      	beq.n	8007098 <_printf_common+0xa4>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	68e5      	ldr	r5, [r4, #12]
 800705e:	6832      	ldr	r2, [r6, #0]
 8007060:	f003 0306 	and.w	r3, r3, #6
 8007064:	2b04      	cmp	r3, #4
 8007066:	bf08      	it	eq
 8007068:	1aad      	subeq	r5, r5, r2
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	bf0c      	ite	eq
 8007070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007074:	2500      	movne	r5, #0
 8007076:	4293      	cmp	r3, r2
 8007078:	bfc4      	itt	gt
 800707a:	1a9b      	subgt	r3, r3, r2
 800707c:	18ed      	addgt	r5, r5, r3
 800707e:	2600      	movs	r6, #0
 8007080:	341a      	adds	r4, #26
 8007082:	42b5      	cmp	r5, r6
 8007084:	d11a      	bne.n	80070bc <_printf_common+0xc8>
 8007086:	2000      	movs	r0, #0
 8007088:	e008      	b.n	800709c <_printf_common+0xa8>
 800708a:	2301      	movs	r3, #1
 800708c:	4652      	mov	r2, sl
 800708e:	4649      	mov	r1, r9
 8007090:	4638      	mov	r0, r7
 8007092:	47c0      	blx	r8
 8007094:	3001      	adds	r0, #1
 8007096:	d103      	bne.n	80070a0 <_printf_common+0xac>
 8007098:	f04f 30ff 	mov.w	r0, #4294967295
 800709c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a0:	3501      	adds	r5, #1
 80070a2:	e7c6      	b.n	8007032 <_printf_common+0x3e>
 80070a4:	18e1      	adds	r1, r4, r3
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	2030      	movs	r0, #48	; 0x30
 80070aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070ae:	4422      	add	r2, r4
 80070b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070b8:	3302      	adds	r3, #2
 80070ba:	e7c7      	b.n	800704c <_printf_common+0x58>
 80070bc:	2301      	movs	r3, #1
 80070be:	4622      	mov	r2, r4
 80070c0:	4649      	mov	r1, r9
 80070c2:	4638      	mov	r0, r7
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d0e6      	beq.n	8007098 <_printf_common+0xa4>
 80070ca:	3601      	adds	r6, #1
 80070cc:	e7d9      	b.n	8007082 <_printf_common+0x8e>
	...

080070d0 <_printf_i>:
 80070d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d4:	460c      	mov	r4, r1
 80070d6:	4691      	mov	r9, r2
 80070d8:	7e27      	ldrb	r7, [r4, #24]
 80070da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070dc:	2f78      	cmp	r7, #120	; 0x78
 80070de:	4680      	mov	r8, r0
 80070e0:	469a      	mov	sl, r3
 80070e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070e6:	d807      	bhi.n	80070f8 <_printf_i+0x28>
 80070e8:	2f62      	cmp	r7, #98	; 0x62
 80070ea:	d80a      	bhi.n	8007102 <_printf_i+0x32>
 80070ec:	2f00      	cmp	r7, #0
 80070ee:	f000 80d8 	beq.w	80072a2 <_printf_i+0x1d2>
 80070f2:	2f58      	cmp	r7, #88	; 0x58
 80070f4:	f000 80a3 	beq.w	800723e <_printf_i+0x16e>
 80070f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007100:	e03a      	b.n	8007178 <_printf_i+0xa8>
 8007102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007106:	2b15      	cmp	r3, #21
 8007108:	d8f6      	bhi.n	80070f8 <_printf_i+0x28>
 800710a:	a001      	add	r0, pc, #4	; (adr r0, 8007110 <_printf_i+0x40>)
 800710c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007110:	08007169 	.word	0x08007169
 8007114:	0800717d 	.word	0x0800717d
 8007118:	080070f9 	.word	0x080070f9
 800711c:	080070f9 	.word	0x080070f9
 8007120:	080070f9 	.word	0x080070f9
 8007124:	080070f9 	.word	0x080070f9
 8007128:	0800717d 	.word	0x0800717d
 800712c:	080070f9 	.word	0x080070f9
 8007130:	080070f9 	.word	0x080070f9
 8007134:	080070f9 	.word	0x080070f9
 8007138:	080070f9 	.word	0x080070f9
 800713c:	08007289 	.word	0x08007289
 8007140:	080071ad 	.word	0x080071ad
 8007144:	0800726b 	.word	0x0800726b
 8007148:	080070f9 	.word	0x080070f9
 800714c:	080070f9 	.word	0x080070f9
 8007150:	080072ab 	.word	0x080072ab
 8007154:	080070f9 	.word	0x080070f9
 8007158:	080071ad 	.word	0x080071ad
 800715c:	080070f9 	.word	0x080070f9
 8007160:	080070f9 	.word	0x080070f9
 8007164:	08007273 	.word	0x08007273
 8007168:	680b      	ldr	r3, [r1, #0]
 800716a:	1d1a      	adds	r2, r3, #4
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	600a      	str	r2, [r1, #0]
 8007170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007178:	2301      	movs	r3, #1
 800717a:	e0a3      	b.n	80072c4 <_printf_i+0x1f4>
 800717c:	6825      	ldr	r5, [r4, #0]
 800717e:	6808      	ldr	r0, [r1, #0]
 8007180:	062e      	lsls	r6, r5, #24
 8007182:	f100 0304 	add.w	r3, r0, #4
 8007186:	d50a      	bpl.n	800719e <_printf_i+0xce>
 8007188:	6805      	ldr	r5, [r0, #0]
 800718a:	600b      	str	r3, [r1, #0]
 800718c:	2d00      	cmp	r5, #0
 800718e:	da03      	bge.n	8007198 <_printf_i+0xc8>
 8007190:	232d      	movs	r3, #45	; 0x2d
 8007192:	426d      	negs	r5, r5
 8007194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007198:	485e      	ldr	r0, [pc, #376]	; (8007314 <_printf_i+0x244>)
 800719a:	230a      	movs	r3, #10
 800719c:	e019      	b.n	80071d2 <_printf_i+0x102>
 800719e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071a2:	6805      	ldr	r5, [r0, #0]
 80071a4:	600b      	str	r3, [r1, #0]
 80071a6:	bf18      	it	ne
 80071a8:	b22d      	sxthne	r5, r5
 80071aa:	e7ef      	b.n	800718c <_printf_i+0xbc>
 80071ac:	680b      	ldr	r3, [r1, #0]
 80071ae:	6825      	ldr	r5, [r4, #0]
 80071b0:	1d18      	adds	r0, r3, #4
 80071b2:	6008      	str	r0, [r1, #0]
 80071b4:	0628      	lsls	r0, r5, #24
 80071b6:	d501      	bpl.n	80071bc <_printf_i+0xec>
 80071b8:	681d      	ldr	r5, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <_printf_i+0xf2>
 80071bc:	0669      	lsls	r1, r5, #25
 80071be:	d5fb      	bpl.n	80071b8 <_printf_i+0xe8>
 80071c0:	881d      	ldrh	r5, [r3, #0]
 80071c2:	4854      	ldr	r0, [pc, #336]	; (8007314 <_printf_i+0x244>)
 80071c4:	2f6f      	cmp	r7, #111	; 0x6f
 80071c6:	bf0c      	ite	eq
 80071c8:	2308      	moveq	r3, #8
 80071ca:	230a      	movne	r3, #10
 80071cc:	2100      	movs	r1, #0
 80071ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071d2:	6866      	ldr	r6, [r4, #4]
 80071d4:	60a6      	str	r6, [r4, #8]
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	bfa2      	ittt	ge
 80071da:	6821      	ldrge	r1, [r4, #0]
 80071dc:	f021 0104 	bicge.w	r1, r1, #4
 80071e0:	6021      	strge	r1, [r4, #0]
 80071e2:	b90d      	cbnz	r5, 80071e8 <_printf_i+0x118>
 80071e4:	2e00      	cmp	r6, #0
 80071e6:	d04d      	beq.n	8007284 <_printf_i+0x1b4>
 80071e8:	4616      	mov	r6, r2
 80071ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80071ee:	fb03 5711 	mls	r7, r3, r1, r5
 80071f2:	5dc7      	ldrb	r7, [r0, r7]
 80071f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071f8:	462f      	mov	r7, r5
 80071fa:	42bb      	cmp	r3, r7
 80071fc:	460d      	mov	r5, r1
 80071fe:	d9f4      	bls.n	80071ea <_printf_i+0x11a>
 8007200:	2b08      	cmp	r3, #8
 8007202:	d10b      	bne.n	800721c <_printf_i+0x14c>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	07df      	lsls	r7, r3, #31
 8007208:	d508      	bpl.n	800721c <_printf_i+0x14c>
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	6861      	ldr	r1, [r4, #4]
 800720e:	4299      	cmp	r1, r3
 8007210:	bfde      	ittt	le
 8007212:	2330      	movle	r3, #48	; 0x30
 8007214:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007218:	f106 36ff 	addle.w	r6, r6, #4294967295
 800721c:	1b92      	subs	r2, r2, r6
 800721e:	6122      	str	r2, [r4, #16]
 8007220:	f8cd a000 	str.w	sl, [sp]
 8007224:	464b      	mov	r3, r9
 8007226:	aa03      	add	r2, sp, #12
 8007228:	4621      	mov	r1, r4
 800722a:	4640      	mov	r0, r8
 800722c:	f7ff fee2 	bl	8006ff4 <_printf_common>
 8007230:	3001      	adds	r0, #1
 8007232:	d14c      	bne.n	80072ce <_printf_i+0x1fe>
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	b004      	add	sp, #16
 800723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723e:	4835      	ldr	r0, [pc, #212]	; (8007314 <_printf_i+0x244>)
 8007240:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	680e      	ldr	r6, [r1, #0]
 8007248:	061f      	lsls	r7, r3, #24
 800724a:	f856 5b04 	ldr.w	r5, [r6], #4
 800724e:	600e      	str	r6, [r1, #0]
 8007250:	d514      	bpl.n	800727c <_printf_i+0x1ac>
 8007252:	07d9      	lsls	r1, r3, #31
 8007254:	bf44      	itt	mi
 8007256:	f043 0320 	orrmi.w	r3, r3, #32
 800725a:	6023      	strmi	r3, [r4, #0]
 800725c:	b91d      	cbnz	r5, 8007266 <_printf_i+0x196>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	f023 0320 	bic.w	r3, r3, #32
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	2310      	movs	r3, #16
 8007268:	e7b0      	b.n	80071cc <_printf_i+0xfc>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	f043 0320 	orr.w	r3, r3, #32
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	2378      	movs	r3, #120	; 0x78
 8007274:	4828      	ldr	r0, [pc, #160]	; (8007318 <_printf_i+0x248>)
 8007276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800727a:	e7e3      	b.n	8007244 <_printf_i+0x174>
 800727c:	065e      	lsls	r6, r3, #25
 800727e:	bf48      	it	mi
 8007280:	b2ad      	uxthmi	r5, r5
 8007282:	e7e6      	b.n	8007252 <_printf_i+0x182>
 8007284:	4616      	mov	r6, r2
 8007286:	e7bb      	b.n	8007200 <_printf_i+0x130>
 8007288:	680b      	ldr	r3, [r1, #0]
 800728a:	6826      	ldr	r6, [r4, #0]
 800728c:	6960      	ldr	r0, [r4, #20]
 800728e:	1d1d      	adds	r5, r3, #4
 8007290:	600d      	str	r5, [r1, #0]
 8007292:	0635      	lsls	r5, r6, #24
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	d501      	bpl.n	800729c <_printf_i+0x1cc>
 8007298:	6018      	str	r0, [r3, #0]
 800729a:	e002      	b.n	80072a2 <_printf_i+0x1d2>
 800729c:	0671      	lsls	r1, r6, #25
 800729e:	d5fb      	bpl.n	8007298 <_printf_i+0x1c8>
 80072a0:	8018      	strh	r0, [r3, #0]
 80072a2:	2300      	movs	r3, #0
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	4616      	mov	r6, r2
 80072a8:	e7ba      	b.n	8007220 <_printf_i+0x150>
 80072aa:	680b      	ldr	r3, [r1, #0]
 80072ac:	1d1a      	adds	r2, r3, #4
 80072ae:	600a      	str	r2, [r1, #0]
 80072b0:	681e      	ldr	r6, [r3, #0]
 80072b2:	6862      	ldr	r2, [r4, #4]
 80072b4:	2100      	movs	r1, #0
 80072b6:	4630      	mov	r0, r6
 80072b8:	f7f8 ff9a 	bl	80001f0 <memchr>
 80072bc:	b108      	cbz	r0, 80072c2 <_printf_i+0x1f2>
 80072be:	1b80      	subs	r0, r0, r6
 80072c0:	6060      	str	r0, [r4, #4]
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	6123      	str	r3, [r4, #16]
 80072c6:	2300      	movs	r3, #0
 80072c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072cc:	e7a8      	b.n	8007220 <_printf_i+0x150>
 80072ce:	6923      	ldr	r3, [r4, #16]
 80072d0:	4632      	mov	r2, r6
 80072d2:	4649      	mov	r1, r9
 80072d4:	4640      	mov	r0, r8
 80072d6:	47d0      	blx	sl
 80072d8:	3001      	adds	r0, #1
 80072da:	d0ab      	beq.n	8007234 <_printf_i+0x164>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	079b      	lsls	r3, r3, #30
 80072e0:	d413      	bmi.n	800730a <_printf_i+0x23a>
 80072e2:	68e0      	ldr	r0, [r4, #12]
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	4298      	cmp	r0, r3
 80072e8:	bfb8      	it	lt
 80072ea:	4618      	movlt	r0, r3
 80072ec:	e7a4      	b.n	8007238 <_printf_i+0x168>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4632      	mov	r2, r6
 80072f2:	4649      	mov	r1, r9
 80072f4:	4640      	mov	r0, r8
 80072f6:	47d0      	blx	sl
 80072f8:	3001      	adds	r0, #1
 80072fa:	d09b      	beq.n	8007234 <_printf_i+0x164>
 80072fc:	3501      	adds	r5, #1
 80072fe:	68e3      	ldr	r3, [r4, #12]
 8007300:	9903      	ldr	r1, [sp, #12]
 8007302:	1a5b      	subs	r3, r3, r1
 8007304:	42ab      	cmp	r3, r5
 8007306:	dcf2      	bgt.n	80072ee <_printf_i+0x21e>
 8007308:	e7eb      	b.n	80072e2 <_printf_i+0x212>
 800730a:	2500      	movs	r5, #0
 800730c:	f104 0619 	add.w	r6, r4, #25
 8007310:	e7f5      	b.n	80072fe <_printf_i+0x22e>
 8007312:	bf00      	nop
 8007314:	080098e2 	.word	0x080098e2
 8007318:	080098f3 	.word	0x080098f3

0800731c <siprintf>:
 800731c:	b40e      	push	{r1, r2, r3}
 800731e:	b500      	push	{lr}
 8007320:	b09c      	sub	sp, #112	; 0x70
 8007322:	ab1d      	add	r3, sp, #116	; 0x74
 8007324:	9002      	str	r0, [sp, #8]
 8007326:	9006      	str	r0, [sp, #24]
 8007328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800732c:	4809      	ldr	r0, [pc, #36]	; (8007354 <siprintf+0x38>)
 800732e:	9107      	str	r1, [sp, #28]
 8007330:	9104      	str	r1, [sp, #16]
 8007332:	4909      	ldr	r1, [pc, #36]	; (8007358 <siprintf+0x3c>)
 8007334:	f853 2b04 	ldr.w	r2, [r3], #4
 8007338:	9105      	str	r1, [sp, #20]
 800733a:	6800      	ldr	r0, [r0, #0]
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	a902      	add	r1, sp, #8
 8007340:	f001 fb34 	bl	80089ac <_svfiprintf_r>
 8007344:	9b02      	ldr	r3, [sp, #8]
 8007346:	2200      	movs	r2, #0
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	b01c      	add	sp, #112	; 0x70
 800734c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007350:	b003      	add	sp, #12
 8007352:	4770      	bx	lr
 8007354:	2000000c 	.word	0x2000000c
 8007358:	ffff0208 	.word	0xffff0208

0800735c <quorem>:
 800735c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007360:	6903      	ldr	r3, [r0, #16]
 8007362:	690c      	ldr	r4, [r1, #16]
 8007364:	42a3      	cmp	r3, r4
 8007366:	4607      	mov	r7, r0
 8007368:	f2c0 8081 	blt.w	800746e <quorem+0x112>
 800736c:	3c01      	subs	r4, #1
 800736e:	f101 0814 	add.w	r8, r1, #20
 8007372:	f100 0514 	add.w	r5, r0, #20
 8007376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007384:	3301      	adds	r3, #1
 8007386:	429a      	cmp	r2, r3
 8007388:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800738c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007390:	fbb2 f6f3 	udiv	r6, r2, r3
 8007394:	d331      	bcc.n	80073fa <quorem+0x9e>
 8007396:	f04f 0e00 	mov.w	lr, #0
 800739a:	4640      	mov	r0, r8
 800739c:	46ac      	mov	ip, r5
 800739e:	46f2      	mov	sl, lr
 80073a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80073a4:	b293      	uxth	r3, r2
 80073a6:	fb06 e303 	mla	r3, r6, r3, lr
 80073aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	ebaa 0303 	sub.w	r3, sl, r3
 80073b4:	0c12      	lsrs	r2, r2, #16
 80073b6:	f8dc a000 	ldr.w	sl, [ip]
 80073ba:	fb06 e202 	mla	r2, r6, r2, lr
 80073be:	fa13 f38a 	uxtah	r3, r3, sl
 80073c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073c6:	fa1f fa82 	uxth.w	sl, r2
 80073ca:	f8dc 2000 	ldr.w	r2, [ip]
 80073ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80073d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073dc:	4581      	cmp	r9, r0
 80073de:	f84c 3b04 	str.w	r3, [ip], #4
 80073e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073e6:	d2db      	bcs.n	80073a0 <quorem+0x44>
 80073e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80073ec:	b92b      	cbnz	r3, 80073fa <quorem+0x9e>
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	3b04      	subs	r3, #4
 80073f2:	429d      	cmp	r5, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	d32e      	bcc.n	8007456 <quorem+0xfa>
 80073f8:	613c      	str	r4, [r7, #16]
 80073fa:	4638      	mov	r0, r7
 80073fc:	f001 f8c0 	bl	8008580 <__mcmp>
 8007400:	2800      	cmp	r0, #0
 8007402:	db24      	blt.n	800744e <quorem+0xf2>
 8007404:	3601      	adds	r6, #1
 8007406:	4628      	mov	r0, r5
 8007408:	f04f 0c00 	mov.w	ip, #0
 800740c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007410:	f8d0 e000 	ldr.w	lr, [r0]
 8007414:	b293      	uxth	r3, r2
 8007416:	ebac 0303 	sub.w	r3, ip, r3
 800741a:	0c12      	lsrs	r2, r2, #16
 800741c:	fa13 f38e 	uxtah	r3, r3, lr
 8007420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007428:	b29b      	uxth	r3, r3
 800742a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800742e:	45c1      	cmp	r9, r8
 8007430:	f840 3b04 	str.w	r3, [r0], #4
 8007434:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007438:	d2e8      	bcs.n	800740c <quorem+0xb0>
 800743a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800743e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007442:	b922      	cbnz	r2, 800744e <quorem+0xf2>
 8007444:	3b04      	subs	r3, #4
 8007446:	429d      	cmp	r5, r3
 8007448:	461a      	mov	r2, r3
 800744a:	d30a      	bcc.n	8007462 <quorem+0x106>
 800744c:	613c      	str	r4, [r7, #16]
 800744e:	4630      	mov	r0, r6
 8007450:	b003      	add	sp, #12
 8007452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	3b04      	subs	r3, #4
 800745a:	2a00      	cmp	r2, #0
 800745c:	d1cc      	bne.n	80073f8 <quorem+0x9c>
 800745e:	3c01      	subs	r4, #1
 8007460:	e7c7      	b.n	80073f2 <quorem+0x96>
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	3b04      	subs	r3, #4
 8007466:	2a00      	cmp	r2, #0
 8007468:	d1f0      	bne.n	800744c <quorem+0xf0>
 800746a:	3c01      	subs	r4, #1
 800746c:	e7eb      	b.n	8007446 <quorem+0xea>
 800746e:	2000      	movs	r0, #0
 8007470:	e7ee      	b.n	8007450 <quorem+0xf4>
 8007472:	0000      	movs	r0, r0
 8007474:	0000      	movs	r0, r0
	...

08007478 <_dtoa_r>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	ed2d 8b02 	vpush	{d8}
 8007480:	ec57 6b10 	vmov	r6, r7, d0
 8007484:	b095      	sub	sp, #84	; 0x54
 8007486:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007488:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800748c:	9105      	str	r1, [sp, #20]
 800748e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007492:	4604      	mov	r4, r0
 8007494:	9209      	str	r2, [sp, #36]	; 0x24
 8007496:	930f      	str	r3, [sp, #60]	; 0x3c
 8007498:	b975      	cbnz	r5, 80074b8 <_dtoa_r+0x40>
 800749a:	2010      	movs	r0, #16
 800749c:	f000 fddc 	bl	8008058 <malloc>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6260      	str	r0, [r4, #36]	; 0x24
 80074a4:	b920      	cbnz	r0, 80074b0 <_dtoa_r+0x38>
 80074a6:	4bb2      	ldr	r3, [pc, #712]	; (8007770 <_dtoa_r+0x2f8>)
 80074a8:	21ea      	movs	r1, #234	; 0xea
 80074aa:	48b2      	ldr	r0, [pc, #712]	; (8007774 <_dtoa_r+0x2fc>)
 80074ac:	f001 fb8e 	bl	8008bcc <__assert_func>
 80074b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074b4:	6005      	str	r5, [r0, #0]
 80074b6:	60c5      	str	r5, [r0, #12]
 80074b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ba:	6819      	ldr	r1, [r3, #0]
 80074bc:	b151      	cbz	r1, 80074d4 <_dtoa_r+0x5c>
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	604a      	str	r2, [r1, #4]
 80074c2:	2301      	movs	r3, #1
 80074c4:	4093      	lsls	r3, r2
 80074c6:	608b      	str	r3, [r1, #8]
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fe1b 	bl	8008104 <_Bfree>
 80074ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	1e3b      	subs	r3, r7, #0
 80074d6:	bfb9      	ittee	lt
 80074d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074dc:	9303      	strlt	r3, [sp, #12]
 80074de:	2300      	movge	r3, #0
 80074e0:	f8c8 3000 	strge.w	r3, [r8]
 80074e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80074e8:	4ba3      	ldr	r3, [pc, #652]	; (8007778 <_dtoa_r+0x300>)
 80074ea:	bfbc      	itt	lt
 80074ec:	2201      	movlt	r2, #1
 80074ee:	f8c8 2000 	strlt.w	r2, [r8]
 80074f2:	ea33 0309 	bics.w	r3, r3, r9
 80074f6:	d11b      	bne.n	8007530 <_dtoa_r+0xb8>
 80074f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007504:	4333      	orrs	r3, r6
 8007506:	f000 857a 	beq.w	8007ffe <_dtoa_r+0xb86>
 800750a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800750c:	b963      	cbnz	r3, 8007528 <_dtoa_r+0xb0>
 800750e:	4b9b      	ldr	r3, [pc, #620]	; (800777c <_dtoa_r+0x304>)
 8007510:	e024      	b.n	800755c <_dtoa_r+0xe4>
 8007512:	4b9b      	ldr	r3, [pc, #620]	; (8007780 <_dtoa_r+0x308>)
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	9800      	ldr	r0, [sp, #0]
 800751e:	b015      	add	sp, #84	; 0x54
 8007520:	ecbd 8b02 	vpop	{d8}
 8007524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007528:	4b94      	ldr	r3, [pc, #592]	; (800777c <_dtoa_r+0x304>)
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	3303      	adds	r3, #3
 800752e:	e7f3      	b.n	8007518 <_dtoa_r+0xa0>
 8007530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	ec51 0b17 	vmov	r0, r1, d7
 800753a:	2300      	movs	r3, #0
 800753c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007540:	f7f9 faca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007544:	4680      	mov	r8, r0
 8007546:	b158      	cbz	r0, 8007560 <_dtoa_r+0xe8>
 8007548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800754a:	2301      	movs	r3, #1
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8551 	beq.w	8007ff8 <_dtoa_r+0xb80>
 8007556:	488b      	ldr	r0, [pc, #556]	; (8007784 <_dtoa_r+0x30c>)
 8007558:	6018      	str	r0, [r3, #0]
 800755a:	1e43      	subs	r3, r0, #1
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	e7dd      	b.n	800751c <_dtoa_r+0xa4>
 8007560:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007564:	aa12      	add	r2, sp, #72	; 0x48
 8007566:	a913      	add	r1, sp, #76	; 0x4c
 8007568:	4620      	mov	r0, r4
 800756a:	f001 f8ad 	bl	80086c8 <__d2b>
 800756e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007572:	4683      	mov	fp, r0
 8007574:	2d00      	cmp	r5, #0
 8007576:	d07c      	beq.n	8007672 <_dtoa_r+0x1fa>
 8007578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800757a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800757e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007582:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007586:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800758a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800758e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007592:	4b7d      	ldr	r3, [pc, #500]	; (8007788 <_dtoa_r+0x310>)
 8007594:	2200      	movs	r2, #0
 8007596:	4630      	mov	r0, r6
 8007598:	4639      	mov	r1, r7
 800759a:	f7f8 fe7d 	bl	8000298 <__aeabi_dsub>
 800759e:	a36e      	add	r3, pc, #440	; (adr r3, 8007758 <_dtoa_r+0x2e0>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f7f9 f830 	bl	8000608 <__aeabi_dmul>
 80075a8:	a36d      	add	r3, pc, #436	; (adr r3, 8007760 <_dtoa_r+0x2e8>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f7f8 fe75 	bl	800029c <__adddf3>
 80075b2:	4606      	mov	r6, r0
 80075b4:	4628      	mov	r0, r5
 80075b6:	460f      	mov	r7, r1
 80075b8:	f7f8 ffbc 	bl	8000534 <__aeabi_i2d>
 80075bc:	a36a      	add	r3, pc, #424	; (adr r3, 8007768 <_dtoa_r+0x2f0>)
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	f7f9 f821 	bl	8000608 <__aeabi_dmul>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4630      	mov	r0, r6
 80075cc:	4639      	mov	r1, r7
 80075ce:	f7f8 fe65 	bl	800029c <__adddf3>
 80075d2:	4606      	mov	r6, r0
 80075d4:	460f      	mov	r7, r1
 80075d6:	f7f9 fac7 	bl	8000b68 <__aeabi_d2iz>
 80075da:	2200      	movs	r2, #0
 80075dc:	4682      	mov	sl, r0
 80075de:	2300      	movs	r3, #0
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	f7f9 fa82 	bl	8000aec <__aeabi_dcmplt>
 80075e8:	b148      	cbz	r0, 80075fe <_dtoa_r+0x186>
 80075ea:	4650      	mov	r0, sl
 80075ec:	f7f8 ffa2 	bl	8000534 <__aeabi_i2d>
 80075f0:	4632      	mov	r2, r6
 80075f2:	463b      	mov	r3, r7
 80075f4:	f7f9 fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f8:	b908      	cbnz	r0, 80075fe <_dtoa_r+0x186>
 80075fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075fe:	f1ba 0f16 	cmp.w	sl, #22
 8007602:	d854      	bhi.n	80076ae <_dtoa_r+0x236>
 8007604:	4b61      	ldr	r3, [pc, #388]	; (800778c <_dtoa_r+0x314>)
 8007606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007612:	f7f9 fa6b 	bl	8000aec <__aeabi_dcmplt>
 8007616:	2800      	cmp	r0, #0
 8007618:	d04b      	beq.n	80076b2 <_dtoa_r+0x23a>
 800761a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800761e:	2300      	movs	r3, #0
 8007620:	930e      	str	r3, [sp, #56]	; 0x38
 8007622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007624:	1b5d      	subs	r5, r3, r5
 8007626:	1e6b      	subs	r3, r5, #1
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	bf43      	ittte	mi
 800762c:	2300      	movmi	r3, #0
 800762e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007632:	9304      	strmi	r3, [sp, #16]
 8007634:	f04f 0800 	movpl.w	r8, #0
 8007638:	f1ba 0f00 	cmp.w	sl, #0
 800763c:	db3b      	blt.n	80076b6 <_dtoa_r+0x23e>
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007644:	4453      	add	r3, sl
 8007646:	9304      	str	r3, [sp, #16]
 8007648:	2300      	movs	r3, #0
 800764a:	9306      	str	r3, [sp, #24]
 800764c:	9b05      	ldr	r3, [sp, #20]
 800764e:	2b09      	cmp	r3, #9
 8007650:	d869      	bhi.n	8007726 <_dtoa_r+0x2ae>
 8007652:	2b05      	cmp	r3, #5
 8007654:	bfc4      	itt	gt
 8007656:	3b04      	subgt	r3, #4
 8007658:	9305      	strgt	r3, [sp, #20]
 800765a:	9b05      	ldr	r3, [sp, #20]
 800765c:	f1a3 0302 	sub.w	r3, r3, #2
 8007660:	bfcc      	ite	gt
 8007662:	2500      	movgt	r5, #0
 8007664:	2501      	movle	r5, #1
 8007666:	2b03      	cmp	r3, #3
 8007668:	d869      	bhi.n	800773e <_dtoa_r+0x2c6>
 800766a:	e8df f003 	tbb	[pc, r3]
 800766e:	4e2c      	.short	0x4e2c
 8007670:	5a4c      	.short	0x5a4c
 8007672:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007676:	441d      	add	r5, r3
 8007678:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800767c:	2b20      	cmp	r3, #32
 800767e:	bfc1      	itttt	gt
 8007680:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007684:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007688:	fa09 f303 	lslgt.w	r3, r9, r3
 800768c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007690:	bfda      	itte	le
 8007692:	f1c3 0320 	rsble	r3, r3, #32
 8007696:	fa06 f003 	lslle.w	r0, r6, r3
 800769a:	4318      	orrgt	r0, r3
 800769c:	f7f8 ff3a 	bl	8000514 <__aeabi_ui2d>
 80076a0:	2301      	movs	r3, #1
 80076a2:	4606      	mov	r6, r0
 80076a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076a8:	3d01      	subs	r5, #1
 80076aa:	9310      	str	r3, [sp, #64]	; 0x40
 80076ac:	e771      	b.n	8007592 <_dtoa_r+0x11a>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7b6      	b.n	8007620 <_dtoa_r+0x1a8>
 80076b2:	900e      	str	r0, [sp, #56]	; 0x38
 80076b4:	e7b5      	b.n	8007622 <_dtoa_r+0x1aa>
 80076b6:	f1ca 0300 	rsb	r3, sl, #0
 80076ba:	9306      	str	r3, [sp, #24]
 80076bc:	2300      	movs	r3, #0
 80076be:	eba8 080a 	sub.w	r8, r8, sl
 80076c2:	930d      	str	r3, [sp, #52]	; 0x34
 80076c4:	e7c2      	b.n	800764c <_dtoa_r+0x1d4>
 80076c6:	2300      	movs	r3, #0
 80076c8:	9308      	str	r3, [sp, #32]
 80076ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc39      	bgt.n	8007744 <_dtoa_r+0x2cc>
 80076d0:	f04f 0901 	mov.w	r9, #1
 80076d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80076d8:	464b      	mov	r3, r9
 80076da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80076de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076e0:	2200      	movs	r2, #0
 80076e2:	6042      	str	r2, [r0, #4]
 80076e4:	2204      	movs	r2, #4
 80076e6:	f102 0614 	add.w	r6, r2, #20
 80076ea:	429e      	cmp	r6, r3
 80076ec:	6841      	ldr	r1, [r0, #4]
 80076ee:	d92f      	bls.n	8007750 <_dtoa_r+0x2d8>
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fcc7 	bl	8008084 <_Balloc>
 80076f6:	9000      	str	r0, [sp, #0]
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d14b      	bne.n	8007794 <_dtoa_r+0x31c>
 80076fc:	4b24      	ldr	r3, [pc, #144]	; (8007790 <_dtoa_r+0x318>)
 80076fe:	4602      	mov	r2, r0
 8007700:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007704:	e6d1      	b.n	80074aa <_dtoa_r+0x32>
 8007706:	2301      	movs	r3, #1
 8007708:	e7de      	b.n	80076c8 <_dtoa_r+0x250>
 800770a:	2300      	movs	r3, #0
 800770c:	9308      	str	r3, [sp, #32]
 800770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007710:	eb0a 0903 	add.w	r9, sl, r3
 8007714:	f109 0301 	add.w	r3, r9, #1
 8007718:	2b01      	cmp	r3, #1
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	bfb8      	it	lt
 800771e:	2301      	movlt	r3, #1
 8007720:	e7dd      	b.n	80076de <_dtoa_r+0x266>
 8007722:	2301      	movs	r3, #1
 8007724:	e7f2      	b.n	800770c <_dtoa_r+0x294>
 8007726:	2501      	movs	r5, #1
 8007728:	2300      	movs	r3, #0
 800772a:	9305      	str	r3, [sp, #20]
 800772c:	9508      	str	r5, [sp, #32]
 800772e:	f04f 39ff 	mov.w	r9, #4294967295
 8007732:	2200      	movs	r2, #0
 8007734:	f8cd 9004 	str.w	r9, [sp, #4]
 8007738:	2312      	movs	r3, #18
 800773a:	9209      	str	r2, [sp, #36]	; 0x24
 800773c:	e7cf      	b.n	80076de <_dtoa_r+0x266>
 800773e:	2301      	movs	r3, #1
 8007740:	9308      	str	r3, [sp, #32]
 8007742:	e7f4      	b.n	800772e <_dtoa_r+0x2b6>
 8007744:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007748:	f8cd 9004 	str.w	r9, [sp, #4]
 800774c:	464b      	mov	r3, r9
 800774e:	e7c6      	b.n	80076de <_dtoa_r+0x266>
 8007750:	3101      	adds	r1, #1
 8007752:	6041      	str	r1, [r0, #4]
 8007754:	0052      	lsls	r2, r2, #1
 8007756:	e7c6      	b.n	80076e6 <_dtoa_r+0x26e>
 8007758:	636f4361 	.word	0x636f4361
 800775c:	3fd287a7 	.word	0x3fd287a7
 8007760:	8b60c8b3 	.word	0x8b60c8b3
 8007764:	3fc68a28 	.word	0x3fc68a28
 8007768:	509f79fb 	.word	0x509f79fb
 800776c:	3fd34413 	.word	0x3fd34413
 8007770:	08009911 	.word	0x08009911
 8007774:	08009928 	.word	0x08009928
 8007778:	7ff00000 	.word	0x7ff00000
 800777c:	0800990d 	.word	0x0800990d
 8007780:	08009904 	.word	0x08009904
 8007784:	080098e1 	.word	0x080098e1
 8007788:	3ff80000 	.word	0x3ff80000
 800778c:	08009a20 	.word	0x08009a20
 8007790:	08009987 	.word	0x08009987
 8007794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007796:	9a00      	ldr	r2, [sp, #0]
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	9b01      	ldr	r3, [sp, #4]
 800779c:	2b0e      	cmp	r3, #14
 800779e:	f200 80ad 	bhi.w	80078fc <_dtoa_r+0x484>
 80077a2:	2d00      	cmp	r5, #0
 80077a4:	f000 80aa 	beq.w	80078fc <_dtoa_r+0x484>
 80077a8:	f1ba 0f00 	cmp.w	sl, #0
 80077ac:	dd36      	ble.n	800781c <_dtoa_r+0x3a4>
 80077ae:	4ac3      	ldr	r2, [pc, #780]	; (8007abc <_dtoa_r+0x644>)
 80077b0:	f00a 030f 	and.w	r3, sl, #15
 80077b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077b8:	ed93 7b00 	vldr	d7, [r3]
 80077bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80077c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80077c4:	eeb0 8a47 	vmov.f32	s16, s14
 80077c8:	eef0 8a67 	vmov.f32	s17, s15
 80077cc:	d016      	beq.n	80077fc <_dtoa_r+0x384>
 80077ce:	4bbc      	ldr	r3, [pc, #752]	; (8007ac0 <_dtoa_r+0x648>)
 80077d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077d8:	f7f9 f840 	bl	800085c <__aeabi_ddiv>
 80077dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077e0:	f007 070f 	and.w	r7, r7, #15
 80077e4:	2503      	movs	r5, #3
 80077e6:	4eb6      	ldr	r6, [pc, #728]	; (8007ac0 <_dtoa_r+0x648>)
 80077e8:	b957      	cbnz	r7, 8007800 <_dtoa_r+0x388>
 80077ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ee:	ec53 2b18 	vmov	r2, r3, d8
 80077f2:	f7f9 f833 	bl	800085c <__aeabi_ddiv>
 80077f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077fa:	e029      	b.n	8007850 <_dtoa_r+0x3d8>
 80077fc:	2502      	movs	r5, #2
 80077fe:	e7f2      	b.n	80077e6 <_dtoa_r+0x36e>
 8007800:	07f9      	lsls	r1, r7, #31
 8007802:	d508      	bpl.n	8007816 <_dtoa_r+0x39e>
 8007804:	ec51 0b18 	vmov	r0, r1, d8
 8007808:	e9d6 2300 	ldrd	r2, r3, [r6]
 800780c:	f7f8 fefc 	bl	8000608 <__aeabi_dmul>
 8007810:	ec41 0b18 	vmov	d8, r0, r1
 8007814:	3501      	adds	r5, #1
 8007816:	107f      	asrs	r7, r7, #1
 8007818:	3608      	adds	r6, #8
 800781a:	e7e5      	b.n	80077e8 <_dtoa_r+0x370>
 800781c:	f000 80a6 	beq.w	800796c <_dtoa_r+0x4f4>
 8007820:	f1ca 0600 	rsb	r6, sl, #0
 8007824:	4ba5      	ldr	r3, [pc, #660]	; (8007abc <_dtoa_r+0x644>)
 8007826:	4fa6      	ldr	r7, [pc, #664]	; (8007ac0 <_dtoa_r+0x648>)
 8007828:	f006 020f 	and.w	r2, r6, #15
 800782c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007838:	f7f8 fee6 	bl	8000608 <__aeabi_dmul>
 800783c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007840:	1136      	asrs	r6, r6, #4
 8007842:	2300      	movs	r3, #0
 8007844:	2502      	movs	r5, #2
 8007846:	2e00      	cmp	r6, #0
 8007848:	f040 8085 	bne.w	8007956 <_dtoa_r+0x4de>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1d2      	bne.n	80077f6 <_dtoa_r+0x37e>
 8007850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 808c 	beq.w	8007970 <_dtoa_r+0x4f8>
 8007858:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800785c:	4b99      	ldr	r3, [pc, #612]	; (8007ac4 <_dtoa_r+0x64c>)
 800785e:	2200      	movs	r2, #0
 8007860:	4630      	mov	r0, r6
 8007862:	4639      	mov	r1, r7
 8007864:	f7f9 f942 	bl	8000aec <__aeabi_dcmplt>
 8007868:	2800      	cmp	r0, #0
 800786a:	f000 8081 	beq.w	8007970 <_dtoa_r+0x4f8>
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d07d      	beq.n	8007970 <_dtoa_r+0x4f8>
 8007874:	f1b9 0f00 	cmp.w	r9, #0
 8007878:	dd3c      	ble.n	80078f4 <_dtoa_r+0x47c>
 800787a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800787e:	9307      	str	r3, [sp, #28]
 8007880:	2200      	movs	r2, #0
 8007882:	4b91      	ldr	r3, [pc, #580]	; (8007ac8 <_dtoa_r+0x650>)
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	f7f8 febe 	bl	8000608 <__aeabi_dmul>
 800788c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007890:	3501      	adds	r5, #1
 8007892:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007896:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800789a:	4628      	mov	r0, r5
 800789c:	f7f8 fe4a 	bl	8000534 <__aeabi_i2d>
 80078a0:	4632      	mov	r2, r6
 80078a2:	463b      	mov	r3, r7
 80078a4:	f7f8 feb0 	bl	8000608 <__aeabi_dmul>
 80078a8:	4b88      	ldr	r3, [pc, #544]	; (8007acc <_dtoa_r+0x654>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	f7f8 fcf6 	bl	800029c <__adddf3>
 80078b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80078b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078b8:	9303      	str	r3, [sp, #12]
 80078ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d15c      	bne.n	800797a <_dtoa_r+0x502>
 80078c0:	4b83      	ldr	r3, [pc, #524]	; (8007ad0 <_dtoa_r+0x658>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	4630      	mov	r0, r6
 80078c6:	4639      	mov	r1, r7
 80078c8:	f7f8 fce6 	bl	8000298 <__aeabi_dsub>
 80078cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078d0:	4606      	mov	r6, r0
 80078d2:	460f      	mov	r7, r1
 80078d4:	f7f9 f928 	bl	8000b28 <__aeabi_dcmpgt>
 80078d8:	2800      	cmp	r0, #0
 80078da:	f040 8296 	bne.w	8007e0a <_dtoa_r+0x992>
 80078de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80078e2:	4630      	mov	r0, r6
 80078e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078e8:	4639      	mov	r1, r7
 80078ea:	f7f9 f8ff 	bl	8000aec <__aeabi_dcmplt>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f040 8288 	bne.w	8007e04 <_dtoa_r+0x98c>
 80078f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f2c0 8158 	blt.w	8007bb4 <_dtoa_r+0x73c>
 8007904:	f1ba 0f0e 	cmp.w	sl, #14
 8007908:	f300 8154 	bgt.w	8007bb4 <_dtoa_r+0x73c>
 800790c:	4b6b      	ldr	r3, [pc, #428]	; (8007abc <_dtoa_r+0x644>)
 800790e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007912:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	f280 80e3 	bge.w	8007ae4 <_dtoa_r+0x66c>
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f300 80df 	bgt.w	8007ae4 <_dtoa_r+0x66c>
 8007926:	f040 826d 	bne.w	8007e04 <_dtoa_r+0x98c>
 800792a:	4b69      	ldr	r3, [pc, #420]	; (8007ad0 <_dtoa_r+0x658>)
 800792c:	2200      	movs	r2, #0
 800792e:	4640      	mov	r0, r8
 8007930:	4649      	mov	r1, r9
 8007932:	f7f8 fe69 	bl	8000608 <__aeabi_dmul>
 8007936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800793a:	f7f9 f8eb 	bl	8000b14 <__aeabi_dcmpge>
 800793e:	9e01      	ldr	r6, [sp, #4]
 8007940:	4637      	mov	r7, r6
 8007942:	2800      	cmp	r0, #0
 8007944:	f040 8243 	bne.w	8007dce <_dtoa_r+0x956>
 8007948:	9d00      	ldr	r5, [sp, #0]
 800794a:	2331      	movs	r3, #49	; 0x31
 800794c:	f805 3b01 	strb.w	r3, [r5], #1
 8007950:	f10a 0a01 	add.w	sl, sl, #1
 8007954:	e23f      	b.n	8007dd6 <_dtoa_r+0x95e>
 8007956:	07f2      	lsls	r2, r6, #31
 8007958:	d505      	bpl.n	8007966 <_dtoa_r+0x4ee>
 800795a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800795e:	f7f8 fe53 	bl	8000608 <__aeabi_dmul>
 8007962:	3501      	adds	r5, #1
 8007964:	2301      	movs	r3, #1
 8007966:	1076      	asrs	r6, r6, #1
 8007968:	3708      	adds	r7, #8
 800796a:	e76c      	b.n	8007846 <_dtoa_r+0x3ce>
 800796c:	2502      	movs	r5, #2
 800796e:	e76f      	b.n	8007850 <_dtoa_r+0x3d8>
 8007970:	9b01      	ldr	r3, [sp, #4]
 8007972:	f8cd a01c 	str.w	sl, [sp, #28]
 8007976:	930c      	str	r3, [sp, #48]	; 0x30
 8007978:	e78d      	b.n	8007896 <_dtoa_r+0x41e>
 800797a:	9900      	ldr	r1, [sp, #0]
 800797c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800797e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007980:	4b4e      	ldr	r3, [pc, #312]	; (8007abc <_dtoa_r+0x644>)
 8007982:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007986:	4401      	add	r1, r0
 8007988:	9102      	str	r1, [sp, #8]
 800798a:	9908      	ldr	r1, [sp, #32]
 800798c:	eeb0 8a47 	vmov.f32	s16, s14
 8007990:	eef0 8a67 	vmov.f32	s17, s15
 8007994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800799c:	2900      	cmp	r1, #0
 800799e:	d045      	beq.n	8007a2c <_dtoa_r+0x5b4>
 80079a0:	494c      	ldr	r1, [pc, #304]	; (8007ad4 <_dtoa_r+0x65c>)
 80079a2:	2000      	movs	r0, #0
 80079a4:	f7f8 ff5a 	bl	800085c <__aeabi_ddiv>
 80079a8:	ec53 2b18 	vmov	r2, r3, d8
 80079ac:	f7f8 fc74 	bl	8000298 <__aeabi_dsub>
 80079b0:	9d00      	ldr	r5, [sp, #0]
 80079b2:	ec41 0b18 	vmov	d8, r0, r1
 80079b6:	4639      	mov	r1, r7
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7f9 f8d5 	bl	8000b68 <__aeabi_d2iz>
 80079be:	900c      	str	r0, [sp, #48]	; 0x30
 80079c0:	f7f8 fdb8 	bl	8000534 <__aeabi_i2d>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	f7f8 fc64 	bl	8000298 <__aeabi_dsub>
 80079d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079d2:	3330      	adds	r3, #48	; 0x30
 80079d4:	f805 3b01 	strb.w	r3, [r5], #1
 80079d8:	ec53 2b18 	vmov	r2, r3, d8
 80079dc:	4606      	mov	r6, r0
 80079de:	460f      	mov	r7, r1
 80079e0:	f7f9 f884 	bl	8000aec <__aeabi_dcmplt>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d165      	bne.n	8007ab4 <_dtoa_r+0x63c>
 80079e8:	4632      	mov	r2, r6
 80079ea:	463b      	mov	r3, r7
 80079ec:	4935      	ldr	r1, [pc, #212]	; (8007ac4 <_dtoa_r+0x64c>)
 80079ee:	2000      	movs	r0, #0
 80079f0:	f7f8 fc52 	bl	8000298 <__aeabi_dsub>
 80079f4:	ec53 2b18 	vmov	r2, r3, d8
 80079f8:	f7f9 f878 	bl	8000aec <__aeabi_dcmplt>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	f040 80b9 	bne.w	8007b74 <_dtoa_r+0x6fc>
 8007a02:	9b02      	ldr	r3, [sp, #8]
 8007a04:	429d      	cmp	r5, r3
 8007a06:	f43f af75 	beq.w	80078f4 <_dtoa_r+0x47c>
 8007a0a:	4b2f      	ldr	r3, [pc, #188]	; (8007ac8 <_dtoa_r+0x650>)
 8007a0c:	ec51 0b18 	vmov	r0, r1, d8
 8007a10:	2200      	movs	r2, #0
 8007a12:	f7f8 fdf9 	bl	8000608 <__aeabi_dmul>
 8007a16:	4b2c      	ldr	r3, [pc, #176]	; (8007ac8 <_dtoa_r+0x650>)
 8007a18:	ec41 0b18 	vmov	d8, r0, r1
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	4630      	mov	r0, r6
 8007a20:	4639      	mov	r1, r7
 8007a22:	f7f8 fdf1 	bl	8000608 <__aeabi_dmul>
 8007a26:	4606      	mov	r6, r0
 8007a28:	460f      	mov	r7, r1
 8007a2a:	e7c4      	b.n	80079b6 <_dtoa_r+0x53e>
 8007a2c:	ec51 0b17 	vmov	r0, r1, d7
 8007a30:	f7f8 fdea 	bl	8000608 <__aeabi_dmul>
 8007a34:	9b02      	ldr	r3, [sp, #8]
 8007a36:	9d00      	ldr	r5, [sp, #0]
 8007a38:	930c      	str	r3, [sp, #48]	; 0x30
 8007a3a:	ec41 0b18 	vmov	d8, r0, r1
 8007a3e:	4639      	mov	r1, r7
 8007a40:	4630      	mov	r0, r6
 8007a42:	f7f9 f891 	bl	8000b68 <__aeabi_d2iz>
 8007a46:	9011      	str	r0, [sp, #68]	; 0x44
 8007a48:	f7f8 fd74 	bl	8000534 <__aeabi_i2d>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	f7f8 fc20 	bl	8000298 <__aeabi_dsub>
 8007a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a5a:	3330      	adds	r3, #48	; 0x30
 8007a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8007a60:	9b02      	ldr	r3, [sp, #8]
 8007a62:	429d      	cmp	r5, r3
 8007a64:	4606      	mov	r6, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	d134      	bne.n	8007ad8 <_dtoa_r+0x660>
 8007a6e:	4b19      	ldr	r3, [pc, #100]	; (8007ad4 <_dtoa_r+0x65c>)
 8007a70:	ec51 0b18 	vmov	r0, r1, d8
 8007a74:	f7f8 fc12 	bl	800029c <__adddf3>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f9 f852 	bl	8000b28 <__aeabi_dcmpgt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d175      	bne.n	8007b74 <_dtoa_r+0x6fc>
 8007a88:	ec53 2b18 	vmov	r2, r3, d8
 8007a8c:	4911      	ldr	r1, [pc, #68]	; (8007ad4 <_dtoa_r+0x65c>)
 8007a8e:	2000      	movs	r0, #0
 8007a90:	f7f8 fc02 	bl	8000298 <__aeabi_dsub>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	f7f9 f826 	bl	8000aec <__aeabi_dcmplt>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f43f af27 	beq.w	80078f4 <_dtoa_r+0x47c>
 8007aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007aa8:	1e6b      	subs	r3, r5, #1
 8007aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8007aac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ab0:	2b30      	cmp	r3, #48	; 0x30
 8007ab2:	d0f8      	beq.n	8007aa6 <_dtoa_r+0x62e>
 8007ab4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ab8:	e04a      	b.n	8007b50 <_dtoa_r+0x6d8>
 8007aba:	bf00      	nop
 8007abc:	08009a20 	.word	0x08009a20
 8007ac0:	080099f8 	.word	0x080099f8
 8007ac4:	3ff00000 	.word	0x3ff00000
 8007ac8:	40240000 	.word	0x40240000
 8007acc:	401c0000 	.word	0x401c0000
 8007ad0:	40140000 	.word	0x40140000
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	4baf      	ldr	r3, [pc, #700]	; (8007d98 <_dtoa_r+0x920>)
 8007ada:	f7f8 fd95 	bl	8000608 <__aeabi_dmul>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460f      	mov	r7, r1
 8007ae2:	e7ac      	b.n	8007a3e <_dtoa_r+0x5c6>
 8007ae4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ae8:	9d00      	ldr	r5, [sp, #0]
 8007aea:	4642      	mov	r2, r8
 8007aec:	464b      	mov	r3, r9
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f8 feb3 	bl	800085c <__aeabi_ddiv>
 8007af6:	f7f9 f837 	bl	8000b68 <__aeabi_d2iz>
 8007afa:	9002      	str	r0, [sp, #8]
 8007afc:	f7f8 fd1a 	bl	8000534 <__aeabi_i2d>
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	f7f8 fd80 	bl	8000608 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	f7f8 fbc2 	bl	8000298 <__aeabi_dsub>
 8007b14:	9e02      	ldr	r6, [sp, #8]
 8007b16:	9f01      	ldr	r7, [sp, #4]
 8007b18:	3630      	adds	r6, #48	; 0x30
 8007b1a:	f805 6b01 	strb.w	r6, [r5], #1
 8007b1e:	9e00      	ldr	r6, [sp, #0]
 8007b20:	1bae      	subs	r6, r5, r6
 8007b22:	42b7      	cmp	r7, r6
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	d137      	bne.n	8007b9a <_dtoa_r+0x722>
 8007b2a:	f7f8 fbb7 	bl	800029c <__adddf3>
 8007b2e:	4642      	mov	r2, r8
 8007b30:	464b      	mov	r3, r9
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
 8007b36:	f7f8 fff7 	bl	8000b28 <__aeabi_dcmpgt>
 8007b3a:	b9c8      	cbnz	r0, 8007b70 <_dtoa_r+0x6f8>
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	464b      	mov	r3, r9
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f7f8 ffc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b48:	b110      	cbz	r0, 8007b50 <_dtoa_r+0x6d8>
 8007b4a:	9b02      	ldr	r3, [sp, #8]
 8007b4c:	07d9      	lsls	r1, r3, #31
 8007b4e:	d40f      	bmi.n	8007b70 <_dtoa_r+0x6f8>
 8007b50:	4620      	mov	r0, r4
 8007b52:	4659      	mov	r1, fp
 8007b54:	f000 fad6 	bl	8008104 <_Bfree>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	702b      	strb	r3, [r5, #0]
 8007b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b5e:	f10a 0001 	add.w	r0, sl, #1
 8007b62:	6018      	str	r0, [r3, #0]
 8007b64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f43f acd8 	beq.w	800751c <_dtoa_r+0xa4>
 8007b6c:	601d      	str	r5, [r3, #0]
 8007b6e:	e4d5      	b.n	800751c <_dtoa_r+0xa4>
 8007b70:	f8cd a01c 	str.w	sl, [sp, #28]
 8007b74:	462b      	mov	r3, r5
 8007b76:	461d      	mov	r5, r3
 8007b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b7c:	2a39      	cmp	r2, #57	; 0x39
 8007b7e:	d108      	bne.n	8007b92 <_dtoa_r+0x71a>
 8007b80:	9a00      	ldr	r2, [sp, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d1f7      	bne.n	8007b76 <_dtoa_r+0x6fe>
 8007b86:	9a07      	ldr	r2, [sp, #28]
 8007b88:	9900      	ldr	r1, [sp, #0]
 8007b8a:	3201      	adds	r2, #1
 8007b8c:	9207      	str	r2, [sp, #28]
 8007b8e:	2230      	movs	r2, #48	; 0x30
 8007b90:	700a      	strb	r2, [r1, #0]
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	3201      	adds	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e78c      	b.n	8007ab4 <_dtoa_r+0x63c>
 8007b9a:	4b7f      	ldr	r3, [pc, #508]	; (8007d98 <_dtoa_r+0x920>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f7f8 fd33 	bl	8000608 <__aeabi_dmul>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	f7f8 ff95 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d09b      	beq.n	8007aea <_dtoa_r+0x672>
 8007bb2:	e7cd      	b.n	8007b50 <_dtoa_r+0x6d8>
 8007bb4:	9a08      	ldr	r2, [sp, #32]
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	f000 80c4 	beq.w	8007d44 <_dtoa_r+0x8cc>
 8007bbc:	9a05      	ldr	r2, [sp, #20]
 8007bbe:	2a01      	cmp	r2, #1
 8007bc0:	f300 80a8 	bgt.w	8007d14 <_dtoa_r+0x89c>
 8007bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	f000 80a0 	beq.w	8007d0c <_dtoa_r+0x894>
 8007bcc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bd0:	9e06      	ldr	r6, [sp, #24]
 8007bd2:	4645      	mov	r5, r8
 8007bd4:	9a04      	ldr	r2, [sp, #16]
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	441a      	add	r2, r3
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4498      	add	r8, r3
 8007bde:	9204      	str	r2, [sp, #16]
 8007be0:	f000 fb4c 	bl	800827c <__i2b>
 8007be4:	4607      	mov	r7, r0
 8007be6:	2d00      	cmp	r5, #0
 8007be8:	dd0b      	ble.n	8007c02 <_dtoa_r+0x78a>
 8007bea:	9b04      	ldr	r3, [sp, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	dd08      	ble.n	8007c02 <_dtoa_r+0x78a>
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	9a04      	ldr	r2, [sp, #16]
 8007bf4:	bfa8      	it	ge
 8007bf6:	462b      	movge	r3, r5
 8007bf8:	eba8 0803 	sub.w	r8, r8, r3
 8007bfc:	1aed      	subs	r5, r5, r3
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	b1fb      	cbz	r3, 8007c46 <_dtoa_r+0x7ce>
 8007c06:	9b08      	ldr	r3, [sp, #32]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 809f 	beq.w	8007d4c <_dtoa_r+0x8d4>
 8007c0e:	2e00      	cmp	r6, #0
 8007c10:	dd11      	ble.n	8007c36 <_dtoa_r+0x7be>
 8007c12:	4639      	mov	r1, r7
 8007c14:	4632      	mov	r2, r6
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 fbec 	bl	80083f4 <__pow5mult>
 8007c1c:	465a      	mov	r2, fp
 8007c1e:	4601      	mov	r1, r0
 8007c20:	4607      	mov	r7, r0
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 fb40 	bl	80082a8 <__multiply>
 8007c28:	4659      	mov	r1, fp
 8007c2a:	9007      	str	r0, [sp, #28]
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f000 fa69 	bl	8008104 <_Bfree>
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	469b      	mov	fp, r3
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	1b9a      	subs	r2, r3, r6
 8007c3a:	d004      	beq.n	8007c46 <_dtoa_r+0x7ce>
 8007c3c:	4659      	mov	r1, fp
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 fbd8 	bl	80083f4 <__pow5mult>
 8007c44:	4683      	mov	fp, r0
 8007c46:	2101      	movs	r1, #1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fb17 	bl	800827c <__i2b>
 8007c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	4606      	mov	r6, r0
 8007c54:	dd7c      	ble.n	8007d50 <_dtoa_r+0x8d8>
 8007c56:	461a      	mov	r2, r3
 8007c58:	4601      	mov	r1, r0
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 fbca 	bl	80083f4 <__pow5mult>
 8007c60:	9b05      	ldr	r3, [sp, #20]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	4606      	mov	r6, r0
 8007c66:	dd76      	ble.n	8007d56 <_dtoa_r+0x8de>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9306      	str	r3, [sp, #24]
 8007c6c:	6933      	ldr	r3, [r6, #16]
 8007c6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c72:	6918      	ldr	r0, [r3, #16]
 8007c74:	f000 fab2 	bl	80081dc <__hi0bits>
 8007c78:	f1c0 0020 	rsb	r0, r0, #32
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	4418      	add	r0, r3
 8007c80:	f010 001f 	ands.w	r0, r0, #31
 8007c84:	f000 8086 	beq.w	8007d94 <_dtoa_r+0x91c>
 8007c88:	f1c0 0320 	rsb	r3, r0, #32
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	dd7f      	ble.n	8007d90 <_dtoa_r+0x918>
 8007c90:	f1c0 001c 	rsb	r0, r0, #28
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	4403      	add	r3, r0
 8007c98:	4480      	add	r8, r0
 8007c9a:	4405      	add	r5, r0
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ca2:	dd05      	ble.n	8007cb0 <_dtoa_r+0x838>
 8007ca4:	4659      	mov	r1, fp
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 fbfd 	bl	80084a8 <__lshift>
 8007cae:	4683      	mov	fp, r0
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dd05      	ble.n	8007cc2 <_dtoa_r+0x84a>
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f000 fbf4 	bl	80084a8 <__lshift>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d069      	beq.n	8007d9c <_dtoa_r+0x924>
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f000 fc58 	bl	8008580 <__mcmp>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	da63      	bge.n	8007d9c <_dtoa_r+0x924>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4659      	mov	r1, fp
 8007cd8:	220a      	movs	r2, #10
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 fa34 	bl	8008148 <__multadd>
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ce6:	4683      	mov	fp, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 818f 	beq.w	800800c <_dtoa_r+0xb94>
 8007cee:	4639      	mov	r1, r7
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	220a      	movs	r2, #10
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fa27 	bl	8008148 <__multadd>
 8007cfa:	f1b9 0f00 	cmp.w	r9, #0
 8007cfe:	4607      	mov	r7, r0
 8007d00:	f300 808e 	bgt.w	8007e20 <_dtoa_r+0x9a8>
 8007d04:	9b05      	ldr	r3, [sp, #20]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	dc50      	bgt.n	8007dac <_dtoa_r+0x934>
 8007d0a:	e089      	b.n	8007e20 <_dtoa_r+0x9a8>
 8007d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d12:	e75d      	b.n	8007bd0 <_dtoa_r+0x758>
 8007d14:	9b01      	ldr	r3, [sp, #4]
 8007d16:	1e5e      	subs	r6, r3, #1
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	42b3      	cmp	r3, r6
 8007d1c:	bfbf      	itttt	lt
 8007d1e:	9b06      	ldrlt	r3, [sp, #24]
 8007d20:	9606      	strlt	r6, [sp, #24]
 8007d22:	1af2      	sublt	r2, r6, r3
 8007d24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007d26:	bfb6      	itet	lt
 8007d28:	189b      	addlt	r3, r3, r2
 8007d2a:	1b9e      	subge	r6, r3, r6
 8007d2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007d2e:	9b01      	ldr	r3, [sp, #4]
 8007d30:	bfb8      	it	lt
 8007d32:	2600      	movlt	r6, #0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfb5      	itete	lt
 8007d38:	eba8 0503 	sublt.w	r5, r8, r3
 8007d3c:	9b01      	ldrge	r3, [sp, #4]
 8007d3e:	2300      	movlt	r3, #0
 8007d40:	4645      	movge	r5, r8
 8007d42:	e747      	b.n	8007bd4 <_dtoa_r+0x75c>
 8007d44:	9e06      	ldr	r6, [sp, #24]
 8007d46:	9f08      	ldr	r7, [sp, #32]
 8007d48:	4645      	mov	r5, r8
 8007d4a:	e74c      	b.n	8007be6 <_dtoa_r+0x76e>
 8007d4c:	9a06      	ldr	r2, [sp, #24]
 8007d4e:	e775      	b.n	8007c3c <_dtoa_r+0x7c4>
 8007d50:	9b05      	ldr	r3, [sp, #20]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	dc18      	bgt.n	8007d88 <_dtoa_r+0x910>
 8007d56:	9b02      	ldr	r3, [sp, #8]
 8007d58:	b9b3      	cbnz	r3, 8007d88 <_dtoa_r+0x910>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d60:	b9a3      	cbnz	r3, 8007d8c <_dtoa_r+0x914>
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d68:	0d1b      	lsrs	r3, r3, #20
 8007d6a:	051b      	lsls	r3, r3, #20
 8007d6c:	b12b      	cbz	r3, 8007d7a <_dtoa_r+0x902>
 8007d6e:	9b04      	ldr	r3, [sp, #16]
 8007d70:	3301      	adds	r3, #1
 8007d72:	9304      	str	r3, [sp, #16]
 8007d74:	f108 0801 	add.w	r8, r8, #1
 8007d78:	2301      	movs	r3, #1
 8007d7a:	9306      	str	r3, [sp, #24]
 8007d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f47f af74 	bne.w	8007c6c <_dtoa_r+0x7f4>
 8007d84:	2001      	movs	r0, #1
 8007d86:	e779      	b.n	8007c7c <_dtoa_r+0x804>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e7f6      	b.n	8007d7a <_dtoa_r+0x902>
 8007d8c:	9b02      	ldr	r3, [sp, #8]
 8007d8e:	e7f4      	b.n	8007d7a <_dtoa_r+0x902>
 8007d90:	d085      	beq.n	8007c9e <_dtoa_r+0x826>
 8007d92:	4618      	mov	r0, r3
 8007d94:	301c      	adds	r0, #28
 8007d96:	e77d      	b.n	8007c94 <_dtoa_r+0x81c>
 8007d98:	40240000 	.word	0x40240000
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dc38      	bgt.n	8007e14 <_dtoa_r+0x99c>
 8007da2:	9b05      	ldr	r3, [sp, #20]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	dd35      	ble.n	8007e14 <_dtoa_r+0x99c>
 8007da8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007dac:	f1b9 0f00 	cmp.w	r9, #0
 8007db0:	d10d      	bne.n	8007dce <_dtoa_r+0x956>
 8007db2:	4631      	mov	r1, r6
 8007db4:	464b      	mov	r3, r9
 8007db6:	2205      	movs	r2, #5
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 f9c5 	bl	8008148 <__multadd>
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	4658      	mov	r0, fp
 8007dc4:	f000 fbdc 	bl	8008580 <__mcmp>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	f73f adbd 	bgt.w	8007948 <_dtoa_r+0x4d0>
 8007dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd0:	9d00      	ldr	r5, [sp, #0]
 8007dd2:	ea6f 0a03 	mvn.w	sl, r3
 8007dd6:	f04f 0800 	mov.w	r8, #0
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 f991 	bl	8008104 <_Bfree>
 8007de2:	2f00      	cmp	r7, #0
 8007de4:	f43f aeb4 	beq.w	8007b50 <_dtoa_r+0x6d8>
 8007de8:	f1b8 0f00 	cmp.w	r8, #0
 8007dec:	d005      	beq.n	8007dfa <_dtoa_r+0x982>
 8007dee:	45b8      	cmp	r8, r7
 8007df0:	d003      	beq.n	8007dfa <_dtoa_r+0x982>
 8007df2:	4641      	mov	r1, r8
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 f985 	bl	8008104 <_Bfree>
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 f981 	bl	8008104 <_Bfree>
 8007e02:	e6a5      	b.n	8007b50 <_dtoa_r+0x6d8>
 8007e04:	2600      	movs	r6, #0
 8007e06:	4637      	mov	r7, r6
 8007e08:	e7e1      	b.n	8007dce <_dtoa_r+0x956>
 8007e0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007e0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e10:	4637      	mov	r7, r6
 8007e12:	e599      	b.n	8007948 <_dtoa_r+0x4d0>
 8007e14:	9b08      	ldr	r3, [sp, #32]
 8007e16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80fd 	beq.w	800801a <_dtoa_r+0xba2>
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	dd05      	ble.n	8007e30 <_dtoa_r+0x9b8>
 8007e24:	4639      	mov	r1, r7
 8007e26:	462a      	mov	r2, r5
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fb3d 	bl	80084a8 <__lshift>
 8007e2e:	4607      	mov	r7, r0
 8007e30:	9b06      	ldr	r3, [sp, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d05c      	beq.n	8007ef0 <_dtoa_r+0xa78>
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 f923 	bl	8008084 <_Balloc>
 8007e3e:	4605      	mov	r5, r0
 8007e40:	b928      	cbnz	r0, 8007e4e <_dtoa_r+0x9d6>
 8007e42:	4b80      	ldr	r3, [pc, #512]	; (8008044 <_dtoa_r+0xbcc>)
 8007e44:	4602      	mov	r2, r0
 8007e46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e4a:	f7ff bb2e 	b.w	80074aa <_dtoa_r+0x32>
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	3202      	adds	r2, #2
 8007e52:	0092      	lsls	r2, r2, #2
 8007e54:	f107 010c 	add.w	r1, r7, #12
 8007e58:	300c      	adds	r0, #12
 8007e5a:	f000 f905 	bl	8008068 <memcpy>
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4629      	mov	r1, r5
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 fb20 	bl	80084a8 <__lshift>
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	9b00      	ldr	r3, [sp, #0]
 8007e70:	444b      	add	r3, r9
 8007e72:	9307      	str	r3, [sp, #28]
 8007e74:	9b02      	ldr	r3, [sp, #8]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	46b8      	mov	r8, r7
 8007e7c:	9306      	str	r3, [sp, #24]
 8007e7e:	4607      	mov	r7, r0
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	4631      	mov	r1, r6
 8007e84:	3b01      	subs	r3, #1
 8007e86:	4658      	mov	r0, fp
 8007e88:	9302      	str	r3, [sp, #8]
 8007e8a:	f7ff fa67 	bl	800735c <quorem>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	3330      	adds	r3, #48	; 0x30
 8007e92:	9004      	str	r0, [sp, #16]
 8007e94:	4641      	mov	r1, r8
 8007e96:	4658      	mov	r0, fp
 8007e98:	9308      	str	r3, [sp, #32]
 8007e9a:	f000 fb71 	bl	8008580 <__mcmp>
 8007e9e:	463a      	mov	r2, r7
 8007ea0:	4681      	mov	r9, r0
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fb87 	bl	80085b8 <__mdiff>
 8007eaa:	68c2      	ldr	r2, [r0, #12]
 8007eac:	9b08      	ldr	r3, [sp, #32]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	bb02      	cbnz	r2, 8007ef4 <_dtoa_r+0xa7c>
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	4658      	mov	r0, fp
 8007eb6:	f000 fb63 	bl	8008580 <__mcmp>
 8007eba:	9b08      	ldr	r3, [sp, #32]
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007ec6:	f000 f91d 	bl	8008104 <_Bfree>
 8007eca:	9b05      	ldr	r3, [sp, #20]
 8007ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ece:	9d01      	ldr	r5, [sp, #4]
 8007ed0:	ea43 0102 	orr.w	r1, r3, r2
 8007ed4:	9b06      	ldr	r3, [sp, #24]
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	9b08      	ldr	r3, [sp, #32]
 8007eda:	d10d      	bne.n	8007ef8 <_dtoa_r+0xa80>
 8007edc:	2b39      	cmp	r3, #57	; 0x39
 8007ede:	d029      	beq.n	8007f34 <_dtoa_r+0xabc>
 8007ee0:	f1b9 0f00 	cmp.w	r9, #0
 8007ee4:	dd01      	ble.n	8007eea <_dtoa_r+0xa72>
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	3331      	adds	r3, #49	; 0x31
 8007eea:	9a02      	ldr	r2, [sp, #8]
 8007eec:	7013      	strb	r3, [r2, #0]
 8007eee:	e774      	b.n	8007dda <_dtoa_r+0x962>
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	e7b9      	b.n	8007e68 <_dtoa_r+0x9f0>
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	e7e2      	b.n	8007ebe <_dtoa_r+0xa46>
 8007ef8:	f1b9 0f00 	cmp.w	r9, #0
 8007efc:	db06      	blt.n	8007f0c <_dtoa_r+0xa94>
 8007efe:	9905      	ldr	r1, [sp, #20]
 8007f00:	ea41 0909 	orr.w	r9, r1, r9
 8007f04:	9906      	ldr	r1, [sp, #24]
 8007f06:	ea59 0101 	orrs.w	r1, r9, r1
 8007f0a:	d120      	bne.n	8007f4e <_dtoa_r+0xad6>
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	ddec      	ble.n	8007eea <_dtoa_r+0xa72>
 8007f10:	4659      	mov	r1, fp
 8007f12:	2201      	movs	r2, #1
 8007f14:	4620      	mov	r0, r4
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	f000 fac6 	bl	80084a8 <__lshift>
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4683      	mov	fp, r0
 8007f20:	f000 fb2e 	bl	8008580 <__mcmp>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	dc02      	bgt.n	8007f30 <_dtoa_r+0xab8>
 8007f2a:	d1de      	bne.n	8007eea <_dtoa_r+0xa72>
 8007f2c:	07da      	lsls	r2, r3, #31
 8007f2e:	d5dc      	bpl.n	8007eea <_dtoa_r+0xa72>
 8007f30:	2b39      	cmp	r3, #57	; 0x39
 8007f32:	d1d8      	bne.n	8007ee6 <_dtoa_r+0xa6e>
 8007f34:	9a02      	ldr	r2, [sp, #8]
 8007f36:	2339      	movs	r3, #57	; 0x39
 8007f38:	7013      	strb	r3, [r2, #0]
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	461d      	mov	r5, r3
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f44:	2a39      	cmp	r2, #57	; 0x39
 8007f46:	d050      	beq.n	8007fea <_dtoa_r+0xb72>
 8007f48:	3201      	adds	r2, #1
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e745      	b.n	8007dda <_dtoa_r+0x962>
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	dd03      	ble.n	8007f5a <_dtoa_r+0xae2>
 8007f52:	2b39      	cmp	r3, #57	; 0x39
 8007f54:	d0ee      	beq.n	8007f34 <_dtoa_r+0xabc>
 8007f56:	3301      	adds	r3, #1
 8007f58:	e7c7      	b.n	8007eea <_dtoa_r+0xa72>
 8007f5a:	9a01      	ldr	r2, [sp, #4]
 8007f5c:	9907      	ldr	r1, [sp, #28]
 8007f5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f62:	428a      	cmp	r2, r1
 8007f64:	d02a      	beq.n	8007fbc <_dtoa_r+0xb44>
 8007f66:	4659      	mov	r1, fp
 8007f68:	2300      	movs	r3, #0
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 f8eb 	bl	8008148 <__multadd>
 8007f72:	45b8      	cmp	r8, r7
 8007f74:	4683      	mov	fp, r0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	f04f 020a 	mov.w	r2, #10
 8007f7e:	4641      	mov	r1, r8
 8007f80:	4620      	mov	r0, r4
 8007f82:	d107      	bne.n	8007f94 <_dtoa_r+0xb1c>
 8007f84:	f000 f8e0 	bl	8008148 <__multadd>
 8007f88:	4680      	mov	r8, r0
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	e775      	b.n	8007e80 <_dtoa_r+0xa08>
 8007f94:	f000 f8d8 	bl	8008148 <__multadd>
 8007f98:	4639      	mov	r1, r7
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 f8d1 	bl	8008148 <__multadd>
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	e7f0      	b.n	8007f8c <_dtoa_r+0xb14>
 8007faa:	f1b9 0f00 	cmp.w	r9, #0
 8007fae:	9a00      	ldr	r2, [sp, #0]
 8007fb0:	bfcc      	ite	gt
 8007fb2:	464d      	movgt	r5, r9
 8007fb4:	2501      	movle	r5, #1
 8007fb6:	4415      	add	r5, r2
 8007fb8:	f04f 0800 	mov.w	r8, #0
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	f000 fa70 	bl	80084a8 <__lshift>
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4683      	mov	fp, r0
 8007fcc:	f000 fad8 	bl	8008580 <__mcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	dcb2      	bgt.n	8007f3a <_dtoa_r+0xac2>
 8007fd4:	d102      	bne.n	8007fdc <_dtoa_r+0xb64>
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	07db      	lsls	r3, r3, #31
 8007fda:	d4ae      	bmi.n	8007f3a <_dtoa_r+0xac2>
 8007fdc:	462b      	mov	r3, r5
 8007fde:	461d      	mov	r5, r3
 8007fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fe4:	2a30      	cmp	r2, #48	; 0x30
 8007fe6:	d0fa      	beq.n	8007fde <_dtoa_r+0xb66>
 8007fe8:	e6f7      	b.n	8007dda <_dtoa_r+0x962>
 8007fea:	9a00      	ldr	r2, [sp, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d1a5      	bne.n	8007f3c <_dtoa_r+0xac4>
 8007ff0:	f10a 0a01 	add.w	sl, sl, #1
 8007ff4:	2331      	movs	r3, #49	; 0x31
 8007ff6:	e779      	b.n	8007eec <_dtoa_r+0xa74>
 8007ff8:	4b13      	ldr	r3, [pc, #76]	; (8008048 <_dtoa_r+0xbd0>)
 8007ffa:	f7ff baaf 	b.w	800755c <_dtoa_r+0xe4>
 8007ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008000:	2b00      	cmp	r3, #0
 8008002:	f47f aa86 	bne.w	8007512 <_dtoa_r+0x9a>
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <_dtoa_r+0xbd4>)
 8008008:	f7ff baa8 	b.w	800755c <_dtoa_r+0xe4>
 800800c:	f1b9 0f00 	cmp.w	r9, #0
 8008010:	dc03      	bgt.n	800801a <_dtoa_r+0xba2>
 8008012:	9b05      	ldr	r3, [sp, #20]
 8008014:	2b02      	cmp	r3, #2
 8008016:	f73f aec9 	bgt.w	8007dac <_dtoa_r+0x934>
 800801a:	9d00      	ldr	r5, [sp, #0]
 800801c:	4631      	mov	r1, r6
 800801e:	4658      	mov	r0, fp
 8008020:	f7ff f99c 	bl	800735c <quorem>
 8008024:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008028:	f805 3b01 	strb.w	r3, [r5], #1
 800802c:	9a00      	ldr	r2, [sp, #0]
 800802e:	1aaa      	subs	r2, r5, r2
 8008030:	4591      	cmp	r9, r2
 8008032:	ddba      	ble.n	8007faa <_dtoa_r+0xb32>
 8008034:	4659      	mov	r1, fp
 8008036:	2300      	movs	r3, #0
 8008038:	220a      	movs	r2, #10
 800803a:	4620      	mov	r0, r4
 800803c:	f000 f884 	bl	8008148 <__multadd>
 8008040:	4683      	mov	fp, r0
 8008042:	e7eb      	b.n	800801c <_dtoa_r+0xba4>
 8008044:	08009987 	.word	0x08009987
 8008048:	080098e0 	.word	0x080098e0
 800804c:	08009904 	.word	0x08009904

08008050 <_localeconv_r>:
 8008050:	4800      	ldr	r0, [pc, #0]	; (8008054 <_localeconv_r+0x4>)
 8008052:	4770      	bx	lr
 8008054:	20000160 	.word	0x20000160

08008058 <malloc>:
 8008058:	4b02      	ldr	r3, [pc, #8]	; (8008064 <malloc+0xc>)
 800805a:	4601      	mov	r1, r0
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	f000 bbef 	b.w	8008840 <_malloc_r>
 8008062:	bf00      	nop
 8008064:	2000000c 	.word	0x2000000c

08008068 <memcpy>:
 8008068:	440a      	add	r2, r1
 800806a:	4291      	cmp	r1, r2
 800806c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008070:	d100      	bne.n	8008074 <memcpy+0xc>
 8008072:	4770      	bx	lr
 8008074:	b510      	push	{r4, lr}
 8008076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800807e:	4291      	cmp	r1, r2
 8008080:	d1f9      	bne.n	8008076 <memcpy+0xe>
 8008082:	bd10      	pop	{r4, pc}

08008084 <_Balloc>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008088:	4604      	mov	r4, r0
 800808a:	460d      	mov	r5, r1
 800808c:	b976      	cbnz	r6, 80080ac <_Balloc+0x28>
 800808e:	2010      	movs	r0, #16
 8008090:	f7ff ffe2 	bl	8008058 <malloc>
 8008094:	4602      	mov	r2, r0
 8008096:	6260      	str	r0, [r4, #36]	; 0x24
 8008098:	b920      	cbnz	r0, 80080a4 <_Balloc+0x20>
 800809a:	4b18      	ldr	r3, [pc, #96]	; (80080fc <_Balloc+0x78>)
 800809c:	4818      	ldr	r0, [pc, #96]	; (8008100 <_Balloc+0x7c>)
 800809e:	2166      	movs	r1, #102	; 0x66
 80080a0:	f000 fd94 	bl	8008bcc <__assert_func>
 80080a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080a8:	6006      	str	r6, [r0, #0]
 80080aa:	60c6      	str	r6, [r0, #12]
 80080ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080ae:	68f3      	ldr	r3, [r6, #12]
 80080b0:	b183      	cbz	r3, 80080d4 <_Balloc+0x50>
 80080b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ba:	b9b8      	cbnz	r0, 80080ec <_Balloc+0x68>
 80080bc:	2101      	movs	r1, #1
 80080be:	fa01 f605 	lsl.w	r6, r1, r5
 80080c2:	1d72      	adds	r2, r6, #5
 80080c4:	0092      	lsls	r2, r2, #2
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fb5a 	bl	8008780 <_calloc_r>
 80080cc:	b160      	cbz	r0, 80080e8 <_Balloc+0x64>
 80080ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080d2:	e00e      	b.n	80080f2 <_Balloc+0x6e>
 80080d4:	2221      	movs	r2, #33	; 0x21
 80080d6:	2104      	movs	r1, #4
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 fb51 	bl	8008780 <_calloc_r>
 80080de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e0:	60f0      	str	r0, [r6, #12]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e4      	bne.n	80080b2 <_Balloc+0x2e>
 80080e8:	2000      	movs	r0, #0
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	6802      	ldr	r2, [r0, #0]
 80080ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080f2:	2300      	movs	r3, #0
 80080f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080f8:	e7f7      	b.n	80080ea <_Balloc+0x66>
 80080fa:	bf00      	nop
 80080fc:	08009911 	.word	0x08009911
 8008100:	08009998 	.word	0x08009998

08008104 <_Bfree>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008108:	4605      	mov	r5, r0
 800810a:	460c      	mov	r4, r1
 800810c:	b976      	cbnz	r6, 800812c <_Bfree+0x28>
 800810e:	2010      	movs	r0, #16
 8008110:	f7ff ffa2 	bl	8008058 <malloc>
 8008114:	4602      	mov	r2, r0
 8008116:	6268      	str	r0, [r5, #36]	; 0x24
 8008118:	b920      	cbnz	r0, 8008124 <_Bfree+0x20>
 800811a:	4b09      	ldr	r3, [pc, #36]	; (8008140 <_Bfree+0x3c>)
 800811c:	4809      	ldr	r0, [pc, #36]	; (8008144 <_Bfree+0x40>)
 800811e:	218a      	movs	r1, #138	; 0x8a
 8008120:	f000 fd54 	bl	8008bcc <__assert_func>
 8008124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008128:	6006      	str	r6, [r0, #0]
 800812a:	60c6      	str	r6, [r0, #12]
 800812c:	b13c      	cbz	r4, 800813e <_Bfree+0x3a>
 800812e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008130:	6862      	ldr	r2, [r4, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008138:	6021      	str	r1, [r4, #0]
 800813a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	08009911 	.word	0x08009911
 8008144:	08009998 	.word	0x08009998

08008148 <__multadd>:
 8008148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814c:	690e      	ldr	r6, [r1, #16]
 800814e:	4607      	mov	r7, r0
 8008150:	4698      	mov	r8, r3
 8008152:	460c      	mov	r4, r1
 8008154:	f101 0014 	add.w	r0, r1, #20
 8008158:	2300      	movs	r3, #0
 800815a:	6805      	ldr	r5, [r0, #0]
 800815c:	b2a9      	uxth	r1, r5
 800815e:	fb02 8101 	mla	r1, r2, r1, r8
 8008162:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008166:	0c2d      	lsrs	r5, r5, #16
 8008168:	fb02 c505 	mla	r5, r2, r5, ip
 800816c:	b289      	uxth	r1, r1
 800816e:	3301      	adds	r3, #1
 8008170:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008174:	429e      	cmp	r6, r3
 8008176:	f840 1b04 	str.w	r1, [r0], #4
 800817a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800817e:	dcec      	bgt.n	800815a <__multadd+0x12>
 8008180:	f1b8 0f00 	cmp.w	r8, #0
 8008184:	d022      	beq.n	80081cc <__multadd+0x84>
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	42b3      	cmp	r3, r6
 800818a:	dc19      	bgt.n	80081c0 <__multadd+0x78>
 800818c:	6861      	ldr	r1, [r4, #4]
 800818e:	4638      	mov	r0, r7
 8008190:	3101      	adds	r1, #1
 8008192:	f7ff ff77 	bl	8008084 <_Balloc>
 8008196:	4605      	mov	r5, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__multadd+0x5e>
 800819a:	4602      	mov	r2, r0
 800819c:	4b0d      	ldr	r3, [pc, #52]	; (80081d4 <__multadd+0x8c>)
 800819e:	480e      	ldr	r0, [pc, #56]	; (80081d8 <__multadd+0x90>)
 80081a0:	21b5      	movs	r1, #181	; 0xb5
 80081a2:	f000 fd13 	bl	8008bcc <__assert_func>
 80081a6:	6922      	ldr	r2, [r4, #16]
 80081a8:	3202      	adds	r2, #2
 80081aa:	f104 010c 	add.w	r1, r4, #12
 80081ae:	0092      	lsls	r2, r2, #2
 80081b0:	300c      	adds	r0, #12
 80081b2:	f7ff ff59 	bl	8008068 <memcpy>
 80081b6:	4621      	mov	r1, r4
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ffa3 	bl	8008104 <_Bfree>
 80081be:	462c      	mov	r4, r5
 80081c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80081c4:	3601      	adds	r6, #1
 80081c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80081ca:	6126      	str	r6, [r4, #16]
 80081cc:	4620      	mov	r0, r4
 80081ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d2:	bf00      	nop
 80081d4:	08009987 	.word	0x08009987
 80081d8:	08009998 	.word	0x08009998

080081dc <__hi0bits>:
 80081dc:	0c03      	lsrs	r3, r0, #16
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	b9d3      	cbnz	r3, 8008218 <__hi0bits+0x3c>
 80081e2:	0400      	lsls	r0, r0, #16
 80081e4:	2310      	movs	r3, #16
 80081e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081ea:	bf04      	itt	eq
 80081ec:	0200      	lsleq	r0, r0, #8
 80081ee:	3308      	addeq	r3, #8
 80081f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081f4:	bf04      	itt	eq
 80081f6:	0100      	lsleq	r0, r0, #4
 80081f8:	3304      	addeq	r3, #4
 80081fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081fe:	bf04      	itt	eq
 8008200:	0080      	lsleq	r0, r0, #2
 8008202:	3302      	addeq	r3, #2
 8008204:	2800      	cmp	r0, #0
 8008206:	db05      	blt.n	8008214 <__hi0bits+0x38>
 8008208:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800820c:	f103 0301 	add.w	r3, r3, #1
 8008210:	bf08      	it	eq
 8008212:	2320      	moveq	r3, #32
 8008214:	4618      	mov	r0, r3
 8008216:	4770      	bx	lr
 8008218:	2300      	movs	r3, #0
 800821a:	e7e4      	b.n	80081e6 <__hi0bits+0xa>

0800821c <__lo0bits>:
 800821c:	6803      	ldr	r3, [r0, #0]
 800821e:	f013 0207 	ands.w	r2, r3, #7
 8008222:	4601      	mov	r1, r0
 8008224:	d00b      	beq.n	800823e <__lo0bits+0x22>
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d424      	bmi.n	8008274 <__lo0bits+0x58>
 800822a:	0798      	lsls	r0, r3, #30
 800822c:	bf49      	itett	mi
 800822e:	085b      	lsrmi	r3, r3, #1
 8008230:	089b      	lsrpl	r3, r3, #2
 8008232:	2001      	movmi	r0, #1
 8008234:	600b      	strmi	r3, [r1, #0]
 8008236:	bf5c      	itt	pl
 8008238:	600b      	strpl	r3, [r1, #0]
 800823a:	2002      	movpl	r0, #2
 800823c:	4770      	bx	lr
 800823e:	b298      	uxth	r0, r3
 8008240:	b9b0      	cbnz	r0, 8008270 <__lo0bits+0x54>
 8008242:	0c1b      	lsrs	r3, r3, #16
 8008244:	2010      	movs	r0, #16
 8008246:	f013 0fff 	tst.w	r3, #255	; 0xff
 800824a:	bf04      	itt	eq
 800824c:	0a1b      	lsreq	r3, r3, #8
 800824e:	3008      	addeq	r0, #8
 8008250:	071a      	lsls	r2, r3, #28
 8008252:	bf04      	itt	eq
 8008254:	091b      	lsreq	r3, r3, #4
 8008256:	3004      	addeq	r0, #4
 8008258:	079a      	lsls	r2, r3, #30
 800825a:	bf04      	itt	eq
 800825c:	089b      	lsreq	r3, r3, #2
 800825e:	3002      	addeq	r0, #2
 8008260:	07da      	lsls	r2, r3, #31
 8008262:	d403      	bmi.n	800826c <__lo0bits+0x50>
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	f100 0001 	add.w	r0, r0, #1
 800826a:	d005      	beq.n	8008278 <__lo0bits+0x5c>
 800826c:	600b      	str	r3, [r1, #0]
 800826e:	4770      	bx	lr
 8008270:	4610      	mov	r0, r2
 8008272:	e7e8      	b.n	8008246 <__lo0bits+0x2a>
 8008274:	2000      	movs	r0, #0
 8008276:	4770      	bx	lr
 8008278:	2020      	movs	r0, #32
 800827a:	4770      	bx	lr

0800827c <__i2b>:
 800827c:	b510      	push	{r4, lr}
 800827e:	460c      	mov	r4, r1
 8008280:	2101      	movs	r1, #1
 8008282:	f7ff feff 	bl	8008084 <_Balloc>
 8008286:	4602      	mov	r2, r0
 8008288:	b928      	cbnz	r0, 8008296 <__i2b+0x1a>
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <__i2b+0x24>)
 800828c:	4805      	ldr	r0, [pc, #20]	; (80082a4 <__i2b+0x28>)
 800828e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008292:	f000 fc9b 	bl	8008bcc <__assert_func>
 8008296:	2301      	movs	r3, #1
 8008298:	6144      	str	r4, [r0, #20]
 800829a:	6103      	str	r3, [r0, #16]
 800829c:	bd10      	pop	{r4, pc}
 800829e:	bf00      	nop
 80082a0:	08009987 	.word	0x08009987
 80082a4:	08009998 	.word	0x08009998

080082a8 <__multiply>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	4614      	mov	r4, r2
 80082ae:	690a      	ldr	r2, [r1, #16]
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	bfb8      	it	lt
 80082b6:	460b      	movlt	r3, r1
 80082b8:	460d      	mov	r5, r1
 80082ba:	bfbc      	itt	lt
 80082bc:	4625      	movlt	r5, r4
 80082be:	461c      	movlt	r4, r3
 80082c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80082c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082c8:	68ab      	ldr	r3, [r5, #8]
 80082ca:	6869      	ldr	r1, [r5, #4]
 80082cc:	eb0a 0709 	add.w	r7, sl, r9
 80082d0:	42bb      	cmp	r3, r7
 80082d2:	b085      	sub	sp, #20
 80082d4:	bfb8      	it	lt
 80082d6:	3101      	addlt	r1, #1
 80082d8:	f7ff fed4 	bl	8008084 <_Balloc>
 80082dc:	b930      	cbnz	r0, 80082ec <__multiply+0x44>
 80082de:	4602      	mov	r2, r0
 80082e0:	4b42      	ldr	r3, [pc, #264]	; (80083ec <__multiply+0x144>)
 80082e2:	4843      	ldr	r0, [pc, #268]	; (80083f0 <__multiply+0x148>)
 80082e4:	f240 115d 	movw	r1, #349	; 0x15d
 80082e8:	f000 fc70 	bl	8008bcc <__assert_func>
 80082ec:	f100 0614 	add.w	r6, r0, #20
 80082f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80082f4:	4633      	mov	r3, r6
 80082f6:	2200      	movs	r2, #0
 80082f8:	4543      	cmp	r3, r8
 80082fa:	d31e      	bcc.n	800833a <__multiply+0x92>
 80082fc:	f105 0c14 	add.w	ip, r5, #20
 8008300:	f104 0314 	add.w	r3, r4, #20
 8008304:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008308:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800830c:	9202      	str	r2, [sp, #8]
 800830e:	ebac 0205 	sub.w	r2, ip, r5
 8008312:	3a15      	subs	r2, #21
 8008314:	f022 0203 	bic.w	r2, r2, #3
 8008318:	3204      	adds	r2, #4
 800831a:	f105 0115 	add.w	r1, r5, #21
 800831e:	458c      	cmp	ip, r1
 8008320:	bf38      	it	cc
 8008322:	2204      	movcc	r2, #4
 8008324:	9201      	str	r2, [sp, #4]
 8008326:	9a02      	ldr	r2, [sp, #8]
 8008328:	9303      	str	r3, [sp, #12]
 800832a:	429a      	cmp	r2, r3
 800832c:	d808      	bhi.n	8008340 <__multiply+0x98>
 800832e:	2f00      	cmp	r7, #0
 8008330:	dc55      	bgt.n	80083de <__multiply+0x136>
 8008332:	6107      	str	r7, [r0, #16]
 8008334:	b005      	add	sp, #20
 8008336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	f843 2b04 	str.w	r2, [r3], #4
 800833e:	e7db      	b.n	80082f8 <__multiply+0x50>
 8008340:	f8b3 a000 	ldrh.w	sl, [r3]
 8008344:	f1ba 0f00 	cmp.w	sl, #0
 8008348:	d020      	beq.n	800838c <__multiply+0xe4>
 800834a:	f105 0e14 	add.w	lr, r5, #20
 800834e:	46b1      	mov	r9, r6
 8008350:	2200      	movs	r2, #0
 8008352:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008356:	f8d9 b000 	ldr.w	fp, [r9]
 800835a:	b2a1      	uxth	r1, r4
 800835c:	fa1f fb8b 	uxth.w	fp, fp
 8008360:	fb0a b101 	mla	r1, sl, r1, fp
 8008364:	4411      	add	r1, r2
 8008366:	f8d9 2000 	ldr.w	r2, [r9]
 800836a:	0c24      	lsrs	r4, r4, #16
 800836c:	0c12      	lsrs	r2, r2, #16
 800836e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008372:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008376:	b289      	uxth	r1, r1
 8008378:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800837c:	45f4      	cmp	ip, lr
 800837e:	f849 1b04 	str.w	r1, [r9], #4
 8008382:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008386:	d8e4      	bhi.n	8008352 <__multiply+0xaa>
 8008388:	9901      	ldr	r1, [sp, #4]
 800838a:	5072      	str	r2, [r6, r1]
 800838c:	9a03      	ldr	r2, [sp, #12]
 800838e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008392:	3304      	adds	r3, #4
 8008394:	f1b9 0f00 	cmp.w	r9, #0
 8008398:	d01f      	beq.n	80083da <__multiply+0x132>
 800839a:	6834      	ldr	r4, [r6, #0]
 800839c:	f105 0114 	add.w	r1, r5, #20
 80083a0:	46b6      	mov	lr, r6
 80083a2:	f04f 0a00 	mov.w	sl, #0
 80083a6:	880a      	ldrh	r2, [r1, #0]
 80083a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80083ac:	fb09 b202 	mla	r2, r9, r2, fp
 80083b0:	4492      	add	sl, r2
 80083b2:	b2a4      	uxth	r4, r4
 80083b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80083b8:	f84e 4b04 	str.w	r4, [lr], #4
 80083bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80083c0:	f8be 2000 	ldrh.w	r2, [lr]
 80083c4:	0c24      	lsrs	r4, r4, #16
 80083c6:	fb09 2404 	mla	r4, r9, r4, r2
 80083ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80083ce:	458c      	cmp	ip, r1
 80083d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083d4:	d8e7      	bhi.n	80083a6 <__multiply+0xfe>
 80083d6:	9a01      	ldr	r2, [sp, #4]
 80083d8:	50b4      	str	r4, [r6, r2]
 80083da:	3604      	adds	r6, #4
 80083dc:	e7a3      	b.n	8008326 <__multiply+0x7e>
 80083de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1a5      	bne.n	8008332 <__multiply+0x8a>
 80083e6:	3f01      	subs	r7, #1
 80083e8:	e7a1      	b.n	800832e <__multiply+0x86>
 80083ea:	bf00      	nop
 80083ec:	08009987 	.word	0x08009987
 80083f0:	08009998 	.word	0x08009998

080083f4 <__pow5mult>:
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	4615      	mov	r5, r2
 80083fa:	f012 0203 	ands.w	r2, r2, #3
 80083fe:	4606      	mov	r6, r0
 8008400:	460f      	mov	r7, r1
 8008402:	d007      	beq.n	8008414 <__pow5mult+0x20>
 8008404:	4c25      	ldr	r4, [pc, #148]	; (800849c <__pow5mult+0xa8>)
 8008406:	3a01      	subs	r2, #1
 8008408:	2300      	movs	r3, #0
 800840a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800840e:	f7ff fe9b 	bl	8008148 <__multadd>
 8008412:	4607      	mov	r7, r0
 8008414:	10ad      	asrs	r5, r5, #2
 8008416:	d03d      	beq.n	8008494 <__pow5mult+0xa0>
 8008418:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800841a:	b97c      	cbnz	r4, 800843c <__pow5mult+0x48>
 800841c:	2010      	movs	r0, #16
 800841e:	f7ff fe1b 	bl	8008058 <malloc>
 8008422:	4602      	mov	r2, r0
 8008424:	6270      	str	r0, [r6, #36]	; 0x24
 8008426:	b928      	cbnz	r0, 8008434 <__pow5mult+0x40>
 8008428:	4b1d      	ldr	r3, [pc, #116]	; (80084a0 <__pow5mult+0xac>)
 800842a:	481e      	ldr	r0, [pc, #120]	; (80084a4 <__pow5mult+0xb0>)
 800842c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008430:	f000 fbcc 	bl	8008bcc <__assert_func>
 8008434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008438:	6004      	str	r4, [r0, #0]
 800843a:	60c4      	str	r4, [r0, #12]
 800843c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008444:	b94c      	cbnz	r4, 800845a <__pow5mult+0x66>
 8008446:	f240 2171 	movw	r1, #625	; 0x271
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ff16 	bl	800827c <__i2b>
 8008450:	2300      	movs	r3, #0
 8008452:	f8c8 0008 	str.w	r0, [r8, #8]
 8008456:	4604      	mov	r4, r0
 8008458:	6003      	str	r3, [r0, #0]
 800845a:	f04f 0900 	mov.w	r9, #0
 800845e:	07eb      	lsls	r3, r5, #31
 8008460:	d50a      	bpl.n	8008478 <__pow5mult+0x84>
 8008462:	4639      	mov	r1, r7
 8008464:	4622      	mov	r2, r4
 8008466:	4630      	mov	r0, r6
 8008468:	f7ff ff1e 	bl	80082a8 <__multiply>
 800846c:	4639      	mov	r1, r7
 800846e:	4680      	mov	r8, r0
 8008470:	4630      	mov	r0, r6
 8008472:	f7ff fe47 	bl	8008104 <_Bfree>
 8008476:	4647      	mov	r7, r8
 8008478:	106d      	asrs	r5, r5, #1
 800847a:	d00b      	beq.n	8008494 <__pow5mult+0xa0>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	b938      	cbnz	r0, 8008490 <__pow5mult+0x9c>
 8008480:	4622      	mov	r2, r4
 8008482:	4621      	mov	r1, r4
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff ff0f 	bl	80082a8 <__multiply>
 800848a:	6020      	str	r0, [r4, #0]
 800848c:	f8c0 9000 	str.w	r9, [r0]
 8008490:	4604      	mov	r4, r0
 8008492:	e7e4      	b.n	800845e <__pow5mult+0x6a>
 8008494:	4638      	mov	r0, r7
 8008496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849a:	bf00      	nop
 800849c:	08009ae8 	.word	0x08009ae8
 80084a0:	08009911 	.word	0x08009911
 80084a4:	08009998 	.word	0x08009998

080084a8 <__lshift>:
 80084a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	460c      	mov	r4, r1
 80084ae:	6849      	ldr	r1, [r1, #4]
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	4607      	mov	r7, r0
 80084ba:	4691      	mov	r9, r2
 80084bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084c0:	f108 0601 	add.w	r6, r8, #1
 80084c4:	42b3      	cmp	r3, r6
 80084c6:	db0b      	blt.n	80084e0 <__lshift+0x38>
 80084c8:	4638      	mov	r0, r7
 80084ca:	f7ff fddb 	bl	8008084 <_Balloc>
 80084ce:	4605      	mov	r5, r0
 80084d0:	b948      	cbnz	r0, 80084e6 <__lshift+0x3e>
 80084d2:	4602      	mov	r2, r0
 80084d4:	4b28      	ldr	r3, [pc, #160]	; (8008578 <__lshift+0xd0>)
 80084d6:	4829      	ldr	r0, [pc, #164]	; (800857c <__lshift+0xd4>)
 80084d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084dc:	f000 fb76 	bl	8008bcc <__assert_func>
 80084e0:	3101      	adds	r1, #1
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	e7ee      	b.n	80084c4 <__lshift+0x1c>
 80084e6:	2300      	movs	r3, #0
 80084e8:	f100 0114 	add.w	r1, r0, #20
 80084ec:	f100 0210 	add.w	r2, r0, #16
 80084f0:	4618      	mov	r0, r3
 80084f2:	4553      	cmp	r3, sl
 80084f4:	db33      	blt.n	800855e <__lshift+0xb6>
 80084f6:	6920      	ldr	r0, [r4, #16]
 80084f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084fc:	f104 0314 	add.w	r3, r4, #20
 8008500:	f019 091f 	ands.w	r9, r9, #31
 8008504:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008508:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800850c:	d02b      	beq.n	8008566 <__lshift+0xbe>
 800850e:	f1c9 0e20 	rsb	lr, r9, #32
 8008512:	468a      	mov	sl, r1
 8008514:	2200      	movs	r2, #0
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	fa00 f009 	lsl.w	r0, r0, r9
 800851c:	4302      	orrs	r2, r0
 800851e:	f84a 2b04 	str.w	r2, [sl], #4
 8008522:	f853 2b04 	ldr.w	r2, [r3], #4
 8008526:	459c      	cmp	ip, r3
 8008528:	fa22 f20e 	lsr.w	r2, r2, lr
 800852c:	d8f3      	bhi.n	8008516 <__lshift+0x6e>
 800852e:	ebac 0304 	sub.w	r3, ip, r4
 8008532:	3b15      	subs	r3, #21
 8008534:	f023 0303 	bic.w	r3, r3, #3
 8008538:	3304      	adds	r3, #4
 800853a:	f104 0015 	add.w	r0, r4, #21
 800853e:	4584      	cmp	ip, r0
 8008540:	bf38      	it	cc
 8008542:	2304      	movcc	r3, #4
 8008544:	50ca      	str	r2, [r1, r3]
 8008546:	b10a      	cbz	r2, 800854c <__lshift+0xa4>
 8008548:	f108 0602 	add.w	r6, r8, #2
 800854c:	3e01      	subs	r6, #1
 800854e:	4638      	mov	r0, r7
 8008550:	612e      	str	r6, [r5, #16]
 8008552:	4621      	mov	r1, r4
 8008554:	f7ff fdd6 	bl	8008104 <_Bfree>
 8008558:	4628      	mov	r0, r5
 800855a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008562:	3301      	adds	r3, #1
 8008564:	e7c5      	b.n	80084f2 <__lshift+0x4a>
 8008566:	3904      	subs	r1, #4
 8008568:	f853 2b04 	ldr.w	r2, [r3], #4
 800856c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008570:	459c      	cmp	ip, r3
 8008572:	d8f9      	bhi.n	8008568 <__lshift+0xc0>
 8008574:	e7ea      	b.n	800854c <__lshift+0xa4>
 8008576:	bf00      	nop
 8008578:	08009987 	.word	0x08009987
 800857c:	08009998 	.word	0x08009998

08008580 <__mcmp>:
 8008580:	b530      	push	{r4, r5, lr}
 8008582:	6902      	ldr	r2, [r0, #16]
 8008584:	690c      	ldr	r4, [r1, #16]
 8008586:	1b12      	subs	r2, r2, r4
 8008588:	d10e      	bne.n	80085a8 <__mcmp+0x28>
 800858a:	f100 0314 	add.w	r3, r0, #20
 800858e:	3114      	adds	r1, #20
 8008590:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008594:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008598:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800859c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085a0:	42a5      	cmp	r5, r4
 80085a2:	d003      	beq.n	80085ac <__mcmp+0x2c>
 80085a4:	d305      	bcc.n	80085b2 <__mcmp+0x32>
 80085a6:	2201      	movs	r2, #1
 80085a8:	4610      	mov	r0, r2
 80085aa:	bd30      	pop	{r4, r5, pc}
 80085ac:	4283      	cmp	r3, r0
 80085ae:	d3f3      	bcc.n	8008598 <__mcmp+0x18>
 80085b0:	e7fa      	b.n	80085a8 <__mcmp+0x28>
 80085b2:	f04f 32ff 	mov.w	r2, #4294967295
 80085b6:	e7f7      	b.n	80085a8 <__mcmp+0x28>

080085b8 <__mdiff>:
 80085b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	460c      	mov	r4, r1
 80085be:	4606      	mov	r6, r0
 80085c0:	4611      	mov	r1, r2
 80085c2:	4620      	mov	r0, r4
 80085c4:	4617      	mov	r7, r2
 80085c6:	f7ff ffdb 	bl	8008580 <__mcmp>
 80085ca:	1e05      	subs	r5, r0, #0
 80085cc:	d110      	bne.n	80085f0 <__mdiff+0x38>
 80085ce:	4629      	mov	r1, r5
 80085d0:	4630      	mov	r0, r6
 80085d2:	f7ff fd57 	bl	8008084 <_Balloc>
 80085d6:	b930      	cbnz	r0, 80085e6 <__mdiff+0x2e>
 80085d8:	4b39      	ldr	r3, [pc, #228]	; (80086c0 <__mdiff+0x108>)
 80085da:	4602      	mov	r2, r0
 80085dc:	f240 2132 	movw	r1, #562	; 0x232
 80085e0:	4838      	ldr	r0, [pc, #224]	; (80086c4 <__mdiff+0x10c>)
 80085e2:	f000 faf3 	bl	8008bcc <__assert_func>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	bfa4      	itt	ge
 80085f2:	463b      	movge	r3, r7
 80085f4:	4627      	movge	r7, r4
 80085f6:	4630      	mov	r0, r6
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	bfa6      	itte	ge
 80085fc:	461c      	movge	r4, r3
 80085fe:	2500      	movge	r5, #0
 8008600:	2501      	movlt	r5, #1
 8008602:	f7ff fd3f 	bl	8008084 <_Balloc>
 8008606:	b920      	cbnz	r0, 8008612 <__mdiff+0x5a>
 8008608:	4b2d      	ldr	r3, [pc, #180]	; (80086c0 <__mdiff+0x108>)
 800860a:	4602      	mov	r2, r0
 800860c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008610:	e7e6      	b.n	80085e0 <__mdiff+0x28>
 8008612:	693e      	ldr	r6, [r7, #16]
 8008614:	60c5      	str	r5, [r0, #12]
 8008616:	6925      	ldr	r5, [r4, #16]
 8008618:	f107 0114 	add.w	r1, r7, #20
 800861c:	f104 0914 	add.w	r9, r4, #20
 8008620:	f100 0e14 	add.w	lr, r0, #20
 8008624:	f107 0210 	add.w	r2, r7, #16
 8008628:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800862c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008630:	46f2      	mov	sl, lr
 8008632:	2700      	movs	r7, #0
 8008634:	f859 3b04 	ldr.w	r3, [r9], #4
 8008638:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800863c:	fa1f f883 	uxth.w	r8, r3
 8008640:	fa17 f78b 	uxtah	r7, r7, fp
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	eba7 0808 	sub.w	r8, r7, r8
 800864a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800864e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008652:	fa1f f888 	uxth.w	r8, r8
 8008656:	141f      	asrs	r7, r3, #16
 8008658:	454d      	cmp	r5, r9
 800865a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800865e:	f84a 3b04 	str.w	r3, [sl], #4
 8008662:	d8e7      	bhi.n	8008634 <__mdiff+0x7c>
 8008664:	1b2b      	subs	r3, r5, r4
 8008666:	3b15      	subs	r3, #21
 8008668:	f023 0303 	bic.w	r3, r3, #3
 800866c:	3304      	adds	r3, #4
 800866e:	3415      	adds	r4, #21
 8008670:	42a5      	cmp	r5, r4
 8008672:	bf38      	it	cc
 8008674:	2304      	movcc	r3, #4
 8008676:	4419      	add	r1, r3
 8008678:	4473      	add	r3, lr
 800867a:	469e      	mov	lr, r3
 800867c:	460d      	mov	r5, r1
 800867e:	4565      	cmp	r5, ip
 8008680:	d30e      	bcc.n	80086a0 <__mdiff+0xe8>
 8008682:	f10c 0203 	add.w	r2, ip, #3
 8008686:	1a52      	subs	r2, r2, r1
 8008688:	f022 0203 	bic.w	r2, r2, #3
 800868c:	3903      	subs	r1, #3
 800868e:	458c      	cmp	ip, r1
 8008690:	bf38      	it	cc
 8008692:	2200      	movcc	r2, #0
 8008694:	441a      	add	r2, r3
 8008696:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800869a:	b17b      	cbz	r3, 80086bc <__mdiff+0x104>
 800869c:	6106      	str	r6, [r0, #16]
 800869e:	e7a5      	b.n	80085ec <__mdiff+0x34>
 80086a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80086a4:	fa17 f488 	uxtah	r4, r7, r8
 80086a8:	1422      	asrs	r2, r4, #16
 80086aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80086ae:	b2a4      	uxth	r4, r4
 80086b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80086b4:	f84e 4b04 	str.w	r4, [lr], #4
 80086b8:	1417      	asrs	r7, r2, #16
 80086ba:	e7e0      	b.n	800867e <__mdiff+0xc6>
 80086bc:	3e01      	subs	r6, #1
 80086be:	e7ea      	b.n	8008696 <__mdiff+0xde>
 80086c0:	08009987 	.word	0x08009987
 80086c4:	08009998 	.word	0x08009998

080086c8 <__d2b>:
 80086c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086cc:	4689      	mov	r9, r1
 80086ce:	2101      	movs	r1, #1
 80086d0:	ec57 6b10 	vmov	r6, r7, d0
 80086d4:	4690      	mov	r8, r2
 80086d6:	f7ff fcd5 	bl	8008084 <_Balloc>
 80086da:	4604      	mov	r4, r0
 80086dc:	b930      	cbnz	r0, 80086ec <__d2b+0x24>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b25      	ldr	r3, [pc, #148]	; (8008778 <__d2b+0xb0>)
 80086e2:	4826      	ldr	r0, [pc, #152]	; (800877c <__d2b+0xb4>)
 80086e4:	f240 310a 	movw	r1, #778	; 0x30a
 80086e8:	f000 fa70 	bl	8008bcc <__assert_func>
 80086ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086f4:	bb35      	cbnz	r5, 8008744 <__d2b+0x7c>
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	d028      	beq.n	800874e <__d2b+0x86>
 80086fc:	4668      	mov	r0, sp
 80086fe:	9600      	str	r6, [sp, #0]
 8008700:	f7ff fd8c 	bl	800821c <__lo0bits>
 8008704:	9900      	ldr	r1, [sp, #0]
 8008706:	b300      	cbz	r0, 800874a <__d2b+0x82>
 8008708:	9a01      	ldr	r2, [sp, #4]
 800870a:	f1c0 0320 	rsb	r3, r0, #32
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	430b      	orrs	r3, r1
 8008714:	40c2      	lsrs	r2, r0
 8008716:	6163      	str	r3, [r4, #20]
 8008718:	9201      	str	r2, [sp, #4]
 800871a:	9b01      	ldr	r3, [sp, #4]
 800871c:	61a3      	str	r3, [r4, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	bf14      	ite	ne
 8008722:	2202      	movne	r2, #2
 8008724:	2201      	moveq	r2, #1
 8008726:	6122      	str	r2, [r4, #16]
 8008728:	b1d5      	cbz	r5, 8008760 <__d2b+0x98>
 800872a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800872e:	4405      	add	r5, r0
 8008730:	f8c9 5000 	str.w	r5, [r9]
 8008734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008738:	f8c8 0000 	str.w	r0, [r8]
 800873c:	4620      	mov	r0, r4
 800873e:	b003      	add	sp, #12
 8008740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008748:	e7d5      	b.n	80086f6 <__d2b+0x2e>
 800874a:	6161      	str	r1, [r4, #20]
 800874c:	e7e5      	b.n	800871a <__d2b+0x52>
 800874e:	a801      	add	r0, sp, #4
 8008750:	f7ff fd64 	bl	800821c <__lo0bits>
 8008754:	9b01      	ldr	r3, [sp, #4]
 8008756:	6163      	str	r3, [r4, #20]
 8008758:	2201      	movs	r2, #1
 800875a:	6122      	str	r2, [r4, #16]
 800875c:	3020      	adds	r0, #32
 800875e:	e7e3      	b.n	8008728 <__d2b+0x60>
 8008760:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008764:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008768:	f8c9 0000 	str.w	r0, [r9]
 800876c:	6918      	ldr	r0, [r3, #16]
 800876e:	f7ff fd35 	bl	80081dc <__hi0bits>
 8008772:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008776:	e7df      	b.n	8008738 <__d2b+0x70>
 8008778:	08009987 	.word	0x08009987
 800877c:	08009998 	.word	0x08009998

08008780 <_calloc_r>:
 8008780:	b513      	push	{r0, r1, r4, lr}
 8008782:	434a      	muls	r2, r1
 8008784:	4611      	mov	r1, r2
 8008786:	9201      	str	r2, [sp, #4]
 8008788:	f000 f85a 	bl	8008840 <_malloc_r>
 800878c:	4604      	mov	r4, r0
 800878e:	b118      	cbz	r0, 8008798 <_calloc_r+0x18>
 8008790:	9a01      	ldr	r2, [sp, #4]
 8008792:	2100      	movs	r1, #0
 8008794:	f7fe f950 	bl	8006a38 <memset>
 8008798:	4620      	mov	r0, r4
 800879a:	b002      	add	sp, #8
 800879c:	bd10      	pop	{r4, pc}
	...

080087a0 <_free_r>:
 80087a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087a2:	2900      	cmp	r1, #0
 80087a4:	d048      	beq.n	8008838 <_free_r+0x98>
 80087a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087aa:	9001      	str	r0, [sp, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f1a1 0404 	sub.w	r4, r1, #4
 80087b2:	bfb8      	it	lt
 80087b4:	18e4      	addlt	r4, r4, r3
 80087b6:	f000 fa65 	bl	8008c84 <__malloc_lock>
 80087ba:	4a20      	ldr	r2, [pc, #128]	; (800883c <_free_r+0x9c>)
 80087bc:	9801      	ldr	r0, [sp, #4]
 80087be:	6813      	ldr	r3, [r2, #0]
 80087c0:	4615      	mov	r5, r2
 80087c2:	b933      	cbnz	r3, 80087d2 <_free_r+0x32>
 80087c4:	6063      	str	r3, [r4, #4]
 80087c6:	6014      	str	r4, [r2, #0]
 80087c8:	b003      	add	sp, #12
 80087ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087ce:	f000 ba5f 	b.w	8008c90 <__malloc_unlock>
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	d90b      	bls.n	80087ee <_free_r+0x4e>
 80087d6:	6821      	ldr	r1, [r4, #0]
 80087d8:	1862      	adds	r2, r4, r1
 80087da:	4293      	cmp	r3, r2
 80087dc:	bf04      	itt	eq
 80087de:	681a      	ldreq	r2, [r3, #0]
 80087e0:	685b      	ldreq	r3, [r3, #4]
 80087e2:	6063      	str	r3, [r4, #4]
 80087e4:	bf04      	itt	eq
 80087e6:	1852      	addeq	r2, r2, r1
 80087e8:	6022      	streq	r2, [r4, #0]
 80087ea:	602c      	str	r4, [r5, #0]
 80087ec:	e7ec      	b.n	80087c8 <_free_r+0x28>
 80087ee:	461a      	mov	r2, r3
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	b10b      	cbz	r3, 80087f8 <_free_r+0x58>
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	d9fa      	bls.n	80087ee <_free_r+0x4e>
 80087f8:	6811      	ldr	r1, [r2, #0]
 80087fa:	1855      	adds	r5, r2, r1
 80087fc:	42a5      	cmp	r5, r4
 80087fe:	d10b      	bne.n	8008818 <_free_r+0x78>
 8008800:	6824      	ldr	r4, [r4, #0]
 8008802:	4421      	add	r1, r4
 8008804:	1854      	adds	r4, r2, r1
 8008806:	42a3      	cmp	r3, r4
 8008808:	6011      	str	r1, [r2, #0]
 800880a:	d1dd      	bne.n	80087c8 <_free_r+0x28>
 800880c:	681c      	ldr	r4, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	6053      	str	r3, [r2, #4]
 8008812:	4421      	add	r1, r4
 8008814:	6011      	str	r1, [r2, #0]
 8008816:	e7d7      	b.n	80087c8 <_free_r+0x28>
 8008818:	d902      	bls.n	8008820 <_free_r+0x80>
 800881a:	230c      	movs	r3, #12
 800881c:	6003      	str	r3, [r0, #0]
 800881e:	e7d3      	b.n	80087c8 <_free_r+0x28>
 8008820:	6825      	ldr	r5, [r4, #0]
 8008822:	1961      	adds	r1, r4, r5
 8008824:	428b      	cmp	r3, r1
 8008826:	bf04      	itt	eq
 8008828:	6819      	ldreq	r1, [r3, #0]
 800882a:	685b      	ldreq	r3, [r3, #4]
 800882c:	6063      	str	r3, [r4, #4]
 800882e:	bf04      	itt	eq
 8008830:	1949      	addeq	r1, r1, r5
 8008832:	6021      	streq	r1, [r4, #0]
 8008834:	6054      	str	r4, [r2, #4]
 8008836:	e7c7      	b.n	80087c8 <_free_r+0x28>
 8008838:	b003      	add	sp, #12
 800883a:	bd30      	pop	{r4, r5, pc}
 800883c:	20000248 	.word	0x20000248

08008840 <_malloc_r>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	1ccd      	adds	r5, r1, #3
 8008844:	f025 0503 	bic.w	r5, r5, #3
 8008848:	3508      	adds	r5, #8
 800884a:	2d0c      	cmp	r5, #12
 800884c:	bf38      	it	cc
 800884e:	250c      	movcc	r5, #12
 8008850:	2d00      	cmp	r5, #0
 8008852:	4606      	mov	r6, r0
 8008854:	db01      	blt.n	800885a <_malloc_r+0x1a>
 8008856:	42a9      	cmp	r1, r5
 8008858:	d903      	bls.n	8008862 <_malloc_r+0x22>
 800885a:	230c      	movs	r3, #12
 800885c:	6033      	str	r3, [r6, #0]
 800885e:	2000      	movs	r0, #0
 8008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008862:	f000 fa0f 	bl	8008c84 <__malloc_lock>
 8008866:	4921      	ldr	r1, [pc, #132]	; (80088ec <_malloc_r+0xac>)
 8008868:	680a      	ldr	r2, [r1, #0]
 800886a:	4614      	mov	r4, r2
 800886c:	b99c      	cbnz	r4, 8008896 <_malloc_r+0x56>
 800886e:	4f20      	ldr	r7, [pc, #128]	; (80088f0 <_malloc_r+0xb0>)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	b923      	cbnz	r3, 800887e <_malloc_r+0x3e>
 8008874:	4621      	mov	r1, r4
 8008876:	4630      	mov	r0, r6
 8008878:	f000 f998 	bl	8008bac <_sbrk_r>
 800887c:	6038      	str	r0, [r7, #0]
 800887e:	4629      	mov	r1, r5
 8008880:	4630      	mov	r0, r6
 8008882:	f000 f993 	bl	8008bac <_sbrk_r>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d123      	bne.n	80088d2 <_malloc_r+0x92>
 800888a:	230c      	movs	r3, #12
 800888c:	6033      	str	r3, [r6, #0]
 800888e:	4630      	mov	r0, r6
 8008890:	f000 f9fe 	bl	8008c90 <__malloc_unlock>
 8008894:	e7e3      	b.n	800885e <_malloc_r+0x1e>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	1b5b      	subs	r3, r3, r5
 800889a:	d417      	bmi.n	80088cc <_malloc_r+0x8c>
 800889c:	2b0b      	cmp	r3, #11
 800889e:	d903      	bls.n	80088a8 <_malloc_r+0x68>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	441c      	add	r4, r3
 80088a4:	6025      	str	r5, [r4, #0]
 80088a6:	e004      	b.n	80088b2 <_malloc_r+0x72>
 80088a8:	6863      	ldr	r3, [r4, #4]
 80088aa:	42a2      	cmp	r2, r4
 80088ac:	bf0c      	ite	eq
 80088ae:	600b      	streq	r3, [r1, #0]
 80088b0:	6053      	strne	r3, [r2, #4]
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 f9ec 	bl	8008c90 <__malloc_unlock>
 80088b8:	f104 000b 	add.w	r0, r4, #11
 80088bc:	1d23      	adds	r3, r4, #4
 80088be:	f020 0007 	bic.w	r0, r0, #7
 80088c2:	1ac2      	subs	r2, r0, r3
 80088c4:	d0cc      	beq.n	8008860 <_malloc_r+0x20>
 80088c6:	1a1b      	subs	r3, r3, r0
 80088c8:	50a3      	str	r3, [r4, r2]
 80088ca:	e7c9      	b.n	8008860 <_malloc_r+0x20>
 80088cc:	4622      	mov	r2, r4
 80088ce:	6864      	ldr	r4, [r4, #4]
 80088d0:	e7cc      	b.n	800886c <_malloc_r+0x2c>
 80088d2:	1cc4      	adds	r4, r0, #3
 80088d4:	f024 0403 	bic.w	r4, r4, #3
 80088d8:	42a0      	cmp	r0, r4
 80088da:	d0e3      	beq.n	80088a4 <_malloc_r+0x64>
 80088dc:	1a21      	subs	r1, r4, r0
 80088de:	4630      	mov	r0, r6
 80088e0:	f000 f964 	bl	8008bac <_sbrk_r>
 80088e4:	3001      	adds	r0, #1
 80088e6:	d1dd      	bne.n	80088a4 <_malloc_r+0x64>
 80088e8:	e7cf      	b.n	800888a <_malloc_r+0x4a>
 80088ea:	bf00      	nop
 80088ec:	20000248 	.word	0x20000248
 80088f0:	2000024c 	.word	0x2000024c

080088f4 <__ssputs_r>:
 80088f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	688e      	ldr	r6, [r1, #8]
 80088fa:	429e      	cmp	r6, r3
 80088fc:	4682      	mov	sl, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	4690      	mov	r8, r2
 8008902:	461f      	mov	r7, r3
 8008904:	d838      	bhi.n	8008978 <__ssputs_r+0x84>
 8008906:	898a      	ldrh	r2, [r1, #12]
 8008908:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800890c:	d032      	beq.n	8008974 <__ssputs_r+0x80>
 800890e:	6825      	ldr	r5, [r4, #0]
 8008910:	6909      	ldr	r1, [r1, #16]
 8008912:	eba5 0901 	sub.w	r9, r5, r1
 8008916:	6965      	ldr	r5, [r4, #20]
 8008918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800891c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008920:	3301      	adds	r3, #1
 8008922:	444b      	add	r3, r9
 8008924:	106d      	asrs	r5, r5, #1
 8008926:	429d      	cmp	r5, r3
 8008928:	bf38      	it	cc
 800892a:	461d      	movcc	r5, r3
 800892c:	0553      	lsls	r3, r2, #21
 800892e:	d531      	bpl.n	8008994 <__ssputs_r+0xa0>
 8008930:	4629      	mov	r1, r5
 8008932:	f7ff ff85 	bl	8008840 <_malloc_r>
 8008936:	4606      	mov	r6, r0
 8008938:	b950      	cbnz	r0, 8008950 <__ssputs_r+0x5c>
 800893a:	230c      	movs	r3, #12
 800893c:	f8ca 3000 	str.w	r3, [sl]
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008950:	6921      	ldr	r1, [r4, #16]
 8008952:	464a      	mov	r2, r9
 8008954:	f7ff fb88 	bl	8008068 <memcpy>
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800895e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	6126      	str	r6, [r4, #16]
 8008966:	6165      	str	r5, [r4, #20]
 8008968:	444e      	add	r6, r9
 800896a:	eba5 0509 	sub.w	r5, r5, r9
 800896e:	6026      	str	r6, [r4, #0]
 8008970:	60a5      	str	r5, [r4, #8]
 8008972:	463e      	mov	r6, r7
 8008974:	42be      	cmp	r6, r7
 8008976:	d900      	bls.n	800897a <__ssputs_r+0x86>
 8008978:	463e      	mov	r6, r7
 800897a:	4632      	mov	r2, r6
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	4641      	mov	r1, r8
 8008980:	f000 f966 	bl	8008c50 <memmove>
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	1b9b      	subs	r3, r3, r6
 800898a:	4432      	add	r2, r6
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	6022      	str	r2, [r4, #0]
 8008990:	2000      	movs	r0, #0
 8008992:	e7db      	b.n	800894c <__ssputs_r+0x58>
 8008994:	462a      	mov	r2, r5
 8008996:	f000 f981 	bl	8008c9c <_realloc_r>
 800899a:	4606      	mov	r6, r0
 800899c:	2800      	cmp	r0, #0
 800899e:	d1e1      	bne.n	8008964 <__ssputs_r+0x70>
 80089a0:	6921      	ldr	r1, [r4, #16]
 80089a2:	4650      	mov	r0, sl
 80089a4:	f7ff fefc 	bl	80087a0 <_free_r>
 80089a8:	e7c7      	b.n	800893a <__ssputs_r+0x46>
	...

080089ac <_svfiprintf_r>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	4698      	mov	r8, r3
 80089b2:	898b      	ldrh	r3, [r1, #12]
 80089b4:	061b      	lsls	r3, r3, #24
 80089b6:	b09d      	sub	sp, #116	; 0x74
 80089b8:	4607      	mov	r7, r0
 80089ba:	460d      	mov	r5, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	d50e      	bpl.n	80089de <_svfiprintf_r+0x32>
 80089c0:	690b      	ldr	r3, [r1, #16]
 80089c2:	b963      	cbnz	r3, 80089de <_svfiprintf_r+0x32>
 80089c4:	2140      	movs	r1, #64	; 0x40
 80089c6:	f7ff ff3b 	bl	8008840 <_malloc_r>
 80089ca:	6028      	str	r0, [r5, #0]
 80089cc:	6128      	str	r0, [r5, #16]
 80089ce:	b920      	cbnz	r0, 80089da <_svfiprintf_r+0x2e>
 80089d0:	230c      	movs	r3, #12
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e0d1      	b.n	8008b7e <_svfiprintf_r+0x1d2>
 80089da:	2340      	movs	r3, #64	; 0x40
 80089dc:	616b      	str	r3, [r5, #20]
 80089de:	2300      	movs	r3, #0
 80089e0:	9309      	str	r3, [sp, #36]	; 0x24
 80089e2:	2320      	movs	r3, #32
 80089e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ec:	2330      	movs	r3, #48	; 0x30
 80089ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b98 <_svfiprintf_r+0x1ec>
 80089f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089f6:	f04f 0901 	mov.w	r9, #1
 80089fa:	4623      	mov	r3, r4
 80089fc:	469a      	mov	sl, r3
 80089fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a02:	b10a      	cbz	r2, 8008a08 <_svfiprintf_r+0x5c>
 8008a04:	2a25      	cmp	r2, #37	; 0x25
 8008a06:	d1f9      	bne.n	80089fc <_svfiprintf_r+0x50>
 8008a08:	ebba 0b04 	subs.w	fp, sl, r4
 8008a0c:	d00b      	beq.n	8008a26 <_svfiprintf_r+0x7a>
 8008a0e:	465b      	mov	r3, fp
 8008a10:	4622      	mov	r2, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	4638      	mov	r0, r7
 8008a16:	f7ff ff6d 	bl	80088f4 <__ssputs_r>
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	f000 80aa 	beq.w	8008b74 <_svfiprintf_r+0x1c8>
 8008a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a22:	445a      	add	r2, fp
 8008a24:	9209      	str	r2, [sp, #36]	; 0x24
 8008a26:	f89a 3000 	ldrb.w	r3, [sl]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 80a2 	beq.w	8008b74 <_svfiprintf_r+0x1c8>
 8008a30:	2300      	movs	r3, #0
 8008a32:	f04f 32ff 	mov.w	r2, #4294967295
 8008a36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a3a:	f10a 0a01 	add.w	sl, sl, #1
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	9307      	str	r3, [sp, #28]
 8008a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a46:	931a      	str	r3, [sp, #104]	; 0x68
 8008a48:	4654      	mov	r4, sl
 8008a4a:	2205      	movs	r2, #5
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	4851      	ldr	r0, [pc, #324]	; (8008b98 <_svfiprintf_r+0x1ec>)
 8008a52:	f7f7 fbcd 	bl	80001f0 <memchr>
 8008a56:	9a04      	ldr	r2, [sp, #16]
 8008a58:	b9d8      	cbnz	r0, 8008a92 <_svfiprintf_r+0xe6>
 8008a5a:	06d0      	lsls	r0, r2, #27
 8008a5c:	bf44      	itt	mi
 8008a5e:	2320      	movmi	r3, #32
 8008a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a64:	0711      	lsls	r1, r2, #28
 8008a66:	bf44      	itt	mi
 8008a68:	232b      	movmi	r3, #43	; 0x2b
 8008a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a72:	2b2a      	cmp	r3, #42	; 0x2a
 8008a74:	d015      	beq.n	8008aa2 <_svfiprintf_r+0xf6>
 8008a76:	9a07      	ldr	r2, [sp, #28]
 8008a78:	4654      	mov	r4, sl
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f04f 0c0a 	mov.w	ip, #10
 8008a80:	4621      	mov	r1, r4
 8008a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a86:	3b30      	subs	r3, #48	; 0x30
 8008a88:	2b09      	cmp	r3, #9
 8008a8a:	d94e      	bls.n	8008b2a <_svfiprintf_r+0x17e>
 8008a8c:	b1b0      	cbz	r0, 8008abc <_svfiprintf_r+0x110>
 8008a8e:	9207      	str	r2, [sp, #28]
 8008a90:	e014      	b.n	8008abc <_svfiprintf_r+0x110>
 8008a92:	eba0 0308 	sub.w	r3, r0, r8
 8008a96:	fa09 f303 	lsl.w	r3, r9, r3
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	46a2      	mov	sl, r4
 8008aa0:	e7d2      	b.n	8008a48 <_svfiprintf_r+0x9c>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	1d19      	adds	r1, r3, #4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	9103      	str	r1, [sp, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfbb      	ittet	lt
 8008aae:	425b      	neglt	r3, r3
 8008ab0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ab4:	9307      	strge	r3, [sp, #28]
 8008ab6:	9307      	strlt	r3, [sp, #28]
 8008ab8:	bfb8      	it	lt
 8008aba:	9204      	strlt	r2, [sp, #16]
 8008abc:	7823      	ldrb	r3, [r4, #0]
 8008abe:	2b2e      	cmp	r3, #46	; 0x2e
 8008ac0:	d10c      	bne.n	8008adc <_svfiprintf_r+0x130>
 8008ac2:	7863      	ldrb	r3, [r4, #1]
 8008ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac6:	d135      	bne.n	8008b34 <_svfiprintf_r+0x188>
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	1d1a      	adds	r2, r3, #4
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	9203      	str	r2, [sp, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	bfb8      	it	lt
 8008ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad8:	3402      	adds	r4, #2
 8008ada:	9305      	str	r3, [sp, #20]
 8008adc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ba8 <_svfiprintf_r+0x1fc>
 8008ae0:	7821      	ldrb	r1, [r4, #0]
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	4650      	mov	r0, sl
 8008ae6:	f7f7 fb83 	bl	80001f0 <memchr>
 8008aea:	b140      	cbz	r0, 8008afe <_svfiprintf_r+0x152>
 8008aec:	2340      	movs	r3, #64	; 0x40
 8008aee:	eba0 000a 	sub.w	r0, r0, sl
 8008af2:	fa03 f000 	lsl.w	r0, r3, r0
 8008af6:	9b04      	ldr	r3, [sp, #16]
 8008af8:	4303      	orrs	r3, r0
 8008afa:	3401      	adds	r4, #1
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b02:	4826      	ldr	r0, [pc, #152]	; (8008b9c <_svfiprintf_r+0x1f0>)
 8008b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b08:	2206      	movs	r2, #6
 8008b0a:	f7f7 fb71 	bl	80001f0 <memchr>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d038      	beq.n	8008b84 <_svfiprintf_r+0x1d8>
 8008b12:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <_svfiprintf_r+0x1f4>)
 8008b14:	bb1b      	cbnz	r3, 8008b5e <_svfiprintf_r+0x1b2>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	3307      	adds	r3, #7
 8008b1a:	f023 0307 	bic.w	r3, r3, #7
 8008b1e:	3308      	adds	r3, #8
 8008b20:	9303      	str	r3, [sp, #12]
 8008b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b24:	4433      	add	r3, r6
 8008b26:	9309      	str	r3, [sp, #36]	; 0x24
 8008b28:	e767      	b.n	80089fa <_svfiprintf_r+0x4e>
 8008b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b2e:	460c      	mov	r4, r1
 8008b30:	2001      	movs	r0, #1
 8008b32:	e7a5      	b.n	8008a80 <_svfiprintf_r+0xd4>
 8008b34:	2300      	movs	r3, #0
 8008b36:	3401      	adds	r4, #1
 8008b38:	9305      	str	r3, [sp, #20]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	f04f 0c0a 	mov.w	ip, #10
 8008b40:	4620      	mov	r0, r4
 8008b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b46:	3a30      	subs	r2, #48	; 0x30
 8008b48:	2a09      	cmp	r2, #9
 8008b4a:	d903      	bls.n	8008b54 <_svfiprintf_r+0x1a8>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0c5      	beq.n	8008adc <_svfiprintf_r+0x130>
 8008b50:	9105      	str	r1, [sp, #20]
 8008b52:	e7c3      	b.n	8008adc <_svfiprintf_r+0x130>
 8008b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b58:	4604      	mov	r4, r0
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e7f0      	b.n	8008b40 <_svfiprintf_r+0x194>
 8008b5e:	ab03      	add	r3, sp, #12
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	462a      	mov	r2, r5
 8008b64:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <_svfiprintf_r+0x1f8>)
 8008b66:	a904      	add	r1, sp, #16
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7fe f80d 	bl	8006b88 <_printf_float>
 8008b6e:	1c42      	adds	r2, r0, #1
 8008b70:	4606      	mov	r6, r0
 8008b72:	d1d6      	bne.n	8008b22 <_svfiprintf_r+0x176>
 8008b74:	89ab      	ldrh	r3, [r5, #12]
 8008b76:	065b      	lsls	r3, r3, #25
 8008b78:	f53f af2c 	bmi.w	80089d4 <_svfiprintf_r+0x28>
 8008b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b7e:	b01d      	add	sp, #116	; 0x74
 8008b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b84:	ab03      	add	r3, sp, #12
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <_svfiprintf_r+0x1f8>)
 8008b8c:	a904      	add	r1, sp, #16
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f7fe fa9e 	bl	80070d0 <_printf_i>
 8008b94:	e7eb      	b.n	8008b6e <_svfiprintf_r+0x1c2>
 8008b96:	bf00      	nop
 8008b98:	08009af4 	.word	0x08009af4
 8008b9c:	08009afe 	.word	0x08009afe
 8008ba0:	08006b89 	.word	0x08006b89
 8008ba4:	080088f5 	.word	0x080088f5
 8008ba8:	08009afa 	.word	0x08009afa

08008bac <_sbrk_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d06      	ldr	r5, [pc, #24]	; (8008bc8 <_sbrk_r+0x1c>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7f9 feac 	bl	8002914 <_sbrk>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_sbrk_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_sbrk_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	200003b4 	.word	0x200003b4

08008bcc <__assert_func>:
 8008bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bce:	4614      	mov	r4, r2
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <__assert_func+0x2c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	68d8      	ldr	r0, [r3, #12]
 8008bda:	b14c      	cbz	r4, 8008bf0 <__assert_func+0x24>
 8008bdc:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <__assert_func+0x30>)
 8008bde:	9100      	str	r1, [sp, #0]
 8008be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008be4:	4906      	ldr	r1, [pc, #24]	; (8008c00 <__assert_func+0x34>)
 8008be6:	462b      	mov	r3, r5
 8008be8:	f000 f80e 	bl	8008c08 <fiprintf>
 8008bec:	f000 faa4 	bl	8009138 <abort>
 8008bf0:	4b04      	ldr	r3, [pc, #16]	; (8008c04 <__assert_func+0x38>)
 8008bf2:	461c      	mov	r4, r3
 8008bf4:	e7f3      	b.n	8008bde <__assert_func+0x12>
 8008bf6:	bf00      	nop
 8008bf8:	2000000c 	.word	0x2000000c
 8008bfc:	08009b05 	.word	0x08009b05
 8008c00:	08009b12 	.word	0x08009b12
 8008c04:	08009b40 	.word	0x08009b40

08008c08 <fiprintf>:
 8008c08:	b40e      	push	{r1, r2, r3}
 8008c0a:	b503      	push	{r0, r1, lr}
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	ab03      	add	r3, sp, #12
 8008c10:	4805      	ldr	r0, [pc, #20]	; (8008c28 <fiprintf+0x20>)
 8008c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	f000 f88f 	bl	8008d3c <_vfiprintf_r>
 8008c1e:	b002      	add	sp, #8
 8008c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c24:	b003      	add	sp, #12
 8008c26:	4770      	bx	lr
 8008c28:	2000000c 	.word	0x2000000c

08008c2c <__ascii_mbtowc>:
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	b901      	cbnz	r1, 8008c32 <__ascii_mbtowc+0x6>
 8008c30:	a901      	add	r1, sp, #4
 8008c32:	b142      	cbz	r2, 8008c46 <__ascii_mbtowc+0x1a>
 8008c34:	b14b      	cbz	r3, 8008c4a <__ascii_mbtowc+0x1e>
 8008c36:	7813      	ldrb	r3, [r2, #0]
 8008c38:	600b      	str	r3, [r1, #0]
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	1e10      	subs	r0, r2, #0
 8008c3e:	bf18      	it	ne
 8008c40:	2001      	movne	r0, #1
 8008c42:	b002      	add	sp, #8
 8008c44:	4770      	bx	lr
 8008c46:	4610      	mov	r0, r2
 8008c48:	e7fb      	b.n	8008c42 <__ascii_mbtowc+0x16>
 8008c4a:	f06f 0001 	mvn.w	r0, #1
 8008c4e:	e7f8      	b.n	8008c42 <__ascii_mbtowc+0x16>

08008c50 <memmove>:
 8008c50:	4288      	cmp	r0, r1
 8008c52:	b510      	push	{r4, lr}
 8008c54:	eb01 0402 	add.w	r4, r1, r2
 8008c58:	d902      	bls.n	8008c60 <memmove+0x10>
 8008c5a:	4284      	cmp	r4, r0
 8008c5c:	4623      	mov	r3, r4
 8008c5e:	d807      	bhi.n	8008c70 <memmove+0x20>
 8008c60:	1e43      	subs	r3, r0, #1
 8008c62:	42a1      	cmp	r1, r4
 8008c64:	d008      	beq.n	8008c78 <memmove+0x28>
 8008c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c6e:	e7f8      	b.n	8008c62 <memmove+0x12>
 8008c70:	4402      	add	r2, r0
 8008c72:	4601      	mov	r1, r0
 8008c74:	428a      	cmp	r2, r1
 8008c76:	d100      	bne.n	8008c7a <memmove+0x2a>
 8008c78:	bd10      	pop	{r4, pc}
 8008c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c82:	e7f7      	b.n	8008c74 <memmove+0x24>

08008c84 <__malloc_lock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__malloc_lock+0x8>)
 8008c86:	f000 bc17 	b.w	80094b8 <__retarget_lock_acquire_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	200003bc 	.word	0x200003bc

08008c90 <__malloc_unlock>:
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <__malloc_unlock+0x8>)
 8008c92:	f000 bc12 	b.w	80094ba <__retarget_lock_release_recursive>
 8008c96:	bf00      	nop
 8008c98:	200003bc 	.word	0x200003bc

08008c9c <_realloc_r>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	460e      	mov	r6, r1
 8008ca4:	b921      	cbnz	r1, 8008cb0 <_realloc_r+0x14>
 8008ca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008caa:	4611      	mov	r1, r2
 8008cac:	f7ff bdc8 	b.w	8008840 <_malloc_r>
 8008cb0:	b922      	cbnz	r2, 8008cbc <_realloc_r+0x20>
 8008cb2:	f7ff fd75 	bl	80087a0 <_free_r>
 8008cb6:	4625      	mov	r5, r4
 8008cb8:	4628      	mov	r0, r5
 8008cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cbc:	f000 fc62 	bl	8009584 <_malloc_usable_size_r>
 8008cc0:	42a0      	cmp	r0, r4
 8008cc2:	d20f      	bcs.n	8008ce4 <_realloc_r+0x48>
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f7ff fdba 	bl	8008840 <_malloc_r>
 8008ccc:	4605      	mov	r5, r0
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d0f2      	beq.n	8008cb8 <_realloc_r+0x1c>
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	f7ff f9c7 	bl	8008068 <memcpy>
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff fd5f 	bl	80087a0 <_free_r>
 8008ce2:	e7e9      	b.n	8008cb8 <_realloc_r+0x1c>
 8008ce4:	4635      	mov	r5, r6
 8008ce6:	e7e7      	b.n	8008cb8 <_realloc_r+0x1c>

08008ce8 <__sfputc_r>:
 8008ce8:	6893      	ldr	r3, [r2, #8]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	b410      	push	{r4}
 8008cf0:	6093      	str	r3, [r2, #8]
 8008cf2:	da08      	bge.n	8008d06 <__sfputc_r+0x1e>
 8008cf4:	6994      	ldr	r4, [r2, #24]
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	db01      	blt.n	8008cfe <__sfputc_r+0x16>
 8008cfa:	290a      	cmp	r1, #10
 8008cfc:	d103      	bne.n	8008d06 <__sfputc_r+0x1e>
 8008cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d02:	f000 b94b 	b.w	8008f9c <__swbuf_r>
 8008d06:	6813      	ldr	r3, [r2, #0]
 8008d08:	1c58      	adds	r0, r3, #1
 8008d0a:	6010      	str	r0, [r2, #0]
 8008d0c:	7019      	strb	r1, [r3, #0]
 8008d0e:	4608      	mov	r0, r1
 8008d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <__sfputs_r>:
 8008d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d18:	4606      	mov	r6, r0
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	18d5      	adds	r5, r2, r3
 8008d20:	42ac      	cmp	r4, r5
 8008d22:	d101      	bne.n	8008d28 <__sfputs_r+0x12>
 8008d24:	2000      	movs	r0, #0
 8008d26:	e007      	b.n	8008d38 <__sfputs_r+0x22>
 8008d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2c:	463a      	mov	r2, r7
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7ff ffda 	bl	8008ce8 <__sfputc_r>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d1f3      	bne.n	8008d20 <__sfputs_r+0xa>
 8008d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d3c <_vfiprintf_r>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	460d      	mov	r5, r1
 8008d42:	b09d      	sub	sp, #116	; 0x74
 8008d44:	4614      	mov	r4, r2
 8008d46:	4698      	mov	r8, r3
 8008d48:	4606      	mov	r6, r0
 8008d4a:	b118      	cbz	r0, 8008d54 <_vfiprintf_r+0x18>
 8008d4c:	6983      	ldr	r3, [r0, #24]
 8008d4e:	b90b      	cbnz	r3, 8008d54 <_vfiprintf_r+0x18>
 8008d50:	f000 fb14 	bl	800937c <__sinit>
 8008d54:	4b89      	ldr	r3, [pc, #548]	; (8008f7c <_vfiprintf_r+0x240>)
 8008d56:	429d      	cmp	r5, r3
 8008d58:	d11b      	bne.n	8008d92 <_vfiprintf_r+0x56>
 8008d5a:	6875      	ldr	r5, [r6, #4]
 8008d5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d5e:	07d9      	lsls	r1, r3, #31
 8008d60:	d405      	bmi.n	8008d6e <_vfiprintf_r+0x32>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	059a      	lsls	r2, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_vfiprintf_r+0x32>
 8008d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d6a:	f000 fba5 	bl	80094b8 <__retarget_lock_acquire_recursive>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	071b      	lsls	r3, r3, #28
 8008d72:	d501      	bpl.n	8008d78 <_vfiprintf_r+0x3c>
 8008d74:	692b      	ldr	r3, [r5, #16]
 8008d76:	b9eb      	cbnz	r3, 8008db4 <_vfiprintf_r+0x78>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f000 f96e 	bl	800905c <__swsetup_r>
 8008d80:	b1c0      	cbz	r0, 8008db4 <_vfiprintf_r+0x78>
 8008d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d84:	07dc      	lsls	r4, r3, #31
 8008d86:	d50e      	bpl.n	8008da6 <_vfiprintf_r+0x6a>
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	b01d      	add	sp, #116	; 0x74
 8008d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d92:	4b7b      	ldr	r3, [pc, #492]	; (8008f80 <_vfiprintf_r+0x244>)
 8008d94:	429d      	cmp	r5, r3
 8008d96:	d101      	bne.n	8008d9c <_vfiprintf_r+0x60>
 8008d98:	68b5      	ldr	r5, [r6, #8]
 8008d9a:	e7df      	b.n	8008d5c <_vfiprintf_r+0x20>
 8008d9c:	4b79      	ldr	r3, [pc, #484]	; (8008f84 <_vfiprintf_r+0x248>)
 8008d9e:	429d      	cmp	r5, r3
 8008da0:	bf08      	it	eq
 8008da2:	68f5      	ldreq	r5, [r6, #12]
 8008da4:	e7da      	b.n	8008d5c <_vfiprintf_r+0x20>
 8008da6:	89ab      	ldrh	r3, [r5, #12]
 8008da8:	0598      	lsls	r0, r3, #22
 8008daa:	d4ed      	bmi.n	8008d88 <_vfiprintf_r+0x4c>
 8008dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dae:	f000 fb84 	bl	80094ba <__retarget_lock_release_recursive>
 8008db2:	e7e9      	b.n	8008d88 <_vfiprintf_r+0x4c>
 8008db4:	2300      	movs	r3, #0
 8008db6:	9309      	str	r3, [sp, #36]	; 0x24
 8008db8:	2320      	movs	r3, #32
 8008dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc2:	2330      	movs	r3, #48	; 0x30
 8008dc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f88 <_vfiprintf_r+0x24c>
 8008dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dcc:	f04f 0901 	mov.w	r9, #1
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	469a      	mov	sl, r3
 8008dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dd8:	b10a      	cbz	r2, 8008dde <_vfiprintf_r+0xa2>
 8008dda:	2a25      	cmp	r2, #37	; 0x25
 8008ddc:	d1f9      	bne.n	8008dd2 <_vfiprintf_r+0x96>
 8008dde:	ebba 0b04 	subs.w	fp, sl, r4
 8008de2:	d00b      	beq.n	8008dfc <_vfiprintf_r+0xc0>
 8008de4:	465b      	mov	r3, fp
 8008de6:	4622      	mov	r2, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7ff ff93 	bl	8008d16 <__sfputs_r>
 8008df0:	3001      	adds	r0, #1
 8008df2:	f000 80aa 	beq.w	8008f4a <_vfiprintf_r+0x20e>
 8008df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008df8:	445a      	add	r2, fp
 8008dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8008dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80a2 	beq.w	8008f4a <_vfiprintf_r+0x20e>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e10:	f10a 0a01 	add.w	sl, sl, #1
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	9307      	str	r3, [sp, #28]
 8008e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e1e:	4654      	mov	r4, sl
 8008e20:	2205      	movs	r2, #5
 8008e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e26:	4858      	ldr	r0, [pc, #352]	; (8008f88 <_vfiprintf_r+0x24c>)
 8008e28:	f7f7 f9e2 	bl	80001f0 <memchr>
 8008e2c:	9a04      	ldr	r2, [sp, #16]
 8008e2e:	b9d8      	cbnz	r0, 8008e68 <_vfiprintf_r+0x12c>
 8008e30:	06d1      	lsls	r1, r2, #27
 8008e32:	bf44      	itt	mi
 8008e34:	2320      	movmi	r3, #32
 8008e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e3a:	0713      	lsls	r3, r2, #28
 8008e3c:	bf44      	itt	mi
 8008e3e:	232b      	movmi	r3, #43	; 0x2b
 8008e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e44:	f89a 3000 	ldrb.w	r3, [sl]
 8008e48:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4a:	d015      	beq.n	8008e78 <_vfiprintf_r+0x13c>
 8008e4c:	9a07      	ldr	r2, [sp, #28]
 8008e4e:	4654      	mov	r4, sl
 8008e50:	2000      	movs	r0, #0
 8008e52:	f04f 0c0a 	mov.w	ip, #10
 8008e56:	4621      	mov	r1, r4
 8008e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5c:	3b30      	subs	r3, #48	; 0x30
 8008e5e:	2b09      	cmp	r3, #9
 8008e60:	d94e      	bls.n	8008f00 <_vfiprintf_r+0x1c4>
 8008e62:	b1b0      	cbz	r0, 8008e92 <_vfiprintf_r+0x156>
 8008e64:	9207      	str	r2, [sp, #28]
 8008e66:	e014      	b.n	8008e92 <_vfiprintf_r+0x156>
 8008e68:	eba0 0308 	sub.w	r3, r0, r8
 8008e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e70:	4313      	orrs	r3, r2
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	46a2      	mov	sl, r4
 8008e76:	e7d2      	b.n	8008e1e <_vfiprintf_r+0xe2>
 8008e78:	9b03      	ldr	r3, [sp, #12]
 8008e7a:	1d19      	adds	r1, r3, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	9103      	str	r1, [sp, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bfbb      	ittet	lt
 8008e84:	425b      	neglt	r3, r3
 8008e86:	f042 0202 	orrlt.w	r2, r2, #2
 8008e8a:	9307      	strge	r3, [sp, #28]
 8008e8c:	9307      	strlt	r3, [sp, #28]
 8008e8e:	bfb8      	it	lt
 8008e90:	9204      	strlt	r2, [sp, #16]
 8008e92:	7823      	ldrb	r3, [r4, #0]
 8008e94:	2b2e      	cmp	r3, #46	; 0x2e
 8008e96:	d10c      	bne.n	8008eb2 <_vfiprintf_r+0x176>
 8008e98:	7863      	ldrb	r3, [r4, #1]
 8008e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9c:	d135      	bne.n	8008f0a <_vfiprintf_r+0x1ce>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	1d1a      	adds	r2, r3, #4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	9203      	str	r2, [sp, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	bfb8      	it	lt
 8008eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eae:	3402      	adds	r4, #2
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f98 <_vfiprintf_r+0x25c>
 8008eb6:	7821      	ldrb	r1, [r4, #0]
 8008eb8:	2203      	movs	r2, #3
 8008eba:	4650      	mov	r0, sl
 8008ebc:	f7f7 f998 	bl	80001f0 <memchr>
 8008ec0:	b140      	cbz	r0, 8008ed4 <_vfiprintf_r+0x198>
 8008ec2:	2340      	movs	r3, #64	; 0x40
 8008ec4:	eba0 000a 	sub.w	r0, r0, sl
 8008ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8008ecc:	9b04      	ldr	r3, [sp, #16]
 8008ece:	4303      	orrs	r3, r0
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed8:	482c      	ldr	r0, [pc, #176]	; (8008f8c <_vfiprintf_r+0x250>)
 8008eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ede:	2206      	movs	r2, #6
 8008ee0:	f7f7 f986 	bl	80001f0 <memchr>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d03f      	beq.n	8008f68 <_vfiprintf_r+0x22c>
 8008ee8:	4b29      	ldr	r3, [pc, #164]	; (8008f90 <_vfiprintf_r+0x254>)
 8008eea:	bb1b      	cbnz	r3, 8008f34 <_vfiprintf_r+0x1f8>
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	3307      	adds	r3, #7
 8008ef0:	f023 0307 	bic.w	r3, r3, #7
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	9303      	str	r3, [sp, #12]
 8008ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efa:	443b      	add	r3, r7
 8008efc:	9309      	str	r3, [sp, #36]	; 0x24
 8008efe:	e767      	b.n	8008dd0 <_vfiprintf_r+0x94>
 8008f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f04:	460c      	mov	r4, r1
 8008f06:	2001      	movs	r0, #1
 8008f08:	e7a5      	b.n	8008e56 <_vfiprintf_r+0x11a>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	3401      	adds	r4, #1
 8008f0e:	9305      	str	r3, [sp, #20]
 8008f10:	4619      	mov	r1, r3
 8008f12:	f04f 0c0a 	mov.w	ip, #10
 8008f16:	4620      	mov	r0, r4
 8008f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1c:	3a30      	subs	r2, #48	; 0x30
 8008f1e:	2a09      	cmp	r2, #9
 8008f20:	d903      	bls.n	8008f2a <_vfiprintf_r+0x1ee>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0c5      	beq.n	8008eb2 <_vfiprintf_r+0x176>
 8008f26:	9105      	str	r1, [sp, #20]
 8008f28:	e7c3      	b.n	8008eb2 <_vfiprintf_r+0x176>
 8008f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f2e:	4604      	mov	r4, r0
 8008f30:	2301      	movs	r3, #1
 8008f32:	e7f0      	b.n	8008f16 <_vfiprintf_r+0x1da>
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4b16      	ldr	r3, [pc, #88]	; (8008f94 <_vfiprintf_r+0x258>)
 8008f3c:	a904      	add	r1, sp, #16
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f7fd fe22 	bl	8006b88 <_printf_float>
 8008f44:	4607      	mov	r7, r0
 8008f46:	1c78      	adds	r0, r7, #1
 8008f48:	d1d6      	bne.n	8008ef8 <_vfiprintf_r+0x1bc>
 8008f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f4c:	07d9      	lsls	r1, r3, #31
 8008f4e:	d405      	bmi.n	8008f5c <_vfiprintf_r+0x220>
 8008f50:	89ab      	ldrh	r3, [r5, #12]
 8008f52:	059a      	lsls	r2, r3, #22
 8008f54:	d402      	bmi.n	8008f5c <_vfiprintf_r+0x220>
 8008f56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f58:	f000 faaf 	bl	80094ba <__retarget_lock_release_recursive>
 8008f5c:	89ab      	ldrh	r3, [r5, #12]
 8008f5e:	065b      	lsls	r3, r3, #25
 8008f60:	f53f af12 	bmi.w	8008d88 <_vfiprintf_r+0x4c>
 8008f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f66:	e711      	b.n	8008d8c <_vfiprintf_r+0x50>
 8008f68:	ab03      	add	r3, sp, #12
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <_vfiprintf_r+0x258>)
 8008f70:	a904      	add	r1, sp, #16
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7fe f8ac 	bl	80070d0 <_printf_i>
 8008f78:	e7e4      	b.n	8008f44 <_vfiprintf_r+0x208>
 8008f7a:	bf00      	nop
 8008f7c:	08009c6c 	.word	0x08009c6c
 8008f80:	08009c8c 	.word	0x08009c8c
 8008f84:	08009c4c 	.word	0x08009c4c
 8008f88:	08009af4 	.word	0x08009af4
 8008f8c:	08009afe 	.word	0x08009afe
 8008f90:	08006b89 	.word	0x08006b89
 8008f94:	08008d17 	.word	0x08008d17
 8008f98:	08009afa 	.word	0x08009afa

08008f9c <__swbuf_r>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	460e      	mov	r6, r1
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	b118      	cbz	r0, 8008fae <__swbuf_r+0x12>
 8008fa6:	6983      	ldr	r3, [r0, #24]
 8008fa8:	b90b      	cbnz	r3, 8008fae <__swbuf_r+0x12>
 8008faa:	f000 f9e7 	bl	800937c <__sinit>
 8008fae:	4b21      	ldr	r3, [pc, #132]	; (8009034 <__swbuf_r+0x98>)
 8008fb0:	429c      	cmp	r4, r3
 8008fb2:	d12b      	bne.n	800900c <__swbuf_r+0x70>
 8008fb4:	686c      	ldr	r4, [r5, #4]
 8008fb6:	69a3      	ldr	r3, [r4, #24]
 8008fb8:	60a3      	str	r3, [r4, #8]
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	071a      	lsls	r2, r3, #28
 8008fbe:	d52f      	bpl.n	8009020 <__swbuf_r+0x84>
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	b36b      	cbz	r3, 8009020 <__swbuf_r+0x84>
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	6820      	ldr	r0, [r4, #0]
 8008fc8:	1ac0      	subs	r0, r0, r3
 8008fca:	6963      	ldr	r3, [r4, #20]
 8008fcc:	b2f6      	uxtb	r6, r6
 8008fce:	4283      	cmp	r3, r0
 8008fd0:	4637      	mov	r7, r6
 8008fd2:	dc04      	bgt.n	8008fde <__swbuf_r+0x42>
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f000 f93c 	bl	8009254 <_fflush_r>
 8008fdc:	bb30      	cbnz	r0, 800902c <__swbuf_r+0x90>
 8008fde:	68a3      	ldr	r3, [r4, #8]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	60a3      	str	r3, [r4, #8]
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	6022      	str	r2, [r4, #0]
 8008fea:	701e      	strb	r6, [r3, #0]
 8008fec:	6963      	ldr	r3, [r4, #20]
 8008fee:	3001      	adds	r0, #1
 8008ff0:	4283      	cmp	r3, r0
 8008ff2:	d004      	beq.n	8008ffe <__swbuf_r+0x62>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	07db      	lsls	r3, r3, #31
 8008ff8:	d506      	bpl.n	8009008 <__swbuf_r+0x6c>
 8008ffa:	2e0a      	cmp	r6, #10
 8008ffc:	d104      	bne.n	8009008 <__swbuf_r+0x6c>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 f927 	bl	8009254 <_fflush_r>
 8009006:	b988      	cbnz	r0, 800902c <__swbuf_r+0x90>
 8009008:	4638      	mov	r0, r7
 800900a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <__swbuf_r+0x9c>)
 800900e:	429c      	cmp	r4, r3
 8009010:	d101      	bne.n	8009016 <__swbuf_r+0x7a>
 8009012:	68ac      	ldr	r4, [r5, #8]
 8009014:	e7cf      	b.n	8008fb6 <__swbuf_r+0x1a>
 8009016:	4b09      	ldr	r3, [pc, #36]	; (800903c <__swbuf_r+0xa0>)
 8009018:	429c      	cmp	r4, r3
 800901a:	bf08      	it	eq
 800901c:	68ec      	ldreq	r4, [r5, #12]
 800901e:	e7ca      	b.n	8008fb6 <__swbuf_r+0x1a>
 8009020:	4621      	mov	r1, r4
 8009022:	4628      	mov	r0, r5
 8009024:	f000 f81a 	bl	800905c <__swsetup_r>
 8009028:	2800      	cmp	r0, #0
 800902a:	d0cb      	beq.n	8008fc4 <__swbuf_r+0x28>
 800902c:	f04f 37ff 	mov.w	r7, #4294967295
 8009030:	e7ea      	b.n	8009008 <__swbuf_r+0x6c>
 8009032:	bf00      	nop
 8009034:	08009c6c 	.word	0x08009c6c
 8009038:	08009c8c 	.word	0x08009c8c
 800903c:	08009c4c 	.word	0x08009c4c

08009040 <__ascii_wctomb>:
 8009040:	b149      	cbz	r1, 8009056 <__ascii_wctomb+0x16>
 8009042:	2aff      	cmp	r2, #255	; 0xff
 8009044:	bf85      	ittet	hi
 8009046:	238a      	movhi	r3, #138	; 0x8a
 8009048:	6003      	strhi	r3, [r0, #0]
 800904a:	700a      	strbls	r2, [r1, #0]
 800904c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009050:	bf98      	it	ls
 8009052:	2001      	movls	r0, #1
 8009054:	4770      	bx	lr
 8009056:	4608      	mov	r0, r1
 8009058:	4770      	bx	lr
	...

0800905c <__swsetup_r>:
 800905c:	4b32      	ldr	r3, [pc, #200]	; (8009128 <__swsetup_r+0xcc>)
 800905e:	b570      	push	{r4, r5, r6, lr}
 8009060:	681d      	ldr	r5, [r3, #0]
 8009062:	4606      	mov	r6, r0
 8009064:	460c      	mov	r4, r1
 8009066:	b125      	cbz	r5, 8009072 <__swsetup_r+0x16>
 8009068:	69ab      	ldr	r3, [r5, #24]
 800906a:	b913      	cbnz	r3, 8009072 <__swsetup_r+0x16>
 800906c:	4628      	mov	r0, r5
 800906e:	f000 f985 	bl	800937c <__sinit>
 8009072:	4b2e      	ldr	r3, [pc, #184]	; (800912c <__swsetup_r+0xd0>)
 8009074:	429c      	cmp	r4, r3
 8009076:	d10f      	bne.n	8009098 <__swsetup_r+0x3c>
 8009078:	686c      	ldr	r4, [r5, #4]
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009080:	0719      	lsls	r1, r3, #28
 8009082:	d42c      	bmi.n	80090de <__swsetup_r+0x82>
 8009084:	06dd      	lsls	r5, r3, #27
 8009086:	d411      	bmi.n	80090ac <__swsetup_r+0x50>
 8009088:	2309      	movs	r3, #9
 800908a:	6033      	str	r3, [r6, #0]
 800908c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	f04f 30ff 	mov.w	r0, #4294967295
 8009096:	e03e      	b.n	8009116 <__swsetup_r+0xba>
 8009098:	4b25      	ldr	r3, [pc, #148]	; (8009130 <__swsetup_r+0xd4>)
 800909a:	429c      	cmp	r4, r3
 800909c:	d101      	bne.n	80090a2 <__swsetup_r+0x46>
 800909e:	68ac      	ldr	r4, [r5, #8]
 80090a0:	e7eb      	b.n	800907a <__swsetup_r+0x1e>
 80090a2:	4b24      	ldr	r3, [pc, #144]	; (8009134 <__swsetup_r+0xd8>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	bf08      	it	eq
 80090a8:	68ec      	ldreq	r4, [r5, #12]
 80090aa:	e7e6      	b.n	800907a <__swsetup_r+0x1e>
 80090ac:	0758      	lsls	r0, r3, #29
 80090ae:	d512      	bpl.n	80090d6 <__swsetup_r+0x7a>
 80090b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090b2:	b141      	cbz	r1, 80090c6 <__swsetup_r+0x6a>
 80090b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090b8:	4299      	cmp	r1, r3
 80090ba:	d002      	beq.n	80090c2 <__swsetup_r+0x66>
 80090bc:	4630      	mov	r0, r6
 80090be:	f7ff fb6f 	bl	80087a0 <_free_r>
 80090c2:	2300      	movs	r3, #0
 80090c4:	6363      	str	r3, [r4, #52]	; 0x34
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090cc:	81a3      	strh	r3, [r4, #12]
 80090ce:	2300      	movs	r3, #0
 80090d0:	6063      	str	r3, [r4, #4]
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f043 0308 	orr.w	r3, r3, #8
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	6923      	ldr	r3, [r4, #16]
 80090e0:	b94b      	cbnz	r3, 80090f6 <__swsetup_r+0x9a>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ec:	d003      	beq.n	80090f6 <__swsetup_r+0x9a>
 80090ee:	4621      	mov	r1, r4
 80090f0:	4630      	mov	r0, r6
 80090f2:	f000 fa07 	bl	8009504 <__smakebuf_r>
 80090f6:	89a0      	ldrh	r0, [r4, #12]
 80090f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090fc:	f010 0301 	ands.w	r3, r0, #1
 8009100:	d00a      	beq.n	8009118 <__swsetup_r+0xbc>
 8009102:	2300      	movs	r3, #0
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	6963      	ldr	r3, [r4, #20]
 8009108:	425b      	negs	r3, r3
 800910a:	61a3      	str	r3, [r4, #24]
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	b943      	cbnz	r3, 8009122 <__swsetup_r+0xc6>
 8009110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009114:	d1ba      	bne.n	800908c <__swsetup_r+0x30>
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	0781      	lsls	r1, r0, #30
 800911a:	bf58      	it	pl
 800911c:	6963      	ldrpl	r3, [r4, #20]
 800911e:	60a3      	str	r3, [r4, #8]
 8009120:	e7f4      	b.n	800910c <__swsetup_r+0xb0>
 8009122:	2000      	movs	r0, #0
 8009124:	e7f7      	b.n	8009116 <__swsetup_r+0xba>
 8009126:	bf00      	nop
 8009128:	2000000c 	.word	0x2000000c
 800912c:	08009c6c 	.word	0x08009c6c
 8009130:	08009c8c 	.word	0x08009c8c
 8009134:	08009c4c 	.word	0x08009c4c

08009138 <abort>:
 8009138:	b508      	push	{r3, lr}
 800913a:	2006      	movs	r0, #6
 800913c:	f000 fa52 	bl	80095e4 <raise>
 8009140:	2001      	movs	r0, #1
 8009142:	f7f9 fb6f 	bl	8002824 <_exit>
	...

08009148 <__sflush_r>:
 8009148:	898a      	ldrh	r2, [r1, #12]
 800914a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914e:	4605      	mov	r5, r0
 8009150:	0710      	lsls	r0, r2, #28
 8009152:	460c      	mov	r4, r1
 8009154:	d458      	bmi.n	8009208 <__sflush_r+0xc0>
 8009156:	684b      	ldr	r3, [r1, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	dc05      	bgt.n	8009168 <__sflush_r+0x20>
 800915c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	dc02      	bgt.n	8009168 <__sflush_r+0x20>
 8009162:	2000      	movs	r0, #0
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800916a:	2e00      	cmp	r6, #0
 800916c:	d0f9      	beq.n	8009162 <__sflush_r+0x1a>
 800916e:	2300      	movs	r3, #0
 8009170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009174:	682f      	ldr	r7, [r5, #0]
 8009176:	602b      	str	r3, [r5, #0]
 8009178:	d032      	beq.n	80091e0 <__sflush_r+0x98>
 800917a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	075a      	lsls	r2, r3, #29
 8009180:	d505      	bpl.n	800918e <__sflush_r+0x46>
 8009182:	6863      	ldr	r3, [r4, #4]
 8009184:	1ac0      	subs	r0, r0, r3
 8009186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009188:	b10b      	cbz	r3, 800918e <__sflush_r+0x46>
 800918a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800918c:	1ac0      	subs	r0, r0, r3
 800918e:	2300      	movs	r3, #0
 8009190:	4602      	mov	r2, r0
 8009192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009194:	6a21      	ldr	r1, [r4, #32]
 8009196:	4628      	mov	r0, r5
 8009198:	47b0      	blx	r6
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	d106      	bne.n	80091ae <__sflush_r+0x66>
 80091a0:	6829      	ldr	r1, [r5, #0]
 80091a2:	291d      	cmp	r1, #29
 80091a4:	d82c      	bhi.n	8009200 <__sflush_r+0xb8>
 80091a6:	4a2a      	ldr	r2, [pc, #168]	; (8009250 <__sflush_r+0x108>)
 80091a8:	40ca      	lsrs	r2, r1
 80091aa:	07d6      	lsls	r6, r2, #31
 80091ac:	d528      	bpl.n	8009200 <__sflush_r+0xb8>
 80091ae:	2200      	movs	r2, #0
 80091b0:	6062      	str	r2, [r4, #4]
 80091b2:	04d9      	lsls	r1, r3, #19
 80091b4:	6922      	ldr	r2, [r4, #16]
 80091b6:	6022      	str	r2, [r4, #0]
 80091b8:	d504      	bpl.n	80091c4 <__sflush_r+0x7c>
 80091ba:	1c42      	adds	r2, r0, #1
 80091bc:	d101      	bne.n	80091c2 <__sflush_r+0x7a>
 80091be:	682b      	ldr	r3, [r5, #0]
 80091c0:	b903      	cbnz	r3, 80091c4 <__sflush_r+0x7c>
 80091c2:	6560      	str	r0, [r4, #84]	; 0x54
 80091c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c6:	602f      	str	r7, [r5, #0]
 80091c8:	2900      	cmp	r1, #0
 80091ca:	d0ca      	beq.n	8009162 <__sflush_r+0x1a>
 80091cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d0:	4299      	cmp	r1, r3
 80091d2:	d002      	beq.n	80091da <__sflush_r+0x92>
 80091d4:	4628      	mov	r0, r5
 80091d6:	f7ff fae3 	bl	80087a0 <_free_r>
 80091da:	2000      	movs	r0, #0
 80091dc:	6360      	str	r0, [r4, #52]	; 0x34
 80091de:	e7c1      	b.n	8009164 <__sflush_r+0x1c>
 80091e0:	6a21      	ldr	r1, [r4, #32]
 80091e2:	2301      	movs	r3, #1
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b0      	blx	r6
 80091e8:	1c41      	adds	r1, r0, #1
 80091ea:	d1c7      	bne.n	800917c <__sflush_r+0x34>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0c4      	beq.n	800917c <__sflush_r+0x34>
 80091f2:	2b1d      	cmp	r3, #29
 80091f4:	d001      	beq.n	80091fa <__sflush_r+0xb2>
 80091f6:	2b16      	cmp	r3, #22
 80091f8:	d101      	bne.n	80091fe <__sflush_r+0xb6>
 80091fa:	602f      	str	r7, [r5, #0]
 80091fc:	e7b1      	b.n	8009162 <__sflush_r+0x1a>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	e7ad      	b.n	8009164 <__sflush_r+0x1c>
 8009208:	690f      	ldr	r7, [r1, #16]
 800920a:	2f00      	cmp	r7, #0
 800920c:	d0a9      	beq.n	8009162 <__sflush_r+0x1a>
 800920e:	0793      	lsls	r3, r2, #30
 8009210:	680e      	ldr	r6, [r1, #0]
 8009212:	bf08      	it	eq
 8009214:	694b      	ldreq	r3, [r1, #20]
 8009216:	600f      	str	r7, [r1, #0]
 8009218:	bf18      	it	ne
 800921a:	2300      	movne	r3, #0
 800921c:	eba6 0807 	sub.w	r8, r6, r7
 8009220:	608b      	str	r3, [r1, #8]
 8009222:	f1b8 0f00 	cmp.w	r8, #0
 8009226:	dd9c      	ble.n	8009162 <__sflush_r+0x1a>
 8009228:	6a21      	ldr	r1, [r4, #32]
 800922a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800922c:	4643      	mov	r3, r8
 800922e:	463a      	mov	r2, r7
 8009230:	4628      	mov	r0, r5
 8009232:	47b0      	blx	r6
 8009234:	2800      	cmp	r0, #0
 8009236:	dc06      	bgt.n	8009246 <__sflush_r+0xfe>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923e:	81a3      	strh	r3, [r4, #12]
 8009240:	f04f 30ff 	mov.w	r0, #4294967295
 8009244:	e78e      	b.n	8009164 <__sflush_r+0x1c>
 8009246:	4407      	add	r7, r0
 8009248:	eba8 0800 	sub.w	r8, r8, r0
 800924c:	e7e9      	b.n	8009222 <__sflush_r+0xda>
 800924e:	bf00      	nop
 8009250:	20400001 	.word	0x20400001

08009254 <_fflush_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	690b      	ldr	r3, [r1, #16]
 8009258:	4605      	mov	r5, r0
 800925a:	460c      	mov	r4, r1
 800925c:	b913      	cbnz	r3, 8009264 <_fflush_r+0x10>
 800925e:	2500      	movs	r5, #0
 8009260:	4628      	mov	r0, r5
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	b118      	cbz	r0, 800926e <_fflush_r+0x1a>
 8009266:	6983      	ldr	r3, [r0, #24]
 8009268:	b90b      	cbnz	r3, 800926e <_fflush_r+0x1a>
 800926a:	f000 f887 	bl	800937c <__sinit>
 800926e:	4b14      	ldr	r3, [pc, #80]	; (80092c0 <_fflush_r+0x6c>)
 8009270:	429c      	cmp	r4, r3
 8009272:	d11b      	bne.n	80092ac <_fflush_r+0x58>
 8009274:	686c      	ldr	r4, [r5, #4]
 8009276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0ef      	beq.n	800925e <_fflush_r+0xa>
 800927e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009280:	07d0      	lsls	r0, r2, #31
 8009282:	d404      	bmi.n	800928e <_fflush_r+0x3a>
 8009284:	0599      	lsls	r1, r3, #22
 8009286:	d402      	bmi.n	800928e <_fflush_r+0x3a>
 8009288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800928a:	f000 f915 	bl	80094b8 <__retarget_lock_acquire_recursive>
 800928e:	4628      	mov	r0, r5
 8009290:	4621      	mov	r1, r4
 8009292:	f7ff ff59 	bl	8009148 <__sflush_r>
 8009296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009298:	07da      	lsls	r2, r3, #31
 800929a:	4605      	mov	r5, r0
 800929c:	d4e0      	bmi.n	8009260 <_fflush_r+0xc>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	059b      	lsls	r3, r3, #22
 80092a2:	d4dd      	bmi.n	8009260 <_fflush_r+0xc>
 80092a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092a6:	f000 f908 	bl	80094ba <__retarget_lock_release_recursive>
 80092aa:	e7d9      	b.n	8009260 <_fflush_r+0xc>
 80092ac:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <_fflush_r+0x70>)
 80092ae:	429c      	cmp	r4, r3
 80092b0:	d101      	bne.n	80092b6 <_fflush_r+0x62>
 80092b2:	68ac      	ldr	r4, [r5, #8]
 80092b4:	e7df      	b.n	8009276 <_fflush_r+0x22>
 80092b6:	4b04      	ldr	r3, [pc, #16]	; (80092c8 <_fflush_r+0x74>)
 80092b8:	429c      	cmp	r4, r3
 80092ba:	bf08      	it	eq
 80092bc:	68ec      	ldreq	r4, [r5, #12]
 80092be:	e7da      	b.n	8009276 <_fflush_r+0x22>
 80092c0:	08009c6c 	.word	0x08009c6c
 80092c4:	08009c8c 	.word	0x08009c8c
 80092c8:	08009c4c 	.word	0x08009c4c

080092cc <std>:
 80092cc:	2300      	movs	r3, #0
 80092ce:	b510      	push	{r4, lr}
 80092d0:	4604      	mov	r4, r0
 80092d2:	e9c0 3300 	strd	r3, r3, [r0]
 80092d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092da:	6083      	str	r3, [r0, #8]
 80092dc:	8181      	strh	r1, [r0, #12]
 80092de:	6643      	str	r3, [r0, #100]	; 0x64
 80092e0:	81c2      	strh	r2, [r0, #14]
 80092e2:	6183      	str	r3, [r0, #24]
 80092e4:	4619      	mov	r1, r3
 80092e6:	2208      	movs	r2, #8
 80092e8:	305c      	adds	r0, #92	; 0x5c
 80092ea:	f7fd fba5 	bl	8006a38 <memset>
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x38>)
 80092f0:	6263      	str	r3, [r4, #36]	; 0x24
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <std+0x3c>)
 80092f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <std+0x40>)
 80092f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092fa:	4b05      	ldr	r3, [pc, #20]	; (8009310 <std+0x44>)
 80092fc:	6224      	str	r4, [r4, #32]
 80092fe:	6323      	str	r3, [r4, #48]	; 0x30
 8009300:	bd10      	pop	{r4, pc}
 8009302:	bf00      	nop
 8009304:	0800961d 	.word	0x0800961d
 8009308:	0800963f 	.word	0x0800963f
 800930c:	08009677 	.word	0x08009677
 8009310:	0800969b 	.word	0x0800969b

08009314 <_cleanup_r>:
 8009314:	4901      	ldr	r1, [pc, #4]	; (800931c <_cleanup_r+0x8>)
 8009316:	f000 b8af 	b.w	8009478 <_fwalk_reent>
 800931a:	bf00      	nop
 800931c:	08009255 	.word	0x08009255

08009320 <__sfmoreglue>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	1e4a      	subs	r2, r1, #1
 8009324:	2568      	movs	r5, #104	; 0x68
 8009326:	4355      	muls	r5, r2
 8009328:	460e      	mov	r6, r1
 800932a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800932e:	f7ff fa87 	bl	8008840 <_malloc_r>
 8009332:	4604      	mov	r4, r0
 8009334:	b140      	cbz	r0, 8009348 <__sfmoreglue+0x28>
 8009336:	2100      	movs	r1, #0
 8009338:	e9c0 1600 	strd	r1, r6, [r0]
 800933c:	300c      	adds	r0, #12
 800933e:	60a0      	str	r0, [r4, #8]
 8009340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009344:	f7fd fb78 	bl	8006a38 <memset>
 8009348:	4620      	mov	r0, r4
 800934a:	bd70      	pop	{r4, r5, r6, pc}

0800934c <__sfp_lock_acquire>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__sfp_lock_acquire+0x8>)
 800934e:	f000 b8b3 	b.w	80094b8 <__retarget_lock_acquire_recursive>
 8009352:	bf00      	nop
 8009354:	200003c0 	.word	0x200003c0

08009358 <__sfp_lock_release>:
 8009358:	4801      	ldr	r0, [pc, #4]	; (8009360 <__sfp_lock_release+0x8>)
 800935a:	f000 b8ae 	b.w	80094ba <__retarget_lock_release_recursive>
 800935e:	bf00      	nop
 8009360:	200003c0 	.word	0x200003c0

08009364 <__sinit_lock_acquire>:
 8009364:	4801      	ldr	r0, [pc, #4]	; (800936c <__sinit_lock_acquire+0x8>)
 8009366:	f000 b8a7 	b.w	80094b8 <__retarget_lock_acquire_recursive>
 800936a:	bf00      	nop
 800936c:	200003bb 	.word	0x200003bb

08009370 <__sinit_lock_release>:
 8009370:	4801      	ldr	r0, [pc, #4]	; (8009378 <__sinit_lock_release+0x8>)
 8009372:	f000 b8a2 	b.w	80094ba <__retarget_lock_release_recursive>
 8009376:	bf00      	nop
 8009378:	200003bb 	.word	0x200003bb

0800937c <__sinit>:
 800937c:	b510      	push	{r4, lr}
 800937e:	4604      	mov	r4, r0
 8009380:	f7ff fff0 	bl	8009364 <__sinit_lock_acquire>
 8009384:	69a3      	ldr	r3, [r4, #24]
 8009386:	b11b      	cbz	r3, 8009390 <__sinit+0x14>
 8009388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800938c:	f7ff bff0 	b.w	8009370 <__sinit_lock_release>
 8009390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009394:	6523      	str	r3, [r4, #80]	; 0x50
 8009396:	4b13      	ldr	r3, [pc, #76]	; (80093e4 <__sinit+0x68>)
 8009398:	4a13      	ldr	r2, [pc, #76]	; (80093e8 <__sinit+0x6c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	62a2      	str	r2, [r4, #40]	; 0x28
 800939e:	42a3      	cmp	r3, r4
 80093a0:	bf04      	itt	eq
 80093a2:	2301      	moveq	r3, #1
 80093a4:	61a3      	streq	r3, [r4, #24]
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 f820 	bl	80093ec <__sfp>
 80093ac:	6060      	str	r0, [r4, #4]
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 f81c 	bl	80093ec <__sfp>
 80093b4:	60a0      	str	r0, [r4, #8]
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 f818 	bl	80093ec <__sfp>
 80093bc:	2200      	movs	r2, #0
 80093be:	60e0      	str	r0, [r4, #12]
 80093c0:	2104      	movs	r1, #4
 80093c2:	6860      	ldr	r0, [r4, #4]
 80093c4:	f7ff ff82 	bl	80092cc <std>
 80093c8:	68a0      	ldr	r0, [r4, #8]
 80093ca:	2201      	movs	r2, #1
 80093cc:	2109      	movs	r1, #9
 80093ce:	f7ff ff7d 	bl	80092cc <std>
 80093d2:	68e0      	ldr	r0, [r4, #12]
 80093d4:	2202      	movs	r2, #2
 80093d6:	2112      	movs	r1, #18
 80093d8:	f7ff ff78 	bl	80092cc <std>
 80093dc:	2301      	movs	r3, #1
 80093de:	61a3      	str	r3, [r4, #24]
 80093e0:	e7d2      	b.n	8009388 <__sinit+0xc>
 80093e2:	bf00      	nop
 80093e4:	080098cc 	.word	0x080098cc
 80093e8:	08009315 	.word	0x08009315

080093ec <__sfp>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	4607      	mov	r7, r0
 80093f0:	f7ff ffac 	bl	800934c <__sfp_lock_acquire>
 80093f4:	4b1e      	ldr	r3, [pc, #120]	; (8009470 <__sfp+0x84>)
 80093f6:	681e      	ldr	r6, [r3, #0]
 80093f8:	69b3      	ldr	r3, [r6, #24]
 80093fa:	b913      	cbnz	r3, 8009402 <__sfp+0x16>
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7ff ffbd 	bl	800937c <__sinit>
 8009402:	3648      	adds	r6, #72	; 0x48
 8009404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009408:	3b01      	subs	r3, #1
 800940a:	d503      	bpl.n	8009414 <__sfp+0x28>
 800940c:	6833      	ldr	r3, [r6, #0]
 800940e:	b30b      	cbz	r3, 8009454 <__sfp+0x68>
 8009410:	6836      	ldr	r6, [r6, #0]
 8009412:	e7f7      	b.n	8009404 <__sfp+0x18>
 8009414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009418:	b9d5      	cbnz	r5, 8009450 <__sfp+0x64>
 800941a:	4b16      	ldr	r3, [pc, #88]	; (8009474 <__sfp+0x88>)
 800941c:	60e3      	str	r3, [r4, #12]
 800941e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009422:	6665      	str	r5, [r4, #100]	; 0x64
 8009424:	f000 f847 	bl	80094b6 <__retarget_lock_init_recursive>
 8009428:	f7ff ff96 	bl	8009358 <__sfp_lock_release>
 800942c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009434:	6025      	str	r5, [r4, #0]
 8009436:	61a5      	str	r5, [r4, #24]
 8009438:	2208      	movs	r2, #8
 800943a:	4629      	mov	r1, r5
 800943c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009440:	f7fd fafa 	bl	8006a38 <memset>
 8009444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800944c:	4620      	mov	r0, r4
 800944e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009450:	3468      	adds	r4, #104	; 0x68
 8009452:	e7d9      	b.n	8009408 <__sfp+0x1c>
 8009454:	2104      	movs	r1, #4
 8009456:	4638      	mov	r0, r7
 8009458:	f7ff ff62 	bl	8009320 <__sfmoreglue>
 800945c:	4604      	mov	r4, r0
 800945e:	6030      	str	r0, [r6, #0]
 8009460:	2800      	cmp	r0, #0
 8009462:	d1d5      	bne.n	8009410 <__sfp+0x24>
 8009464:	f7ff ff78 	bl	8009358 <__sfp_lock_release>
 8009468:	230c      	movs	r3, #12
 800946a:	603b      	str	r3, [r7, #0]
 800946c:	e7ee      	b.n	800944c <__sfp+0x60>
 800946e:	bf00      	nop
 8009470:	080098cc 	.word	0x080098cc
 8009474:	ffff0001 	.word	0xffff0001

08009478 <_fwalk_reent>:
 8009478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800947c:	4606      	mov	r6, r0
 800947e:	4688      	mov	r8, r1
 8009480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009484:	2700      	movs	r7, #0
 8009486:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800948a:	f1b9 0901 	subs.w	r9, r9, #1
 800948e:	d505      	bpl.n	800949c <_fwalk_reent+0x24>
 8009490:	6824      	ldr	r4, [r4, #0]
 8009492:	2c00      	cmp	r4, #0
 8009494:	d1f7      	bne.n	8009486 <_fwalk_reent+0xe>
 8009496:	4638      	mov	r0, r7
 8009498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949c:	89ab      	ldrh	r3, [r5, #12]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d907      	bls.n	80094b2 <_fwalk_reent+0x3a>
 80094a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094a6:	3301      	adds	r3, #1
 80094a8:	d003      	beq.n	80094b2 <_fwalk_reent+0x3a>
 80094aa:	4629      	mov	r1, r5
 80094ac:	4630      	mov	r0, r6
 80094ae:	47c0      	blx	r8
 80094b0:	4307      	orrs	r7, r0
 80094b2:	3568      	adds	r5, #104	; 0x68
 80094b4:	e7e9      	b.n	800948a <_fwalk_reent+0x12>

080094b6 <__retarget_lock_init_recursive>:
 80094b6:	4770      	bx	lr

080094b8 <__retarget_lock_acquire_recursive>:
 80094b8:	4770      	bx	lr

080094ba <__retarget_lock_release_recursive>:
 80094ba:	4770      	bx	lr

080094bc <__swhatbuf_r>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	460e      	mov	r6, r1
 80094c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c4:	2900      	cmp	r1, #0
 80094c6:	b096      	sub	sp, #88	; 0x58
 80094c8:	4614      	mov	r4, r2
 80094ca:	461d      	mov	r5, r3
 80094cc:	da07      	bge.n	80094de <__swhatbuf_r+0x22>
 80094ce:	2300      	movs	r3, #0
 80094d0:	602b      	str	r3, [r5, #0]
 80094d2:	89b3      	ldrh	r3, [r6, #12]
 80094d4:	061a      	lsls	r2, r3, #24
 80094d6:	d410      	bmi.n	80094fa <__swhatbuf_r+0x3e>
 80094d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094dc:	e00e      	b.n	80094fc <__swhatbuf_r+0x40>
 80094de:	466a      	mov	r2, sp
 80094e0:	f000 f902 	bl	80096e8 <_fstat_r>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	dbf2      	blt.n	80094ce <__swhatbuf_r+0x12>
 80094e8:	9a01      	ldr	r2, [sp, #4]
 80094ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094f2:	425a      	negs	r2, r3
 80094f4:	415a      	adcs	r2, r3
 80094f6:	602a      	str	r2, [r5, #0]
 80094f8:	e7ee      	b.n	80094d8 <__swhatbuf_r+0x1c>
 80094fa:	2340      	movs	r3, #64	; 0x40
 80094fc:	2000      	movs	r0, #0
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	b016      	add	sp, #88	; 0x58
 8009502:	bd70      	pop	{r4, r5, r6, pc}

08009504 <__smakebuf_r>:
 8009504:	898b      	ldrh	r3, [r1, #12]
 8009506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009508:	079d      	lsls	r5, r3, #30
 800950a:	4606      	mov	r6, r0
 800950c:	460c      	mov	r4, r1
 800950e:	d507      	bpl.n	8009520 <__smakebuf_r+0x1c>
 8009510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	6123      	str	r3, [r4, #16]
 8009518:	2301      	movs	r3, #1
 800951a:	6163      	str	r3, [r4, #20]
 800951c:	b002      	add	sp, #8
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	ab01      	add	r3, sp, #4
 8009522:	466a      	mov	r2, sp
 8009524:	f7ff ffca 	bl	80094bc <__swhatbuf_r>
 8009528:	9900      	ldr	r1, [sp, #0]
 800952a:	4605      	mov	r5, r0
 800952c:	4630      	mov	r0, r6
 800952e:	f7ff f987 	bl	8008840 <_malloc_r>
 8009532:	b948      	cbnz	r0, 8009548 <__smakebuf_r+0x44>
 8009534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009538:	059a      	lsls	r2, r3, #22
 800953a:	d4ef      	bmi.n	800951c <__smakebuf_r+0x18>
 800953c:	f023 0303 	bic.w	r3, r3, #3
 8009540:	f043 0302 	orr.w	r3, r3, #2
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	e7e3      	b.n	8009510 <__smakebuf_r+0xc>
 8009548:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <__smakebuf_r+0x7c>)
 800954a:	62b3      	str	r3, [r6, #40]	; 0x28
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	6020      	str	r0, [r4, #0]
 8009550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	6163      	str	r3, [r4, #20]
 800955a:	9b01      	ldr	r3, [sp, #4]
 800955c:	6120      	str	r0, [r4, #16]
 800955e:	b15b      	cbz	r3, 8009578 <__smakebuf_r+0x74>
 8009560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009564:	4630      	mov	r0, r6
 8009566:	f000 f8d1 	bl	800970c <_isatty_r>
 800956a:	b128      	cbz	r0, 8009578 <__smakebuf_r+0x74>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	f023 0303 	bic.w	r3, r3, #3
 8009572:	f043 0301 	orr.w	r3, r3, #1
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	89a0      	ldrh	r0, [r4, #12]
 800957a:	4305      	orrs	r5, r0
 800957c:	81a5      	strh	r5, [r4, #12]
 800957e:	e7cd      	b.n	800951c <__smakebuf_r+0x18>
 8009580:	08009315 	.word	0x08009315

08009584 <_malloc_usable_size_r>:
 8009584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009588:	1f18      	subs	r0, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	bfbc      	itt	lt
 800958e:	580b      	ldrlt	r3, [r1, r0]
 8009590:	18c0      	addlt	r0, r0, r3
 8009592:	4770      	bx	lr

08009594 <_raise_r>:
 8009594:	291f      	cmp	r1, #31
 8009596:	b538      	push	{r3, r4, r5, lr}
 8009598:	4604      	mov	r4, r0
 800959a:	460d      	mov	r5, r1
 800959c:	d904      	bls.n	80095a8 <_raise_r+0x14>
 800959e:	2316      	movs	r3, #22
 80095a0:	6003      	str	r3, [r0, #0]
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095aa:	b112      	cbz	r2, 80095b2 <_raise_r+0x1e>
 80095ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095b0:	b94b      	cbnz	r3, 80095c6 <_raise_r+0x32>
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 f830 	bl	8009618 <_getpid_r>
 80095b8:	462a      	mov	r2, r5
 80095ba:	4601      	mov	r1, r0
 80095bc:	4620      	mov	r0, r4
 80095be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095c2:	f000 b817 	b.w	80095f4 <_kill_r>
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d00a      	beq.n	80095e0 <_raise_r+0x4c>
 80095ca:	1c59      	adds	r1, r3, #1
 80095cc:	d103      	bne.n	80095d6 <_raise_r+0x42>
 80095ce:	2316      	movs	r3, #22
 80095d0:	6003      	str	r3, [r0, #0]
 80095d2:	2001      	movs	r0, #1
 80095d4:	e7e7      	b.n	80095a6 <_raise_r+0x12>
 80095d6:	2400      	movs	r4, #0
 80095d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095dc:	4628      	mov	r0, r5
 80095de:	4798      	blx	r3
 80095e0:	2000      	movs	r0, #0
 80095e2:	e7e0      	b.n	80095a6 <_raise_r+0x12>

080095e4 <raise>:
 80095e4:	4b02      	ldr	r3, [pc, #8]	; (80095f0 <raise+0xc>)
 80095e6:	4601      	mov	r1, r0
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	f7ff bfd3 	b.w	8009594 <_raise_r>
 80095ee:	bf00      	nop
 80095f0:	2000000c 	.word	0x2000000c

080095f4 <_kill_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d07      	ldr	r5, [pc, #28]	; (8009614 <_kill_r+0x20>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4604      	mov	r4, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	4611      	mov	r1, r2
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	f7f9 f8ff 	bl	8002804 <_kill>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	d102      	bne.n	8009610 <_kill_r+0x1c>
 800960a:	682b      	ldr	r3, [r5, #0]
 800960c:	b103      	cbz	r3, 8009610 <_kill_r+0x1c>
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	bd38      	pop	{r3, r4, r5, pc}
 8009612:	bf00      	nop
 8009614:	200003b4 	.word	0x200003b4

08009618 <_getpid_r>:
 8009618:	f7f9 b8ec 	b.w	80027f4 <_getpid>

0800961c <__sread>:
 800961c:	b510      	push	{r4, lr}
 800961e:	460c      	mov	r4, r1
 8009620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009624:	f000 f894 	bl	8009750 <_read_r>
 8009628:	2800      	cmp	r0, #0
 800962a:	bfab      	itete	ge
 800962c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800962e:	89a3      	ldrhlt	r3, [r4, #12]
 8009630:	181b      	addge	r3, r3, r0
 8009632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009636:	bfac      	ite	ge
 8009638:	6563      	strge	r3, [r4, #84]	; 0x54
 800963a:	81a3      	strhlt	r3, [r4, #12]
 800963c:	bd10      	pop	{r4, pc}

0800963e <__swrite>:
 800963e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009642:	461f      	mov	r7, r3
 8009644:	898b      	ldrh	r3, [r1, #12]
 8009646:	05db      	lsls	r3, r3, #23
 8009648:	4605      	mov	r5, r0
 800964a:	460c      	mov	r4, r1
 800964c:	4616      	mov	r6, r2
 800964e:	d505      	bpl.n	800965c <__swrite+0x1e>
 8009650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009654:	2302      	movs	r3, #2
 8009656:	2200      	movs	r2, #0
 8009658:	f000 f868 	bl	800972c <_lseek_r>
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009666:	81a3      	strh	r3, [r4, #12]
 8009668:	4632      	mov	r2, r6
 800966a:	463b      	mov	r3, r7
 800966c:	4628      	mov	r0, r5
 800966e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009672:	f000 b817 	b.w	80096a4 <_write_r>

08009676 <__sseek>:
 8009676:	b510      	push	{r4, lr}
 8009678:	460c      	mov	r4, r1
 800967a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967e:	f000 f855 	bl	800972c <_lseek_r>
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	bf15      	itete	ne
 8009688:	6560      	strne	r0, [r4, #84]	; 0x54
 800968a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800968e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009692:	81a3      	strheq	r3, [r4, #12]
 8009694:	bf18      	it	ne
 8009696:	81a3      	strhne	r3, [r4, #12]
 8009698:	bd10      	pop	{r4, pc}

0800969a <__sclose>:
 800969a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969e:	f000 b813 	b.w	80096c8 <_close_r>
	...

080096a4 <_write_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d07      	ldr	r5, [pc, #28]	; (80096c4 <_write_r+0x20>)
 80096a8:	4604      	mov	r4, r0
 80096aa:	4608      	mov	r0, r1
 80096ac:	4611      	mov	r1, r2
 80096ae:	2200      	movs	r2, #0
 80096b0:	602a      	str	r2, [r5, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	f7f9 f8dd 	bl	8002872 <_write>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d102      	bne.n	80096c2 <_write_r+0x1e>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	b103      	cbz	r3, 80096c2 <_write_r+0x1e>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	200003b4 	.word	0x200003b4

080096c8 <_close_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d06      	ldr	r5, [pc, #24]	; (80096e4 <_close_r+0x1c>)
 80096cc:	2300      	movs	r3, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	602b      	str	r3, [r5, #0]
 80096d4:	f7f9 f8e9 	bl	80028aa <_close>
 80096d8:	1c43      	adds	r3, r0, #1
 80096da:	d102      	bne.n	80096e2 <_close_r+0x1a>
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	b103      	cbz	r3, 80096e2 <_close_r+0x1a>
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	200003b4 	.word	0x200003b4

080096e8 <_fstat_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	4d07      	ldr	r5, [pc, #28]	; (8009708 <_fstat_r+0x20>)
 80096ec:	2300      	movs	r3, #0
 80096ee:	4604      	mov	r4, r0
 80096f0:	4608      	mov	r0, r1
 80096f2:	4611      	mov	r1, r2
 80096f4:	602b      	str	r3, [r5, #0]
 80096f6:	f7f9 f8e4 	bl	80028c2 <_fstat>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	d102      	bne.n	8009704 <_fstat_r+0x1c>
 80096fe:	682b      	ldr	r3, [r5, #0]
 8009700:	b103      	cbz	r3, 8009704 <_fstat_r+0x1c>
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	bd38      	pop	{r3, r4, r5, pc}
 8009706:	bf00      	nop
 8009708:	200003b4 	.word	0x200003b4

0800970c <_isatty_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d06      	ldr	r5, [pc, #24]	; (8009728 <_isatty_r+0x1c>)
 8009710:	2300      	movs	r3, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	602b      	str	r3, [r5, #0]
 8009718:	f7f9 f8e3 	bl	80028e2 <_isatty>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d102      	bne.n	8009726 <_isatty_r+0x1a>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b103      	cbz	r3, 8009726 <_isatty_r+0x1a>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	200003b4 	.word	0x200003b4

0800972c <_lseek_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d07      	ldr	r5, [pc, #28]	; (800974c <_lseek_r+0x20>)
 8009730:	4604      	mov	r4, r0
 8009732:	4608      	mov	r0, r1
 8009734:	4611      	mov	r1, r2
 8009736:	2200      	movs	r2, #0
 8009738:	602a      	str	r2, [r5, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	f7f9 f8dc 	bl	80028f8 <_lseek>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_lseek_r+0x1e>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_lseek_r+0x1e>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	200003b4 	.word	0x200003b4

08009750 <_read_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d07      	ldr	r5, [pc, #28]	; (8009770 <_read_r+0x20>)
 8009754:	4604      	mov	r4, r0
 8009756:	4608      	mov	r0, r1
 8009758:	4611      	mov	r1, r2
 800975a:	2200      	movs	r2, #0
 800975c:	602a      	str	r2, [r5, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	f7f9 f86a 	bl	8002838 <_read>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_read_r+0x1e>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_read_r+0x1e>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	200003b4 	.word	0x200003b4
 8009774:	00000000 	.word	0x00000000

08009778 <floor>:
 8009778:	ec51 0b10 	vmov	r0, r1, d0
 800977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009780:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009784:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009788:	2e13      	cmp	r6, #19
 800978a:	ee10 5a10 	vmov	r5, s0
 800978e:	ee10 8a10 	vmov	r8, s0
 8009792:	460c      	mov	r4, r1
 8009794:	dc32      	bgt.n	80097fc <floor+0x84>
 8009796:	2e00      	cmp	r6, #0
 8009798:	da14      	bge.n	80097c4 <floor+0x4c>
 800979a:	a333      	add	r3, pc, #204	; (adr r3, 8009868 <floor+0xf0>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f7f6 fd7c 	bl	800029c <__adddf3>
 80097a4:	2200      	movs	r2, #0
 80097a6:	2300      	movs	r3, #0
 80097a8:	f7f7 f9be 	bl	8000b28 <__aeabi_dcmpgt>
 80097ac:	b138      	cbz	r0, 80097be <floor+0x46>
 80097ae:	2c00      	cmp	r4, #0
 80097b0:	da57      	bge.n	8009862 <floor+0xea>
 80097b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80097b6:	431d      	orrs	r5, r3
 80097b8:	d001      	beq.n	80097be <floor+0x46>
 80097ba:	4c2d      	ldr	r4, [pc, #180]	; (8009870 <floor+0xf8>)
 80097bc:	2500      	movs	r5, #0
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	e025      	b.n	8009810 <floor+0x98>
 80097c4:	4f2b      	ldr	r7, [pc, #172]	; (8009874 <floor+0xfc>)
 80097c6:	4137      	asrs	r7, r6
 80097c8:	ea01 0307 	and.w	r3, r1, r7
 80097cc:	4303      	orrs	r3, r0
 80097ce:	d01f      	beq.n	8009810 <floor+0x98>
 80097d0:	a325      	add	r3, pc, #148	; (adr r3, 8009868 <floor+0xf0>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f7f6 fd61 	bl	800029c <__adddf3>
 80097da:	2200      	movs	r2, #0
 80097dc:	2300      	movs	r3, #0
 80097de:	f7f7 f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0eb      	beq.n	80097be <floor+0x46>
 80097e6:	2c00      	cmp	r4, #0
 80097e8:	bfbe      	ittt	lt
 80097ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80097ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80097f2:	19a4      	addlt	r4, r4, r6
 80097f4:	ea24 0407 	bic.w	r4, r4, r7
 80097f8:	2500      	movs	r5, #0
 80097fa:	e7e0      	b.n	80097be <floor+0x46>
 80097fc:	2e33      	cmp	r6, #51	; 0x33
 80097fe:	dd0b      	ble.n	8009818 <floor+0xa0>
 8009800:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009804:	d104      	bne.n	8009810 <floor+0x98>
 8009806:	ee10 2a10 	vmov	r2, s0
 800980a:	460b      	mov	r3, r1
 800980c:	f7f6 fd46 	bl	800029c <__adddf3>
 8009810:	ec41 0b10 	vmov	d0, r0, r1
 8009814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009818:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800981c:	f04f 33ff 	mov.w	r3, #4294967295
 8009820:	fa23 f707 	lsr.w	r7, r3, r7
 8009824:	4207      	tst	r7, r0
 8009826:	d0f3      	beq.n	8009810 <floor+0x98>
 8009828:	a30f      	add	r3, pc, #60	; (adr r3, 8009868 <floor+0xf0>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 fd35 	bl	800029c <__adddf3>
 8009832:	2200      	movs	r2, #0
 8009834:	2300      	movs	r3, #0
 8009836:	f7f7 f977 	bl	8000b28 <__aeabi_dcmpgt>
 800983a:	2800      	cmp	r0, #0
 800983c:	d0bf      	beq.n	80097be <floor+0x46>
 800983e:	2c00      	cmp	r4, #0
 8009840:	da02      	bge.n	8009848 <floor+0xd0>
 8009842:	2e14      	cmp	r6, #20
 8009844:	d103      	bne.n	800984e <floor+0xd6>
 8009846:	3401      	adds	r4, #1
 8009848:	ea25 0507 	bic.w	r5, r5, r7
 800984c:	e7b7      	b.n	80097be <floor+0x46>
 800984e:	2301      	movs	r3, #1
 8009850:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009854:	fa03 f606 	lsl.w	r6, r3, r6
 8009858:	4435      	add	r5, r6
 800985a:	4545      	cmp	r5, r8
 800985c:	bf38      	it	cc
 800985e:	18e4      	addcc	r4, r4, r3
 8009860:	e7f2      	b.n	8009848 <floor+0xd0>
 8009862:	2500      	movs	r5, #0
 8009864:	462c      	mov	r4, r5
 8009866:	e7aa      	b.n	80097be <floor+0x46>
 8009868:	8800759c 	.word	0x8800759c
 800986c:	7e37e43c 	.word	0x7e37e43c
 8009870:	bff00000 	.word	0xbff00000
 8009874:	000fffff 	.word	0x000fffff

08009878 <_init>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	bf00      	nop
 800987c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987e:	bc08      	pop	{r3}
 8009880:	469e      	mov	lr, r3
 8009882:	4770      	bx	lr

08009884 <_fini>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	bf00      	nop
 8009888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988a:	bc08      	pop	{r3}
 800988c:	469e      	mov	lr, r3
 800988e:	4770      	bx	lr
